// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/devices/file/FileSettings.proto

#include "io/proto/devices/file/FileSettings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProbeModel_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto;
namespace arrus {
namespace proto {
class FileSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileSettings> _instance;
  const ::arrus::proto::ProbeModel_Id* probe_id_;
  const ::arrus::proto::ProbeModel* probe_;
} _FileSettings_default_instance_;
}  // namespace proto
}  // namespace arrus
static void InitDefaultsscc_info_FileSettings_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_FileSettings_default_instance_;
    new (ptr) ::arrus::proto::FileSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::FileSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FileSettings_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FileSettings_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto}, {
      &scc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.base,
      &scc_info_ProbeModel_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::FileSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::FileSettings, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::FileSettings, filepath_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::FileSettings, n_frames_),
  offsetof(::arrus::proto::FileSettingsDefaultTypeInternal, probe_id_),
  offsetof(::arrus::proto::FileSettingsDefaultTypeInternal, probe_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::FileSettings, one_of_probe_representation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::arrus::proto::FileSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_FileSettings_default_instance_),
};

const char descriptor_table_protodef_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(io/proto/devices/file/FileSettings.pro"
  "to\022\013arrus.proto\032\'io/proto/devices/probe/"
  "ProbeModel.proto\"\253\001\n\014FileSettings\022\020\n\010fil"
  "epath\030\001 \001(\t\022\020\n\010n_frames\030\002 \001(\r\022.\n\010probe_i"
  "d\030\003 \001(\0132\032.arrus.proto.ProbeModel.IdH\000\022(\n"
  "\005probe\030\004 \001(\0132\027.arrus.proto.ProbeModelH\000B"
  "\035\n\033one_of_probe_representationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto_deps[1] = {
  &::descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto_sccs[1] = {
  &scc_info_FileSettings_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto_once;
static bool descriptor_table_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto = {
  &descriptor_table_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto_initialized, descriptor_table_protodef_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto, "io/proto/devices/file/FileSettings.proto", 278,
  &descriptor_table_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto_once, descriptor_table_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto_sccs, descriptor_table_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto::offsets,
  file_level_metadata_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto, 1, file_level_enum_descriptors_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto, file_level_service_descriptors_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto), true);
namespace arrus {
namespace proto {

// ===================================================================

void FileSettings::InitAsDefaultInstance() {
  ::arrus::proto::_FileSettings_default_instance_.probe_id_ = const_cast< ::arrus::proto::ProbeModel_Id*>(
      ::arrus::proto::ProbeModel_Id::internal_default_instance());
  ::arrus::proto::_FileSettings_default_instance_.probe_ = const_cast< ::arrus::proto::ProbeModel*>(
      ::arrus::proto::ProbeModel::internal_default_instance());
}
class FileSettings::_Internal {
 public:
  static const ::arrus::proto::ProbeModel_Id& probe_id(const FileSettings* msg);
  static const ::arrus::proto::ProbeModel& probe(const FileSettings* msg);
};

const ::arrus::proto::ProbeModel_Id&
FileSettings::_Internal::probe_id(const FileSettings* msg) {
  return *msg->one_of_probe_representation_.probe_id_;
}
const ::arrus::proto::ProbeModel&
FileSettings::_Internal::probe(const FileSettings* msg) {
  return *msg->one_of_probe_representation_.probe_;
}
void FileSettings::set_allocated_probe_id(::arrus::proto::ProbeModel_Id* probe_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_one_of_probe_representation();
  if (probe_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      probe_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probe_id, submessage_arena);
    }
    set_has_probe_id();
    one_of_probe_representation_.probe_id_ = probe_id;
  }
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.FileSettings.probe_id)
}
void FileSettings::clear_probe_id() {
  if (_internal_has_probe_id()) {
    delete one_of_probe_representation_.probe_id_;
    clear_has_one_of_probe_representation();
  }
}
void FileSettings::set_allocated_probe(::arrus::proto::ProbeModel* probe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_one_of_probe_representation();
  if (probe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      probe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probe, submessage_arena);
    }
    set_has_probe();
    one_of_probe_representation_.probe_ = probe;
  }
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.FileSettings.probe)
}
void FileSettings::clear_probe() {
  if (_internal_has_probe()) {
    delete one_of_probe_representation_.probe_;
    clear_has_one_of_probe_representation();
  }
}
FileSettings::FileSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.FileSettings)
}
FileSettings::FileSettings(const FileSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filepath().empty()) {
    filepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  n_frames_ = from.n_frames_;
  clear_has_one_of_probe_representation();
  switch (from.one_of_probe_representation_case()) {
    case kProbeId: {
      _internal_mutable_probe_id()->::arrus::proto::ProbeModel_Id::MergeFrom(from._internal_probe_id());
      break;
    }
    case kProbe: {
      _internal_mutable_probe()->::arrus::proto::ProbeModel::MergeFrom(from._internal_probe());
      break;
    }
    case ONE_OF_PROBE_REPRESENTATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:arrus.proto.FileSettings)
}

void FileSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileSettings_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto.base);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  n_frames_ = 0u;
  clear_has_one_of_probe_representation();
}

FileSettings::~FileSettings() {
  // @@protoc_insertion_point(destructor:arrus.proto.FileSettings)
  SharedDtor();
}

void FileSettings::SharedDtor() {
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_one_of_probe_representation()) {
    clear_one_of_probe_representation();
  }
}

void FileSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileSettings& FileSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileSettings_io_2fproto_2fdevices_2ffile_2fFileSettings_2eproto.base);
  return *internal_default_instance();
}


void FileSettings::clear_one_of_probe_representation() {
// @@protoc_insertion_point(one_of_clear_start:arrus.proto.FileSettings)
  switch (one_of_probe_representation_case()) {
    case kProbeId: {
      delete one_of_probe_representation_.probe_id_;
      break;
    }
    case kProbe: {
      delete one_of_probe_representation_.probe_;
      break;
    }
    case ONE_OF_PROBE_REPRESENTATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONE_OF_PROBE_REPRESENTATION_NOT_SET;
}


void FileSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.FileSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  n_frames_ = 0u;
  clear_one_of_probe_representation();
  _internal_metadata_.Clear();
}

const char* FileSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filepath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "arrus.proto.FileSettings.filepath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrus.proto.ProbeModel.Id probe_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_probe_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrus.proto.ProbeModel probe = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_probe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.FileSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filepath = 1;
  if (this->filepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrus.proto.FileSettings.filepath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  // uint32 n_frames = 2;
  if (this->n_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_n_frames(), target);
  }

  // .arrus.proto.ProbeModel.Id probe_id = 3;
  if (_internal_has_probe_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::probe_id(this), target, stream);
  }

  // .arrus.proto.ProbeModel probe = 4;
  if (_internal_has_probe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::probe(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.FileSettings)
  return target;
}

size_t FileSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.FileSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filepath = 1;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // uint32 n_frames = 2;
  if (this->n_frames() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_frames());
  }

  switch (one_of_probe_representation_case()) {
    // .arrus.proto.ProbeModel.Id probe_id = 3;
    case kProbeId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *one_of_probe_representation_.probe_id_);
      break;
    }
    // .arrus.proto.ProbeModel probe = 4;
    case kProbe: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *one_of_probe_representation_.probe_);
      break;
    }
    case ONE_OF_PROBE_REPRESENTATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.FileSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const FileSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.FileSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.FileSettings)
    MergeFrom(*source);
  }
}

void FileSettings::MergeFrom(const FileSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.FileSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filepath().size() > 0) {

    filepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  if (from.n_frames() != 0) {
    _internal_set_n_frames(from._internal_n_frames());
  }
  switch (from.one_of_probe_representation_case()) {
    case kProbeId: {
      _internal_mutable_probe_id()->::arrus::proto::ProbeModel_Id::MergeFrom(from._internal_probe_id());
      break;
    }
    case kProbe: {
      _internal_mutable_probe()->::arrus::proto::ProbeModel::MergeFrom(from._internal_probe());
      break;
    }
    case ONE_OF_PROBE_REPRESENTATION_NOT_SET: {
      break;
    }
  }
}

void FileSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.FileSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSettings::CopyFrom(const FileSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.FileSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSettings::IsInitialized() const {
  return true;
}

void FileSettings::InternalSwap(FileSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filepath_.Swap(&other->filepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(n_frames_, other->n_frames_);
  swap(one_of_probe_representation_, other->one_of_probe_representation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::arrus::proto::FileSettings* Arena::CreateMaybeMessage< ::arrus::proto::FileSettings >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::FileSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
