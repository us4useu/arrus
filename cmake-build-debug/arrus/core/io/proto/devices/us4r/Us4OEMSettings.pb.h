// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/devices/us4r/Us4OEMSettings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "io/proto/devices/us4r/RxSettings.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto;
namespace arrus {
namespace proto {
class Us4OEMSettings;
class Us4OEMSettingsDefaultTypeInternal;
extern Us4OEMSettingsDefaultTypeInternal _Us4OEMSettings_default_instance_;
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> ::arrus::proto::Us4OEMSettings* Arena::CreateMaybeMessage<::arrus::proto::Us4OEMSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace arrus {
namespace proto {

enum Us4OEMSettings_ReprogrammingMode : int {
  Us4OEMSettings_ReprogrammingMode_SEQUENTIAL = 0,
  Us4OEMSettings_ReprogrammingMode_PARALLEL = 1,
  Us4OEMSettings_ReprogrammingMode_Us4OEMSettings_ReprogrammingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Us4OEMSettings_ReprogrammingMode_Us4OEMSettings_ReprogrammingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Us4OEMSettings_ReprogrammingMode_IsValid(int value);
constexpr Us4OEMSettings_ReprogrammingMode Us4OEMSettings_ReprogrammingMode_ReprogrammingMode_MIN = Us4OEMSettings_ReprogrammingMode_SEQUENTIAL;
constexpr Us4OEMSettings_ReprogrammingMode Us4OEMSettings_ReprogrammingMode_ReprogrammingMode_MAX = Us4OEMSettings_ReprogrammingMode_PARALLEL;
constexpr int Us4OEMSettings_ReprogrammingMode_ReprogrammingMode_ARRAYSIZE = Us4OEMSettings_ReprogrammingMode_ReprogrammingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Us4OEMSettings_ReprogrammingMode_descriptor();
template<typename T>
inline const std::string& Us4OEMSettings_ReprogrammingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Us4OEMSettings_ReprogrammingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Us4OEMSettings_ReprogrammingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Us4OEMSettings_ReprogrammingMode_descriptor(), enum_t_value);
}
inline bool Us4OEMSettings_ReprogrammingMode_Parse(
    const std::string& name, Us4OEMSettings_ReprogrammingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Us4OEMSettings_ReprogrammingMode>(
    Us4OEMSettings_ReprogrammingMode_descriptor(), name, value);
}
// ===================================================================

class Us4OEMSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrus.proto.Us4OEMSettings) */ {
 public:
  Us4OEMSettings();
  virtual ~Us4OEMSettings();

  Us4OEMSettings(const Us4OEMSettings& from);
  Us4OEMSettings(Us4OEMSettings&& from) noexcept
    : Us4OEMSettings() {
    *this = ::std::move(from);
  }

  inline Us4OEMSettings& operator=(const Us4OEMSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Us4OEMSettings& operator=(Us4OEMSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Us4OEMSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Us4OEMSettings* internal_default_instance() {
    return reinterpret_cast<const Us4OEMSettings*>(
               &_Us4OEMSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Us4OEMSettings& a, Us4OEMSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(Us4OEMSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Us4OEMSettings* New() const final {
    return CreateMaybeMessage<Us4OEMSettings>(nullptr);
  }

  Us4OEMSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Us4OEMSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Us4OEMSettings& from);
  void MergeFrom(const Us4OEMSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Us4OEMSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrus.proto.Us4OEMSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto);
    return ::descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Us4OEMSettings_ReprogrammingMode ReprogrammingMode;
  static constexpr ReprogrammingMode SEQUENTIAL =
    Us4OEMSettings_ReprogrammingMode_SEQUENTIAL;
  static constexpr ReprogrammingMode PARALLEL =
    Us4OEMSettings_ReprogrammingMode_PARALLEL;
  static inline bool ReprogrammingMode_IsValid(int value) {
    return Us4OEMSettings_ReprogrammingMode_IsValid(value);
  }
  static constexpr ReprogrammingMode ReprogrammingMode_MIN =
    Us4OEMSettings_ReprogrammingMode_ReprogrammingMode_MIN;
  static constexpr ReprogrammingMode ReprogrammingMode_MAX =
    Us4OEMSettings_ReprogrammingMode_ReprogrammingMode_MAX;
  static constexpr int ReprogrammingMode_ARRAYSIZE =
    Us4OEMSettings_ReprogrammingMode_ReprogrammingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReprogrammingMode_descriptor() {
    return Us4OEMSettings_ReprogrammingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ReprogrammingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReprogrammingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReprogrammingMode_Name.");
    return Us4OEMSettings_ReprogrammingMode_Name(enum_t_value);
  }
  static inline bool ReprogrammingMode_Parse(const std::string& name,
      ReprogrammingMode* value) {
    return Us4OEMSettings_ReprogrammingMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChannelMappingFieldNumber = 1,
    kActiveChannelGroupsFieldNumber = 2,
    kRxSettingsFieldNumber = 3,
    kReprogrammingModeFieldNumber = 4,
  };
  // repeated uint32 channel_mapping = 1;
  int channel_mapping_size() const;
  private:
  int _internal_channel_mapping_size() const;
  public:
  void clear_channel_mapping();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_mapping(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_channel_mapping() const;
  void _internal_add_channel_mapping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_channel_mapping();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_mapping(int index) const;
  void set_channel_mapping(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_channel_mapping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      channel_mapping() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_channel_mapping();

  // repeated bool active_channel_groups = 2;
  int active_channel_groups_size() const;
  private:
  int _internal_active_channel_groups_size() const;
  public:
  void clear_active_channel_groups();
  private:
  bool _internal_active_channel_groups(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_active_channel_groups() const;
  void _internal_add_active_channel_groups(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_active_channel_groups();
  public:
  bool active_channel_groups(int index) const;
  void set_active_channel_groups(int index, bool value);
  void add_active_channel_groups(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      active_channel_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_active_channel_groups();

  // .arrus.proto.RxSettings rx_settings = 3;
  bool has_rx_settings() const;
  private:
  bool _internal_has_rx_settings() const;
  public:
  void clear_rx_settings();
  const ::arrus::proto::RxSettings& rx_settings() const;
  ::arrus::proto::RxSettings* release_rx_settings();
  ::arrus::proto::RxSettings* mutable_rx_settings();
  void set_allocated_rx_settings(::arrus::proto::RxSettings* rx_settings);
  private:
  const ::arrus::proto::RxSettings& _internal_rx_settings() const;
  ::arrus::proto::RxSettings* _internal_mutable_rx_settings();
  public:

  // .arrus.proto.Us4OEMSettings.ReprogrammingMode reprogramming_mode = 4;
  void clear_reprogramming_mode();
  ::arrus::proto::Us4OEMSettings_ReprogrammingMode reprogramming_mode() const;
  void set_reprogramming_mode(::arrus::proto::Us4OEMSettings_ReprogrammingMode value);
  private:
  ::arrus::proto::Us4OEMSettings_ReprogrammingMode _internal_reprogramming_mode() const;
  void _internal_set_reprogramming_mode(::arrus::proto::Us4OEMSettings_ReprogrammingMode value);
  public:

  // @@protoc_insertion_point(class_scope:arrus.proto.Us4OEMSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > channel_mapping_;
  mutable std::atomic<int> _channel_mapping_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > active_channel_groups_;
  mutable std::atomic<int> _active_channel_groups_cached_byte_size_;
  ::arrus::proto::RxSettings* rx_settings_;
  int reprogramming_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Us4OEMSettings

// repeated uint32 channel_mapping = 1;
inline int Us4OEMSettings::_internal_channel_mapping_size() const {
  return channel_mapping_.size();
}
inline int Us4OEMSettings::channel_mapping_size() const {
  return _internal_channel_mapping_size();
}
inline void Us4OEMSettings::clear_channel_mapping() {
  channel_mapping_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Us4OEMSettings::_internal_channel_mapping(int index) const {
  return channel_mapping_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Us4OEMSettings::channel_mapping(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4OEMSettings.channel_mapping)
  return _internal_channel_mapping(index);
}
inline void Us4OEMSettings::set_channel_mapping(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channel_mapping_.Set(index, value);
  // @@protoc_insertion_point(field_set:arrus.proto.Us4OEMSettings.channel_mapping)
}
inline void Us4OEMSettings::_internal_add_channel_mapping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channel_mapping_.Add(value);
}
inline void Us4OEMSettings::add_channel_mapping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_channel_mapping(value);
  // @@protoc_insertion_point(field_add:arrus.proto.Us4OEMSettings.channel_mapping)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Us4OEMSettings::_internal_channel_mapping() const {
  return channel_mapping_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Us4OEMSettings::channel_mapping() const {
  // @@protoc_insertion_point(field_list:arrus.proto.Us4OEMSettings.channel_mapping)
  return _internal_channel_mapping();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Us4OEMSettings::_internal_mutable_channel_mapping() {
  return &channel_mapping_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Us4OEMSettings::mutable_channel_mapping() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.Us4OEMSettings.channel_mapping)
  return _internal_mutable_channel_mapping();
}

// repeated bool active_channel_groups = 2;
inline int Us4OEMSettings::_internal_active_channel_groups_size() const {
  return active_channel_groups_.size();
}
inline int Us4OEMSettings::active_channel_groups_size() const {
  return _internal_active_channel_groups_size();
}
inline void Us4OEMSettings::clear_active_channel_groups() {
  active_channel_groups_.Clear();
}
inline bool Us4OEMSettings::_internal_active_channel_groups(int index) const {
  return active_channel_groups_.Get(index);
}
inline bool Us4OEMSettings::active_channel_groups(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4OEMSettings.active_channel_groups)
  return _internal_active_channel_groups(index);
}
inline void Us4OEMSettings::set_active_channel_groups(int index, bool value) {
  active_channel_groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:arrus.proto.Us4OEMSettings.active_channel_groups)
}
inline void Us4OEMSettings::_internal_add_active_channel_groups(bool value) {
  active_channel_groups_.Add(value);
}
inline void Us4OEMSettings::add_active_channel_groups(bool value) {
  _internal_add_active_channel_groups(value);
  // @@protoc_insertion_point(field_add:arrus.proto.Us4OEMSettings.active_channel_groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Us4OEMSettings::_internal_active_channel_groups() const {
  return active_channel_groups_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Us4OEMSettings::active_channel_groups() const {
  // @@protoc_insertion_point(field_list:arrus.proto.Us4OEMSettings.active_channel_groups)
  return _internal_active_channel_groups();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Us4OEMSettings::_internal_mutable_active_channel_groups() {
  return &active_channel_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Us4OEMSettings::mutable_active_channel_groups() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.Us4OEMSettings.active_channel_groups)
  return _internal_mutable_active_channel_groups();
}

// .arrus.proto.RxSettings rx_settings = 3;
inline bool Us4OEMSettings::_internal_has_rx_settings() const {
  return this != internal_default_instance() && rx_settings_ != nullptr;
}
inline bool Us4OEMSettings::has_rx_settings() const {
  return _internal_has_rx_settings();
}
inline const ::arrus::proto::RxSettings& Us4OEMSettings::_internal_rx_settings() const {
  const ::arrus::proto::RxSettings* p = rx_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::arrus::proto::RxSettings*>(
      &::arrus::proto::_RxSettings_default_instance_);
}
inline const ::arrus::proto::RxSettings& Us4OEMSettings::rx_settings() const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4OEMSettings.rx_settings)
  return _internal_rx_settings();
}
inline ::arrus::proto::RxSettings* Us4OEMSettings::release_rx_settings() {
  // @@protoc_insertion_point(field_release:arrus.proto.Us4OEMSettings.rx_settings)
  
  ::arrus::proto::RxSettings* temp = rx_settings_;
  rx_settings_ = nullptr;
  return temp;
}
inline ::arrus::proto::RxSettings* Us4OEMSettings::_internal_mutable_rx_settings() {
  
  if (rx_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrus::proto::RxSettings>(GetArenaNoVirtual());
    rx_settings_ = p;
  }
  return rx_settings_;
}
inline ::arrus::proto::RxSettings* Us4OEMSettings::mutable_rx_settings() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4OEMSettings.rx_settings)
  return _internal_mutable_rx_settings();
}
inline void Us4OEMSettings::set_allocated_rx_settings(::arrus::proto::RxSettings* rx_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rx_settings_);
  }
  if (rx_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rx_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rx_settings, submessage_arena);
    }
    
  } else {
    
  }
  rx_settings_ = rx_settings;
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.Us4OEMSettings.rx_settings)
}

// .arrus.proto.Us4OEMSettings.ReprogrammingMode reprogramming_mode = 4;
inline void Us4OEMSettings::clear_reprogramming_mode() {
  reprogramming_mode_ = 0;
}
inline ::arrus::proto::Us4OEMSettings_ReprogrammingMode Us4OEMSettings::_internal_reprogramming_mode() const {
  return static_cast< ::arrus::proto::Us4OEMSettings_ReprogrammingMode >(reprogramming_mode_);
}
inline ::arrus::proto::Us4OEMSettings_ReprogrammingMode Us4OEMSettings::reprogramming_mode() const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4OEMSettings.reprogramming_mode)
  return _internal_reprogramming_mode();
}
inline void Us4OEMSettings::_internal_set_reprogramming_mode(::arrus::proto::Us4OEMSettings_ReprogrammingMode value) {
  
  reprogramming_mode_ = value;
}
inline void Us4OEMSettings::set_reprogramming_mode(::arrus::proto::Us4OEMSettings_ReprogrammingMode value) {
  _internal_set_reprogramming_mode(value);
  // @@protoc_insertion_point(field_set:arrus.proto.Us4OEMSettings.reprogramming_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace arrus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::arrus::proto::Us4OEMSettings_ReprogrammingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::arrus::proto::Us4OEMSettings_ReprogrammingMode>() {
  return ::arrus::proto::Us4OEMSettings_ReprogrammingMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto
