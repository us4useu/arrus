// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/devices/us4r/ProbeToAdapterConnection.proto

#include "io/proto/devices/us4r/ProbeToAdapterConnection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fcommon_2fIntervalInteger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntervalInteger_io_2fproto_2fcommon_2fIntervalInteger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeAdapterModel_Id_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeToAdapterConnection_BitstreamId_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto;
namespace arrus {
namespace proto {
class ProbeToAdapterConnection_BitstreamIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProbeToAdapterConnection_BitstreamId> _instance;
} _ProbeToAdapterConnection_BitstreamId_default_instance_;
class ProbeToAdapterConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProbeToAdapterConnection> _instance;
} _ProbeToAdapterConnection_default_instance_;
}  // namespace proto
}  // namespace arrus
static void InitDefaultsscc_info_ProbeToAdapterConnection_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_ProbeToAdapterConnection_default_instance_;
    new (ptr) ::arrus::proto::ProbeToAdapterConnection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::ProbeToAdapterConnection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProbeToAdapterConnection_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ProbeToAdapterConnection_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto}, {
      &scc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.base,
      &scc_info_ProbeAdapterModel_Id_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base,
      &scc_info_IntervalInteger_io_2fproto_2fcommon_2fIntervalInteger_2eproto.base,
      &scc_info_ProbeToAdapterConnection_BitstreamId_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto.base,}};

static void InitDefaultsscc_info_ProbeToAdapterConnection_BitstreamId_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_ProbeToAdapterConnection_BitstreamId_default_instance_;
    new (ptr) ::arrus::proto::ProbeToAdapterConnection_BitstreamId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::ProbeToAdapterConnection_BitstreamId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeToAdapterConnection_BitstreamId_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProbeToAdapterConnection_BitstreamId_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeToAdapterConnection_BitstreamId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeToAdapterConnection_BitstreamId, ordinal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeToAdapterConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeToAdapterConnection, probe_model_id_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeToAdapterConnection, probe_adapter_model_id_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeToAdapterConnection, channel_mapping_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeToAdapterConnection, channel_mapping_ranges_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeToAdapterConnection, bitstream_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::arrus::proto::ProbeToAdapterConnection_BitstreamId)},
  { 6, -1, sizeof(::arrus::proto::ProbeToAdapterConnection)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_ProbeToAdapterConnection_BitstreamId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_ProbeToAdapterConnection_default_instance_),
};

const char descriptor_table_protodef_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4io/proto/devices/us4r/ProbeToAdapterCo"
  "nnection.proto\022\013arrus.proto\032\'io/proto/de"
  "vices/probe/ProbeModel.proto\032-io/proto/d"
  "evices/us4r/ProbeAdapterModel.proto\032%io/"
  "proto/common/IntervalInteger.proto\"\321\002\n\030P"
  "robeToAdapterConnection\0222\n\016probe_model_i"
  "d\030\001 \001(\0132\032.arrus.proto.ProbeModel.Id\022A\n\026p"
  "robe_adapter_model_id\030\002 \003(\0132!.arrus.prot"
  "o.ProbeAdapterModel.Id\022\027\n\017channel_mappin"
  "g\030\003 \003(\r\022<\n\026channel_mapping_ranges\030\004 \003(\0132"
  "\034.arrus.proto.IntervalInteger\022G\n\014bitstre"
  "am_id\030\005 \001(\01321.arrus.proto.ProbeToAdapter"
  "Connection.BitstreamId\032\036\n\013BitstreamId\022\017\n"
  "\007ordinal\030\001 \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto_deps[3] = {
  &::descriptor_table_io_2fproto_2fcommon_2fIntervalInteger_2eproto,
  &::descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto,
  &::descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto_sccs[2] = {
  &scc_info_ProbeToAdapterConnection_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto.base,
  &scc_info_ProbeToAdapterConnection_BitstreamId_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto_once;
static bool descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto = {
  &descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto_initialized, descriptor_table_protodef_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto, "io/proto/devices/us4r/ProbeToAdapterConnection.proto", 542,
  &descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto_once, descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto_sccs, descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto::offsets,
  file_level_metadata_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto, 2, file_level_enum_descriptors_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto, file_level_service_descriptors_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto), true);
namespace arrus {
namespace proto {

// ===================================================================

void ProbeToAdapterConnection_BitstreamId::InitAsDefaultInstance() {
}
class ProbeToAdapterConnection_BitstreamId::_Internal {
 public:
};

ProbeToAdapterConnection_BitstreamId::ProbeToAdapterConnection_BitstreamId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.ProbeToAdapterConnection.BitstreamId)
}
ProbeToAdapterConnection_BitstreamId::ProbeToAdapterConnection_BitstreamId(const ProbeToAdapterConnection_BitstreamId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ordinal_ = from.ordinal_;
  // @@protoc_insertion_point(copy_constructor:arrus.proto.ProbeToAdapterConnection.BitstreamId)
}

void ProbeToAdapterConnection_BitstreamId::SharedCtor() {
  ordinal_ = 0u;
}

ProbeToAdapterConnection_BitstreamId::~ProbeToAdapterConnection_BitstreamId() {
  // @@protoc_insertion_point(destructor:arrus.proto.ProbeToAdapterConnection.BitstreamId)
  SharedDtor();
}

void ProbeToAdapterConnection_BitstreamId::SharedDtor() {
}

void ProbeToAdapterConnection_BitstreamId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProbeToAdapterConnection_BitstreamId& ProbeToAdapterConnection_BitstreamId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProbeToAdapterConnection_BitstreamId_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto.base);
  return *internal_default_instance();
}


void ProbeToAdapterConnection_BitstreamId::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.ProbeToAdapterConnection.BitstreamId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ordinal_ = 0u;
  _internal_metadata_.Clear();
}

const char* ProbeToAdapterConnection_BitstreamId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ordinal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProbeToAdapterConnection_BitstreamId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.ProbeToAdapterConnection.BitstreamId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ordinal = 1;
  if (this->ordinal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ordinal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.ProbeToAdapterConnection.BitstreamId)
  return target;
}

size_t ProbeToAdapterConnection_BitstreamId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.ProbeToAdapterConnection.BitstreamId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ordinal = 1;
  if (this->ordinal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ordinal());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbeToAdapterConnection_BitstreamId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.ProbeToAdapterConnection.BitstreamId)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbeToAdapterConnection_BitstreamId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProbeToAdapterConnection_BitstreamId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.ProbeToAdapterConnection.BitstreamId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.ProbeToAdapterConnection.BitstreamId)
    MergeFrom(*source);
  }
}

void ProbeToAdapterConnection_BitstreamId::MergeFrom(const ProbeToAdapterConnection_BitstreamId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.ProbeToAdapterConnection.BitstreamId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ordinal() != 0) {
    _internal_set_ordinal(from._internal_ordinal());
  }
}

void ProbeToAdapterConnection_BitstreamId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.ProbeToAdapterConnection.BitstreamId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeToAdapterConnection_BitstreamId::CopyFrom(const ProbeToAdapterConnection_BitstreamId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.ProbeToAdapterConnection.BitstreamId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeToAdapterConnection_BitstreamId::IsInitialized() const {
  return true;
}

void ProbeToAdapterConnection_BitstreamId::InternalSwap(ProbeToAdapterConnection_BitstreamId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ordinal_, other->ordinal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProbeToAdapterConnection_BitstreamId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProbeToAdapterConnection::InitAsDefaultInstance() {
  ::arrus::proto::_ProbeToAdapterConnection_default_instance_._instance.get_mutable()->probe_model_id_ = const_cast< ::arrus::proto::ProbeModel_Id*>(
      ::arrus::proto::ProbeModel_Id::internal_default_instance());
  ::arrus::proto::_ProbeToAdapterConnection_default_instance_._instance.get_mutable()->bitstream_id_ = const_cast< ::arrus::proto::ProbeToAdapterConnection_BitstreamId*>(
      ::arrus::proto::ProbeToAdapterConnection_BitstreamId::internal_default_instance());
}
class ProbeToAdapterConnection::_Internal {
 public:
  static const ::arrus::proto::ProbeModel_Id& probe_model_id(const ProbeToAdapterConnection* msg);
  static const ::arrus::proto::ProbeToAdapterConnection_BitstreamId& bitstream_id(const ProbeToAdapterConnection* msg);
};

const ::arrus::proto::ProbeModel_Id&
ProbeToAdapterConnection::_Internal::probe_model_id(const ProbeToAdapterConnection* msg) {
  return *msg->probe_model_id_;
}
const ::arrus::proto::ProbeToAdapterConnection_BitstreamId&
ProbeToAdapterConnection::_Internal::bitstream_id(const ProbeToAdapterConnection* msg) {
  return *msg->bitstream_id_;
}
void ProbeToAdapterConnection::clear_probe_model_id() {
  if (GetArenaNoVirtual() == nullptr && probe_model_id_ != nullptr) {
    delete probe_model_id_;
  }
  probe_model_id_ = nullptr;
}
void ProbeToAdapterConnection::clear_probe_adapter_model_id() {
  probe_adapter_model_id_.Clear();
}
void ProbeToAdapterConnection::clear_channel_mapping_ranges() {
  channel_mapping_ranges_.Clear();
}
ProbeToAdapterConnection::ProbeToAdapterConnection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.ProbeToAdapterConnection)
}
ProbeToAdapterConnection::ProbeToAdapterConnection(const ProbeToAdapterConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      probe_adapter_model_id_(from.probe_adapter_model_id_),
      channel_mapping_(from.channel_mapping_),
      channel_mapping_ranges_(from.channel_mapping_ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_probe_model_id()) {
    probe_model_id_ = new ::arrus::proto::ProbeModel_Id(*from.probe_model_id_);
  } else {
    probe_model_id_ = nullptr;
  }
  if (from._internal_has_bitstream_id()) {
    bitstream_id_ = new ::arrus::proto::ProbeToAdapterConnection_BitstreamId(*from.bitstream_id_);
  } else {
    bitstream_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:arrus.proto.ProbeToAdapterConnection)
}

void ProbeToAdapterConnection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProbeToAdapterConnection_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto.base);
  ::memset(&probe_model_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitstream_id_) -
      reinterpret_cast<char*>(&probe_model_id_)) + sizeof(bitstream_id_));
}

ProbeToAdapterConnection::~ProbeToAdapterConnection() {
  // @@protoc_insertion_point(destructor:arrus.proto.ProbeToAdapterConnection)
  SharedDtor();
}

void ProbeToAdapterConnection::SharedDtor() {
  if (this != internal_default_instance()) delete probe_model_id_;
  if (this != internal_default_instance()) delete bitstream_id_;
}

void ProbeToAdapterConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProbeToAdapterConnection& ProbeToAdapterConnection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProbeToAdapterConnection_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto.base);
  return *internal_default_instance();
}


void ProbeToAdapterConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.ProbeToAdapterConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  probe_adapter_model_id_.Clear();
  channel_mapping_.Clear();
  channel_mapping_ranges_.Clear();
  if (GetArenaNoVirtual() == nullptr && probe_model_id_ != nullptr) {
    delete probe_model_id_;
  }
  probe_model_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bitstream_id_ != nullptr) {
    delete bitstream_id_;
  }
  bitstream_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ProbeToAdapterConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrus.proto.ProbeModel.Id probe_model_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_probe_model_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .arrus.proto.ProbeAdapterModel.Id probe_adapter_model_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_probe_adapter_model_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 channel_mapping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_channel_mapping(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_channel_mapping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .arrus.proto.IntervalInteger channel_mapping_ranges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_mapping_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .arrus.proto.ProbeToAdapterConnection.BitstreamId bitstream_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitstream_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProbeToAdapterConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.ProbeToAdapterConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrus.proto.ProbeModel.Id probe_model_id = 1;
  if (this->has_probe_model_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::probe_model_id(this), target, stream);
  }

  // repeated .arrus.proto.ProbeAdapterModel.Id probe_adapter_model_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_probe_adapter_model_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_probe_adapter_model_id(i), target, stream);
  }

  // repeated uint32 channel_mapping = 3;
  {
    int byte_size = _channel_mapping_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_channel_mapping(), byte_size, target);
    }
  }

  // repeated .arrus.proto.IntervalInteger channel_mapping_ranges = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_mapping_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_channel_mapping_ranges(i), target, stream);
  }

  // .arrus.proto.ProbeToAdapterConnection.BitstreamId bitstream_id = 5;
  if (this->has_bitstream_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bitstream_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.ProbeToAdapterConnection)
  return target;
}

size_t ProbeToAdapterConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.ProbeToAdapterConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .arrus.proto.ProbeAdapterModel.Id probe_adapter_model_id = 2;
  total_size += 1UL * this->_internal_probe_adapter_model_id_size();
  for (const auto& msg : this->probe_adapter_model_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 channel_mapping = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->channel_mapping_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channel_mapping_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .arrus.proto.IntervalInteger channel_mapping_ranges = 4;
  total_size += 1UL * this->_internal_channel_mapping_ranges_size();
  for (const auto& msg : this->channel_mapping_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .arrus.proto.ProbeModel.Id probe_model_id = 1;
  if (this->has_probe_model_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *probe_model_id_);
  }

  // .arrus.proto.ProbeToAdapterConnection.BitstreamId bitstream_id = 5;
  if (this->has_bitstream_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bitstream_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbeToAdapterConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.ProbeToAdapterConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbeToAdapterConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProbeToAdapterConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.ProbeToAdapterConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.ProbeToAdapterConnection)
    MergeFrom(*source);
  }
}

void ProbeToAdapterConnection::MergeFrom(const ProbeToAdapterConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.ProbeToAdapterConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  probe_adapter_model_id_.MergeFrom(from.probe_adapter_model_id_);
  channel_mapping_.MergeFrom(from.channel_mapping_);
  channel_mapping_ranges_.MergeFrom(from.channel_mapping_ranges_);
  if (from.has_probe_model_id()) {
    _internal_mutable_probe_model_id()->::arrus::proto::ProbeModel_Id::MergeFrom(from._internal_probe_model_id());
  }
  if (from.has_bitstream_id()) {
    _internal_mutable_bitstream_id()->::arrus::proto::ProbeToAdapterConnection_BitstreamId::MergeFrom(from._internal_bitstream_id());
  }
}

void ProbeToAdapterConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.ProbeToAdapterConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeToAdapterConnection::CopyFrom(const ProbeToAdapterConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.ProbeToAdapterConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeToAdapterConnection::IsInitialized() const {
  return true;
}

void ProbeToAdapterConnection::InternalSwap(ProbeToAdapterConnection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  probe_adapter_model_id_.InternalSwap(&other->probe_adapter_model_id_);
  channel_mapping_.InternalSwap(&other->channel_mapping_);
  channel_mapping_ranges_.InternalSwap(&other->channel_mapping_ranges_);
  swap(probe_model_id_, other->probe_model_id_);
  swap(bitstream_id_, other->bitstream_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProbeToAdapterConnection::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::arrus::proto::ProbeToAdapterConnection_BitstreamId* Arena::CreateMaybeMessage< ::arrus::proto::ProbeToAdapterConnection_BitstreamId >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::ProbeToAdapterConnection_BitstreamId >(arena);
}
template<> PROTOBUF_NOINLINE ::arrus::proto::ProbeToAdapterConnection* Arena::CreateMaybeMessage< ::arrus::proto::ProbeToAdapterConnection >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::ProbeToAdapterConnection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
