// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/devices/us4r/DigitalBackplaneSettings.proto

#include "io/proto/devices/us4r/DigitalBackplaneSettings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalBackplaneSettings_Id_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto;
namespace arrus {
namespace proto {
class DigitalBackplaneSettings_IdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalBackplaneSettings_Id> _instance;
} _DigitalBackplaneSettings_Id_default_instance_;
class DigitalBackplaneSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalBackplaneSettings> _instance;
} _DigitalBackplaneSettings_default_instance_;
}  // namespace proto
}  // namespace arrus
static void InitDefaultsscc_info_DigitalBackplaneSettings_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_DigitalBackplaneSettings_default_instance_;
    new (ptr) ::arrus::proto::DigitalBackplaneSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::DigitalBackplaneSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DigitalBackplaneSettings_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DigitalBackplaneSettings_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto}, {
      &scc_info_DigitalBackplaneSettings_Id_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto.base,}};

static void InitDefaultsscc_info_DigitalBackplaneSettings_Id_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_DigitalBackplaneSettings_Id_default_instance_;
    new (ptr) ::arrus::proto::DigitalBackplaneSettings_Id();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::DigitalBackplaneSettings_Id::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalBackplaneSettings_Id_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DigitalBackplaneSettings_Id_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::DigitalBackplaneSettings_Id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::DigitalBackplaneSettings_Id, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::DigitalBackplaneSettings_Id, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::DigitalBackplaneSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::DigitalBackplaneSettings, model_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::arrus::proto::DigitalBackplaneSettings_Id)},
  { 7, -1, sizeof(::arrus::proto::DigitalBackplaneSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_DigitalBackplaneSettings_Id_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_DigitalBackplaneSettings_default_instance_),
};

const char descriptor_table_protodef_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4io/proto/devices/us4r/DigitalBackplane"
  "Settings.proto\022\013arrus.proto\"\200\001\n\030DigitalB"
  "ackplaneSettings\022:\n\010model_id\030\001 \001(\0132(.arr"
  "us.proto.DigitalBackplaneSettings.Id\032(\n\002"
  "Id\022\024\n\014manufacturer\030\001 \001(\t\022\014\n\004name\030\002 \001(\tb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto_sccs[2] = {
  &scc_info_DigitalBackplaneSettings_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto.base,
  &scc_info_DigitalBackplaneSettings_Id_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto_once;
static bool descriptor_table_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto = {
  &descriptor_table_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto_initialized, descriptor_table_protodef_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto, "io/proto/devices/us4r/DigitalBackplaneSettings.proto", 206,
  &descriptor_table_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto_once, descriptor_table_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto_sccs, descriptor_table_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto::offsets,
  file_level_metadata_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto, 2, file_level_enum_descriptors_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto, file_level_service_descriptors_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto), true);
namespace arrus {
namespace proto {

// ===================================================================

void DigitalBackplaneSettings_Id::InitAsDefaultInstance() {
}
class DigitalBackplaneSettings_Id::_Internal {
 public:
};

DigitalBackplaneSettings_Id::DigitalBackplaneSettings_Id()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.DigitalBackplaneSettings.Id)
}
DigitalBackplaneSettings_Id::DigitalBackplaneSettings_Id(const DigitalBackplaneSettings_Id& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_manufacturer().empty()) {
    manufacturer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:arrus.proto.DigitalBackplaneSettings.Id)
}

void DigitalBackplaneSettings_Id::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitalBackplaneSettings_Id_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto.base);
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DigitalBackplaneSettings_Id::~DigitalBackplaneSettings_Id() {
  // @@protoc_insertion_point(destructor:arrus.proto.DigitalBackplaneSettings.Id)
  SharedDtor();
}

void DigitalBackplaneSettings_Id::SharedDtor() {
  manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DigitalBackplaneSettings_Id::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalBackplaneSettings_Id& DigitalBackplaneSettings_Id::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalBackplaneSettings_Id_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto.base);
  return *internal_default_instance();
}


void DigitalBackplaneSettings_Id::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.DigitalBackplaneSettings.Id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DigitalBackplaneSettings_Id::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string manufacturer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "arrus.proto.DigitalBackplaneSettings.Id.manufacturer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "arrus.proto.DigitalBackplaneSettings.Id.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalBackplaneSettings_Id::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.DigitalBackplaneSettings.Id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrus.proto.DigitalBackplaneSettings.Id.manufacturer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_manufacturer(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrus.proto.DigitalBackplaneSettings.Id.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.DigitalBackplaneSettings.Id)
  return target;
}

size_t DigitalBackplaneSettings_Id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.DigitalBackplaneSettings.Id)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalBackplaneSettings_Id::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.DigitalBackplaneSettings.Id)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalBackplaneSettings_Id* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalBackplaneSettings_Id>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.DigitalBackplaneSettings.Id)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.DigitalBackplaneSettings.Id)
    MergeFrom(*source);
  }
}

void DigitalBackplaneSettings_Id::MergeFrom(const DigitalBackplaneSettings_Id& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.DigitalBackplaneSettings.Id)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DigitalBackplaneSettings_Id::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.DigitalBackplaneSettings.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalBackplaneSettings_Id::CopyFrom(const DigitalBackplaneSettings_Id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.DigitalBackplaneSettings.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalBackplaneSettings_Id::IsInitialized() const {
  return true;
}

void DigitalBackplaneSettings_Id::InternalSwap(DigitalBackplaneSettings_Id* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  manufacturer_.Swap(&other->manufacturer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalBackplaneSettings_Id::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DigitalBackplaneSettings::InitAsDefaultInstance() {
  ::arrus::proto::_DigitalBackplaneSettings_default_instance_._instance.get_mutable()->model_id_ = const_cast< ::arrus::proto::DigitalBackplaneSettings_Id*>(
      ::arrus::proto::DigitalBackplaneSettings_Id::internal_default_instance());
}
class DigitalBackplaneSettings::_Internal {
 public:
  static const ::arrus::proto::DigitalBackplaneSettings_Id& model_id(const DigitalBackplaneSettings* msg);
};

const ::arrus::proto::DigitalBackplaneSettings_Id&
DigitalBackplaneSettings::_Internal::model_id(const DigitalBackplaneSettings* msg) {
  return *msg->model_id_;
}
DigitalBackplaneSettings::DigitalBackplaneSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.DigitalBackplaneSettings)
}
DigitalBackplaneSettings::DigitalBackplaneSettings(const DigitalBackplaneSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_model_id()) {
    model_id_ = new ::arrus::proto::DigitalBackplaneSettings_Id(*from.model_id_);
  } else {
    model_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:arrus.proto.DigitalBackplaneSettings)
}

void DigitalBackplaneSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitalBackplaneSettings_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto.base);
  model_id_ = nullptr;
}

DigitalBackplaneSettings::~DigitalBackplaneSettings() {
  // @@protoc_insertion_point(destructor:arrus.proto.DigitalBackplaneSettings)
  SharedDtor();
}

void DigitalBackplaneSettings::SharedDtor() {
  if (this != internal_default_instance()) delete model_id_;
}

void DigitalBackplaneSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalBackplaneSettings& DigitalBackplaneSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalBackplaneSettings_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto.base);
  return *internal_default_instance();
}


void DigitalBackplaneSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.DigitalBackplaneSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && model_id_ != nullptr) {
    delete model_id_;
  }
  model_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DigitalBackplaneSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrus.proto.DigitalBackplaneSettings.Id model_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalBackplaneSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.DigitalBackplaneSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrus.proto.DigitalBackplaneSettings.Id model_id = 1;
  if (this->has_model_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.DigitalBackplaneSettings)
  return target;
}

size_t DigitalBackplaneSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.DigitalBackplaneSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .arrus.proto.DigitalBackplaneSettings.Id model_id = 1;
  if (this->has_model_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalBackplaneSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.DigitalBackplaneSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalBackplaneSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalBackplaneSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.DigitalBackplaneSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.DigitalBackplaneSettings)
    MergeFrom(*source);
  }
}

void DigitalBackplaneSettings::MergeFrom(const DigitalBackplaneSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.DigitalBackplaneSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_model_id()) {
    _internal_mutable_model_id()->::arrus::proto::DigitalBackplaneSettings_Id::MergeFrom(from._internal_model_id());
  }
}

void DigitalBackplaneSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.DigitalBackplaneSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalBackplaneSettings::CopyFrom(const DigitalBackplaneSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.DigitalBackplaneSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalBackplaneSettings::IsInitialized() const {
  return true;
}

void DigitalBackplaneSettings::InternalSwap(DigitalBackplaneSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(model_id_, other->model_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalBackplaneSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::arrus::proto::DigitalBackplaneSettings_Id* Arena::CreateMaybeMessage< ::arrus::proto::DigitalBackplaneSettings_Id >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::DigitalBackplaneSettings_Id >(arena);
}
template<> PROTOBUF_NOINLINE ::arrus::proto::DigitalBackplaneSettings* Arena::CreateMaybeMessage< ::arrus::proto::DigitalBackplaneSettings >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::DigitalBackplaneSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
