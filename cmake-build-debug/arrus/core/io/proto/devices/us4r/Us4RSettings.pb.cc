// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/devices/us4r/Us4RSettings.proto

#include "io/proto/devices/us4r/Us4RSettings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fBitstream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bitstream_io_2fproto_2fdevices_2fus4r_2fBitstream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DigitalBackplaneSettings_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HVSettings_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProbeAdapterModel_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeAdapterModel_Id_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProbeModel_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProbeToAdapterConnection_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fRxSettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RxSettings_io_2fproto_2fdevices_2fus4r_2fRxSettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Us4OEMSettings_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Us4RSettings_ChannelsMask_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto;
namespace arrus {
namespace proto {
class Us4RSettings_ChannelsMaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Us4RSettings_ChannelsMask> _instance;
} _Us4RSettings_ChannelsMask_default_instance_;
class Us4RSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Us4RSettings> _instance;
  const ::arrus::proto::ProbeAdapterModel_Id* adapter_id_;
  const ::arrus::proto::ProbeAdapterModel* adapter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nus4oems_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_frequency_range_;
} _Us4RSettings_default_instance_;
}  // namespace proto
}  // namespace arrus
static void InitDefaultsscc_info_Us4RSettings_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_Us4RSettings_default_instance_;
    new (ptr) ::arrus::proto::Us4RSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::Us4RSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Us4RSettings_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_Us4RSettings_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto}, {
      &scc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.base,
      &scc_info_ProbeModel_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.base,
      &scc_info_ProbeAdapterModel_Id_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base,
      &scc_info_ProbeAdapterModel_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base,
      &scc_info_Us4RSettings_ChannelsMask_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto.base,
      &scc_info_ProbeToAdapterConnection_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto.base,
      &scc_info_RxSettings_io_2fproto_2fdevices_2fus4r_2fRxSettings_2eproto.base,
      &scc_info_Us4OEMSettings_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto.base,
      &scc_info_HVSettings_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto.base,
      &scc_info_DigitalBackplaneSettings_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto.base,
      &scc_info_Bitstream_io_2fproto_2fdevices_2fus4r_2fBitstream_2eproto.base,}};

static void InitDefaultsscc_info_Us4RSettings_ChannelsMask_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_Us4RSettings_ChannelsMask_default_instance_;
    new (ptr) ::arrus::proto::Us4RSettings_ChannelsMask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::Us4RSettings_ChannelsMask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Us4RSettings_ChannelsMask_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Us4RSettings_ChannelsMask_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings_ChannelsMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings_ChannelsMask, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, probe_id_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, probe_),
  offsetof(::arrus::proto::Us4RSettingsDefaultTypeInternal, adapter_id_),
  offsetof(::arrus::proto::Us4RSettingsDefaultTypeInternal, adapter_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, channels_mask_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, probe_to_adapter_connection_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, rx_settings_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, us4oems_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, hv_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, us4oem_channels_mask_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, reprogramming_mode_),
  offsetof(::arrus::proto::Us4RSettingsDefaultTypeInternal, nus4oems_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, adapter_to_us4r_module_nr_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, external_trigger_),
  offsetof(::arrus::proto::Us4RSettingsDefaultTypeInternal, tx_frequency_range_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, digital_backplane_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, bitstreams_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, one_of_adapter_representation_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, optional_nus4ems_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4RSettings, optional_tx_frequency_range_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::arrus::proto::Us4RSettings_ChannelsMask)},
  { 6, -1, sizeof(::arrus::proto::Us4RSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_Us4RSettings_ChannelsMask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_Us4RSettings_default_instance_),
};

const char descriptor_table_protodef_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(io/proto/devices/us4r/Us4RSettings.pro"
  "to\022\013arrus.proto\032\'io/proto/devices/probe/"
  "ProbeModel.proto\032-io/proto/devices/us4r/"
  "ProbeAdapterModel.proto\0324io/proto/device"
  "s/us4r/ProbeToAdapterConnection.proto\032&i"
  "o/proto/devices/us4r/RxSettings.proto\032*i"
  "o/proto/devices/us4r/Us4OEMSettings.prot"
  "o\032&io/proto/devices/us4r/HVSettings.prot"
  "o\0324io/proto/devices/us4r/DigitalBackplan"
  "eSettings.proto\032%io/proto/devices/us4r/B"
  "itstream.proto\"\300\007\n\014Us4RSettings\022,\n\010probe"
  "_id\030\001 \003(\0132\032.arrus.proto.ProbeModel.Id\022&\n"
  "\005probe\030\002 \003(\0132\027.arrus.proto.ProbeModel\0227\n"
  "\nadapter_id\030\003 \001(\0132!.arrus.proto.ProbeAda"
  "pterModel.IdH\000\0221\n\007adapter\030\004 \001(\0132\036.arrus."
  "proto.ProbeAdapterModelH\000\022=\n\rchannels_ma"
  "sk\030\005 \003(\0132&.arrus.proto.Us4RSettings.Chan"
  "nelsMask\022J\n\033probe_to_adapter_connection\030"
  "\006 \003(\0132%.arrus.proto.ProbeToAdapterConnec"
  "tion\022,\n\013rx_settings\030\007 \001(\0132\027.arrus.proto."
  "RxSettings\022,\n\007us4oems\030\010 \003(\0132\033.arrus.prot"
  "o.Us4OEMSettings\022#\n\002hv\030\t \001(\0132\027.arrus.pro"
  "to.HVSettings\022D\n\024us4oem_channels_mask\030\n "
  "\003(\0132&.arrus.proto.Us4RSettings.ChannelsM"
  "ask\022I\n\022reprogramming_mode\030\013 \001(\0162-.arrus."
  "proto.Us4OEMSettings.ReprogrammingMode\022\022"
  "\n\010nus4oems\030\014 \001(\rH\001\022!\n\031adapter_to_us4r_mo"
  "dule_nr\030\r \003(\r\022\030\n\020external_trigger\030\016 \001(\010\022"
  "\034\n\022tx_frequency_range\030\017 \001(\rH\002\022@\n\021digital"
  "_backplane\030\020 \001(\0132%.arrus.proto.DigitalBa"
  "ckplaneSettings\022*\n\nbitstreams\030\021 \003(\0132\026.ar"
  "rus.proto.Bitstream\032 \n\014ChannelsMask\022\020\n\010c"
  "hannels\030\001 \003(\rB\037\n\035one_of_adapter_represen"
  "tationB\022\n\020optional_nus4emsB\035\n\033optional_t"
  "x_frequency_rangeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto_deps[8] = {
  &::descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto,
  &::descriptor_table_io_2fproto_2fdevices_2fus4r_2fBitstream_2eproto,
  &::descriptor_table_io_2fproto_2fdevices_2fus4r_2fDigitalBackplaneSettings_2eproto,
  &::descriptor_table_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto,
  &::descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto,
  &::descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeToAdapterConnection_2eproto,
  &::descriptor_table_io_2fproto_2fdevices_2fus4r_2fRxSettings_2eproto,
  &::descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto_sccs[2] = {
  &scc_info_Us4RSettings_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto.base,
  &scc_info_Us4RSettings_ChannelsMask_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto_once;
static bool descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto = {
  &descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto_initialized, descriptor_table_protodef_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto, "io/proto/devices/us4r/Us4RSettings.proto", 1385,
  &descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto_once, descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto_sccs, descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto_deps, 2, 8,
  schemas, file_default_instances, TableStruct_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto::offsets,
  file_level_metadata_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto, 2, file_level_enum_descriptors_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto, file_level_service_descriptors_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto), true);
namespace arrus {
namespace proto {

// ===================================================================

void Us4RSettings_ChannelsMask::InitAsDefaultInstance() {
}
class Us4RSettings_ChannelsMask::_Internal {
 public:
};

Us4RSettings_ChannelsMask::Us4RSettings_ChannelsMask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.Us4RSettings.ChannelsMask)
}
Us4RSettings_ChannelsMask::Us4RSettings_ChannelsMask(const Us4RSettings_ChannelsMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:arrus.proto.Us4RSettings.ChannelsMask)
}

void Us4RSettings_ChannelsMask::SharedCtor() {
}

Us4RSettings_ChannelsMask::~Us4RSettings_ChannelsMask() {
  // @@protoc_insertion_point(destructor:arrus.proto.Us4RSettings.ChannelsMask)
  SharedDtor();
}

void Us4RSettings_ChannelsMask::SharedDtor() {
}

void Us4RSettings_ChannelsMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Us4RSettings_ChannelsMask& Us4RSettings_ChannelsMask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Us4RSettings_ChannelsMask_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto.base);
  return *internal_default_instance();
}


void Us4RSettings_ChannelsMask::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.Us4RSettings.ChannelsMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear();
}

const char* Us4RSettings_ChannelsMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Us4RSettings_ChannelsMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.Us4RSettings.ChannelsMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 channels = 1;
  {
    int byte_size = _channels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_channels(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.Us4RSettings.ChannelsMask)
  return target;
}

size_t Us4RSettings_ChannelsMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.Us4RSettings.ChannelsMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 channels = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->channels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Us4RSettings_ChannelsMask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.Us4RSettings.ChannelsMask)
  GOOGLE_DCHECK_NE(&from, this);
  const Us4RSettings_ChannelsMask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Us4RSettings_ChannelsMask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.Us4RSettings.ChannelsMask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.Us4RSettings.ChannelsMask)
    MergeFrom(*source);
  }
}

void Us4RSettings_ChannelsMask::MergeFrom(const Us4RSettings_ChannelsMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.Us4RSettings.ChannelsMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void Us4RSettings_ChannelsMask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.Us4RSettings.ChannelsMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Us4RSettings_ChannelsMask::CopyFrom(const Us4RSettings_ChannelsMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.Us4RSettings.ChannelsMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Us4RSettings_ChannelsMask::IsInitialized() const {
  return true;
}

void Us4RSettings_ChannelsMask::InternalSwap(Us4RSettings_ChannelsMask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Us4RSettings_ChannelsMask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Us4RSettings::InitAsDefaultInstance() {
  ::arrus::proto::_Us4RSettings_default_instance_.adapter_id_ = const_cast< ::arrus::proto::ProbeAdapterModel_Id*>(
      ::arrus::proto::ProbeAdapterModel_Id::internal_default_instance());
  ::arrus::proto::_Us4RSettings_default_instance_.adapter_ = const_cast< ::arrus::proto::ProbeAdapterModel*>(
      ::arrus::proto::ProbeAdapterModel::internal_default_instance());
  ::arrus::proto::_Us4RSettings_default_instance_._instance.get_mutable()->rx_settings_ = const_cast< ::arrus::proto::RxSettings*>(
      ::arrus::proto::RxSettings::internal_default_instance());
  ::arrus::proto::_Us4RSettings_default_instance_._instance.get_mutable()->hv_ = const_cast< ::arrus::proto::HVSettings*>(
      ::arrus::proto::HVSettings::internal_default_instance());
  ::arrus::proto::_Us4RSettings_default_instance_.nus4oems_ = 0u;
  ::arrus::proto::_Us4RSettings_default_instance_.tx_frequency_range_ = 0u;
  ::arrus::proto::_Us4RSettings_default_instance_._instance.get_mutable()->digital_backplane_ = const_cast< ::arrus::proto::DigitalBackplaneSettings*>(
      ::arrus::proto::DigitalBackplaneSettings::internal_default_instance());
}
class Us4RSettings::_Internal {
 public:
  static const ::arrus::proto::ProbeAdapterModel_Id& adapter_id(const Us4RSettings* msg);
  static const ::arrus::proto::ProbeAdapterModel& adapter(const Us4RSettings* msg);
  static const ::arrus::proto::RxSettings& rx_settings(const Us4RSettings* msg);
  static const ::arrus::proto::HVSettings& hv(const Us4RSettings* msg);
  static const ::arrus::proto::DigitalBackplaneSettings& digital_backplane(const Us4RSettings* msg);
};

const ::arrus::proto::ProbeAdapterModel_Id&
Us4RSettings::_Internal::adapter_id(const Us4RSettings* msg) {
  return *msg->one_of_adapter_representation_.adapter_id_;
}
const ::arrus::proto::ProbeAdapterModel&
Us4RSettings::_Internal::adapter(const Us4RSettings* msg) {
  return *msg->one_of_adapter_representation_.adapter_;
}
const ::arrus::proto::RxSettings&
Us4RSettings::_Internal::rx_settings(const Us4RSettings* msg) {
  return *msg->rx_settings_;
}
const ::arrus::proto::HVSettings&
Us4RSettings::_Internal::hv(const Us4RSettings* msg) {
  return *msg->hv_;
}
const ::arrus::proto::DigitalBackplaneSettings&
Us4RSettings::_Internal::digital_backplane(const Us4RSettings* msg) {
  return *msg->digital_backplane_;
}
void Us4RSettings::clear_probe_id() {
  probe_id_.Clear();
}
void Us4RSettings::clear_probe() {
  probe_.Clear();
}
void Us4RSettings::set_allocated_adapter_id(::arrus::proto::ProbeAdapterModel_Id* adapter_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_one_of_adapter_representation();
  if (adapter_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adapter_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adapter_id, submessage_arena);
    }
    set_has_adapter_id();
    one_of_adapter_representation_.adapter_id_ = adapter_id;
  }
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.Us4RSettings.adapter_id)
}
void Us4RSettings::clear_adapter_id() {
  if (_internal_has_adapter_id()) {
    delete one_of_adapter_representation_.adapter_id_;
    clear_has_one_of_adapter_representation();
  }
}
void Us4RSettings::set_allocated_adapter(::arrus::proto::ProbeAdapterModel* adapter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_one_of_adapter_representation();
  if (adapter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adapter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adapter, submessage_arena);
    }
    set_has_adapter();
    one_of_adapter_representation_.adapter_ = adapter;
  }
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.Us4RSettings.adapter)
}
void Us4RSettings::clear_adapter() {
  if (_internal_has_adapter()) {
    delete one_of_adapter_representation_.adapter_;
    clear_has_one_of_adapter_representation();
  }
}
void Us4RSettings::clear_probe_to_adapter_connection() {
  probe_to_adapter_connection_.Clear();
}
void Us4RSettings::clear_rx_settings() {
  if (GetArenaNoVirtual() == nullptr && rx_settings_ != nullptr) {
    delete rx_settings_;
  }
  rx_settings_ = nullptr;
}
void Us4RSettings::clear_us4oems() {
  us4oems_.Clear();
}
void Us4RSettings::clear_hv() {
  if (GetArenaNoVirtual() == nullptr && hv_ != nullptr) {
    delete hv_;
  }
  hv_ = nullptr;
}
void Us4RSettings::clear_digital_backplane() {
  if (GetArenaNoVirtual() == nullptr && digital_backplane_ != nullptr) {
    delete digital_backplane_;
  }
  digital_backplane_ = nullptr;
}
void Us4RSettings::clear_bitstreams() {
  bitstreams_.Clear();
}
Us4RSettings::Us4RSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.Us4RSettings)
}
Us4RSettings::Us4RSettings(const Us4RSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      probe_id_(from.probe_id_),
      probe_(from.probe_),
      channels_mask_(from.channels_mask_),
      probe_to_adapter_connection_(from.probe_to_adapter_connection_),
      us4oems_(from.us4oems_),
      us4oem_channels_mask_(from.us4oem_channels_mask_),
      adapter_to_us4r_module_nr_(from.adapter_to_us4r_module_nr_),
      bitstreams_(from.bitstreams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rx_settings()) {
    rx_settings_ = new ::arrus::proto::RxSettings(*from.rx_settings_);
  } else {
    rx_settings_ = nullptr;
  }
  if (from._internal_has_hv()) {
    hv_ = new ::arrus::proto::HVSettings(*from.hv_);
  } else {
    hv_ = nullptr;
  }
  if (from._internal_has_digital_backplane()) {
    digital_backplane_ = new ::arrus::proto::DigitalBackplaneSettings(*from.digital_backplane_);
  } else {
    digital_backplane_ = nullptr;
  }
  ::memcpy(&reprogramming_mode_, &from.reprogramming_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&external_trigger_) -
    reinterpret_cast<char*>(&reprogramming_mode_)) + sizeof(external_trigger_));
  clear_has_one_of_adapter_representation();
  switch (from.one_of_adapter_representation_case()) {
    case kAdapterId: {
      _internal_mutable_adapter_id()->::arrus::proto::ProbeAdapterModel_Id::MergeFrom(from._internal_adapter_id());
      break;
    }
    case kAdapter: {
      _internal_mutable_adapter()->::arrus::proto::ProbeAdapterModel::MergeFrom(from._internal_adapter());
      break;
    }
    case ONE_OF_ADAPTER_REPRESENTATION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_nus4ems();
  switch (from.optional_nus4ems_case()) {
    case kNus4Oems: {
      _internal_set_nus4oems(from._internal_nus4oems());
      break;
    }
    case OPTIONAL_NUS4EMS_NOT_SET: {
      break;
    }
  }
  clear_has_optional_tx_frequency_range();
  switch (from.optional_tx_frequency_range_case()) {
    case kTxFrequencyRange: {
      _internal_set_tx_frequency_range(from._internal_tx_frequency_range());
      break;
    }
    case OPTIONAL_TX_FREQUENCY_RANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:arrus.proto.Us4RSettings)
}

void Us4RSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Us4RSettings_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto.base);
  ::memset(&rx_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_trigger_) -
      reinterpret_cast<char*>(&rx_settings_)) + sizeof(external_trigger_));
  clear_has_one_of_adapter_representation();
  clear_has_optional_nus4ems();
  clear_has_optional_tx_frequency_range();
}

Us4RSettings::~Us4RSettings() {
  // @@protoc_insertion_point(destructor:arrus.proto.Us4RSettings)
  SharedDtor();
}

void Us4RSettings::SharedDtor() {
  if (this != internal_default_instance()) delete rx_settings_;
  if (this != internal_default_instance()) delete hv_;
  if (this != internal_default_instance()) delete digital_backplane_;
  if (has_one_of_adapter_representation()) {
    clear_one_of_adapter_representation();
  }
  if (has_optional_nus4ems()) {
    clear_optional_nus4ems();
  }
  if (has_optional_tx_frequency_range()) {
    clear_optional_tx_frequency_range();
  }
}

void Us4RSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Us4RSettings& Us4RSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Us4RSettings_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto.base);
  return *internal_default_instance();
}


void Us4RSettings::clear_one_of_adapter_representation() {
// @@protoc_insertion_point(one_of_clear_start:arrus.proto.Us4RSettings)
  switch (one_of_adapter_representation_case()) {
    case kAdapterId: {
      delete one_of_adapter_representation_.adapter_id_;
      break;
    }
    case kAdapter: {
      delete one_of_adapter_representation_.adapter_;
      break;
    }
    case ONE_OF_ADAPTER_REPRESENTATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONE_OF_ADAPTER_REPRESENTATION_NOT_SET;
}

void Us4RSettings::clear_optional_nus4ems() {
// @@protoc_insertion_point(one_of_clear_start:arrus.proto.Us4RSettings)
  switch (optional_nus4ems_case()) {
    case kNus4Oems: {
      // No need to clear
      break;
    }
    case OPTIONAL_NUS4EMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_NUS4EMS_NOT_SET;
}

void Us4RSettings::clear_optional_tx_frequency_range() {
// @@protoc_insertion_point(one_of_clear_start:arrus.proto.Us4RSettings)
  switch (optional_tx_frequency_range_case()) {
    case kTxFrequencyRange: {
      // No need to clear
      break;
    }
    case OPTIONAL_TX_FREQUENCY_RANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = OPTIONAL_TX_FREQUENCY_RANGE_NOT_SET;
}


void Us4RSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.Us4RSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  probe_id_.Clear();
  probe_.Clear();
  channels_mask_.Clear();
  probe_to_adapter_connection_.Clear();
  us4oems_.Clear();
  us4oem_channels_mask_.Clear();
  adapter_to_us4r_module_nr_.Clear();
  bitstreams_.Clear();
  if (GetArenaNoVirtual() == nullptr && rx_settings_ != nullptr) {
    delete rx_settings_;
  }
  rx_settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hv_ != nullptr) {
    delete hv_;
  }
  hv_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && digital_backplane_ != nullptr) {
    delete digital_backplane_;
  }
  digital_backplane_ = nullptr;
  ::memset(&reprogramming_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_trigger_) -
      reinterpret_cast<char*>(&reprogramming_mode_)) + sizeof(external_trigger_));
  clear_one_of_adapter_representation();
  clear_optional_nus4ems();
  clear_optional_tx_frequency_range();
  _internal_metadata_.Clear();
}

const char* Us4RSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .arrus.proto.ProbeModel.Id probe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_probe_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .arrus.proto.ProbeModel probe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_probe(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .arrus.proto.ProbeAdapterModel.Id adapter_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_adapter_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrus.proto.ProbeAdapterModel adapter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_adapter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .arrus.proto.Us4RSettings.ChannelsMask channels_mask = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels_mask(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .arrus.proto.ProbeToAdapterConnection probe_to_adapter_connection = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_probe_to_adapter_connection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .arrus.proto.RxSettings rx_settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rx_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .arrus.proto.Us4OEMSettings us4oems = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_us4oems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .arrus.proto.HVSettings hv = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_hv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .arrus.proto.Us4RSettings.ChannelsMask us4oem_channels_mask = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_us4oem_channels_mask(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .arrus.proto.Us4OEMSettings.ReprogrammingMode reprogramming_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_reprogramming_mode(static_cast<::arrus::proto::Us4OEMSettings_ReprogrammingMode>(val));
        } else goto handle_unusual;
        continue;
      // uint32 nus4oems = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _internal_set_nus4oems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 adapter_to_us4r_module_nr = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_adapter_to_us4r_module_nr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_adapter_to_us4r_module_nr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool external_trigger = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          external_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tx_frequency_range = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _internal_set_tx_frequency_range(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrus.proto.DigitalBackplaneSettings digital_backplane = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_digital_backplane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .arrus.proto.Bitstream bitstreams = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bitstreams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Us4RSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.Us4RSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .arrus.proto.ProbeModel.Id probe_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_probe_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_probe_id(i), target, stream);
  }

  // repeated .arrus.proto.ProbeModel probe = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_probe_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_probe(i), target, stream);
  }

  // .arrus.proto.ProbeAdapterModel.Id adapter_id = 3;
  if (_internal_has_adapter_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::adapter_id(this), target, stream);
  }

  // .arrus.proto.ProbeAdapterModel adapter = 4;
  if (_internal_has_adapter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::adapter(this), target, stream);
  }

  // repeated .arrus.proto.Us4RSettings.ChannelsMask channels_mask = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_mask_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_channels_mask(i), target, stream);
  }

  // repeated .arrus.proto.ProbeToAdapterConnection probe_to_adapter_connection = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_probe_to_adapter_connection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_probe_to_adapter_connection(i), target, stream);
  }

  // .arrus.proto.RxSettings rx_settings = 7;
  if (this->has_rx_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::rx_settings(this), target, stream);
  }

  // repeated .arrus.proto.Us4OEMSettings us4oems = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_us4oems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_us4oems(i), target, stream);
  }

  // .arrus.proto.HVSettings hv = 9;
  if (this->has_hv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::hv(this), target, stream);
  }

  // repeated .arrus.proto.Us4RSettings.ChannelsMask us4oem_channels_mask = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_us4oem_channels_mask_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_us4oem_channels_mask(i), target, stream);
  }

  // .arrus.proto.Us4OEMSettings.ReprogrammingMode reprogramming_mode = 11;
  if (this->reprogramming_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_reprogramming_mode(), target);
  }

  // uint32 nus4oems = 12;
  if (_internal_has_nus4oems()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_nus4oems(), target);
  }

  // repeated uint32 adapter_to_us4r_module_nr = 13;
  {
    int byte_size = _adapter_to_us4r_module_nr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          13, _internal_adapter_to_us4r_module_nr(), byte_size, target);
    }
  }

  // bool external_trigger = 14;
  if (this->external_trigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_external_trigger(), target);
  }

  // uint32 tx_frequency_range = 15;
  if (_internal_has_tx_frequency_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_tx_frequency_range(), target);
  }

  // .arrus.proto.DigitalBackplaneSettings digital_backplane = 16;
  if (this->has_digital_backplane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::digital_backplane(this), target, stream);
  }

  // repeated .arrus.proto.Bitstream bitstreams = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bitstreams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_bitstreams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.Us4RSettings)
  return target;
}

size_t Us4RSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.Us4RSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .arrus.proto.ProbeModel.Id probe_id = 1;
  total_size += 1UL * this->_internal_probe_id_size();
  for (const auto& msg : this->probe_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .arrus.proto.ProbeModel probe = 2;
  total_size += 1UL * this->_internal_probe_size();
  for (const auto& msg : this->probe_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .arrus.proto.Us4RSettings.ChannelsMask channels_mask = 5;
  total_size += 1UL * this->_internal_channels_mask_size();
  for (const auto& msg : this->channels_mask_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .arrus.proto.ProbeToAdapterConnection probe_to_adapter_connection = 6;
  total_size += 1UL * this->_internal_probe_to_adapter_connection_size();
  for (const auto& msg : this->probe_to_adapter_connection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .arrus.proto.Us4OEMSettings us4oems = 8;
  total_size += 1UL * this->_internal_us4oems_size();
  for (const auto& msg : this->us4oems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .arrus.proto.Us4RSettings.ChannelsMask us4oem_channels_mask = 10;
  total_size += 1UL * this->_internal_us4oem_channels_mask_size();
  for (const auto& msg : this->us4oem_channels_mask_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 adapter_to_us4r_module_nr = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->adapter_to_us4r_module_nr_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _adapter_to_us4r_module_nr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .arrus.proto.Bitstream bitstreams = 17;
  total_size += 2UL * this->_internal_bitstreams_size();
  for (const auto& msg : this->bitstreams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .arrus.proto.RxSettings rx_settings = 7;
  if (this->has_rx_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rx_settings_);
  }

  // .arrus.proto.HVSettings hv = 9;
  if (this->has_hv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hv_);
  }

  // .arrus.proto.DigitalBackplaneSettings digital_backplane = 16;
  if (this->has_digital_backplane()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *digital_backplane_);
  }

  // .arrus.proto.Us4OEMSettings.ReprogrammingMode reprogramming_mode = 11;
  if (this->reprogramming_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reprogramming_mode());
  }

  // bool external_trigger = 14;
  if (this->external_trigger() != 0) {
    total_size += 1 + 1;
  }

  switch (one_of_adapter_representation_case()) {
    // .arrus.proto.ProbeAdapterModel.Id adapter_id = 3;
    case kAdapterId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *one_of_adapter_representation_.adapter_id_);
      break;
    }
    // .arrus.proto.ProbeAdapterModel adapter = 4;
    case kAdapter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *one_of_adapter_representation_.adapter_);
      break;
    }
    case ONE_OF_ADAPTER_REPRESENTATION_NOT_SET: {
      break;
    }
  }
  switch (optional_nus4ems_case()) {
    // uint32 nus4oems = 12;
    case kNus4Oems: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nus4oems());
      break;
    }
    case OPTIONAL_NUS4EMS_NOT_SET: {
      break;
    }
  }
  switch (optional_tx_frequency_range_case()) {
    // uint32 tx_frequency_range = 15;
    case kTxFrequencyRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tx_frequency_range());
      break;
    }
    case OPTIONAL_TX_FREQUENCY_RANGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Us4RSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.Us4RSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const Us4RSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Us4RSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.Us4RSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.Us4RSettings)
    MergeFrom(*source);
  }
}

void Us4RSettings::MergeFrom(const Us4RSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.Us4RSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  probe_id_.MergeFrom(from.probe_id_);
  probe_.MergeFrom(from.probe_);
  channels_mask_.MergeFrom(from.channels_mask_);
  probe_to_adapter_connection_.MergeFrom(from.probe_to_adapter_connection_);
  us4oems_.MergeFrom(from.us4oems_);
  us4oem_channels_mask_.MergeFrom(from.us4oem_channels_mask_);
  adapter_to_us4r_module_nr_.MergeFrom(from.adapter_to_us4r_module_nr_);
  bitstreams_.MergeFrom(from.bitstreams_);
  if (from.has_rx_settings()) {
    _internal_mutable_rx_settings()->::arrus::proto::RxSettings::MergeFrom(from._internal_rx_settings());
  }
  if (from.has_hv()) {
    _internal_mutable_hv()->::arrus::proto::HVSettings::MergeFrom(from._internal_hv());
  }
  if (from.has_digital_backplane()) {
    _internal_mutable_digital_backplane()->::arrus::proto::DigitalBackplaneSettings::MergeFrom(from._internal_digital_backplane());
  }
  if (from.reprogramming_mode() != 0) {
    _internal_set_reprogramming_mode(from._internal_reprogramming_mode());
  }
  if (from.external_trigger() != 0) {
    _internal_set_external_trigger(from._internal_external_trigger());
  }
  switch (from.one_of_adapter_representation_case()) {
    case kAdapterId: {
      _internal_mutable_adapter_id()->::arrus::proto::ProbeAdapterModel_Id::MergeFrom(from._internal_adapter_id());
      break;
    }
    case kAdapter: {
      _internal_mutable_adapter()->::arrus::proto::ProbeAdapterModel::MergeFrom(from._internal_adapter());
      break;
    }
    case ONE_OF_ADAPTER_REPRESENTATION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_nus4ems_case()) {
    case kNus4Oems: {
      _internal_set_nus4oems(from._internal_nus4oems());
      break;
    }
    case OPTIONAL_NUS4EMS_NOT_SET: {
      break;
    }
  }
  switch (from.optional_tx_frequency_range_case()) {
    case kTxFrequencyRange: {
      _internal_set_tx_frequency_range(from._internal_tx_frequency_range());
      break;
    }
    case OPTIONAL_TX_FREQUENCY_RANGE_NOT_SET: {
      break;
    }
  }
}

void Us4RSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.Us4RSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Us4RSettings::CopyFrom(const Us4RSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.Us4RSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Us4RSettings::IsInitialized() const {
  return true;
}

void Us4RSettings::InternalSwap(Us4RSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  probe_id_.InternalSwap(&other->probe_id_);
  probe_.InternalSwap(&other->probe_);
  channels_mask_.InternalSwap(&other->channels_mask_);
  probe_to_adapter_connection_.InternalSwap(&other->probe_to_adapter_connection_);
  us4oems_.InternalSwap(&other->us4oems_);
  us4oem_channels_mask_.InternalSwap(&other->us4oem_channels_mask_);
  adapter_to_us4r_module_nr_.InternalSwap(&other->adapter_to_us4r_module_nr_);
  bitstreams_.InternalSwap(&other->bitstreams_);
  swap(rx_settings_, other->rx_settings_);
  swap(hv_, other->hv_);
  swap(digital_backplane_, other->digital_backplane_);
  swap(reprogramming_mode_, other->reprogramming_mode_);
  swap(external_trigger_, other->external_trigger_);
  swap(one_of_adapter_representation_, other->one_of_adapter_representation_);
  swap(optional_nus4ems_, other->optional_nus4ems_);
  swap(optional_tx_frequency_range_, other->optional_tx_frequency_range_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Us4RSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::arrus::proto::Us4RSettings_ChannelsMask* Arena::CreateMaybeMessage< ::arrus::proto::Us4RSettings_ChannelsMask >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::Us4RSettings_ChannelsMask >(arena);
}
template<> PROTOBUF_NOINLINE ::arrus::proto::Us4RSettings* Arena::CreateMaybeMessage< ::arrus::proto::Us4RSettings >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::Us4RSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
