// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/devices/us4r/ProbeAdapterModel.proto

#include "io/proto/devices/us4r/ProbeAdapterModel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fIOSettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IOSettings_io_2fproto_2fdevices_2fus4r_2fIOSettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fcommon_2fIntervalInteger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntervalInteger_io_2fproto_2fcommon_2fIntervalInteger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeAdapterModel_ChannelMapping_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProbeAdapterModel_ChannelMappingRegion_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeAdapterModel_Id_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto;
namespace arrus {
namespace proto {
class ProbeAdapterModel_IdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProbeAdapterModel_Id> _instance;
} _ProbeAdapterModel_Id_default_instance_;
class ProbeAdapterModel_ChannelMappingRegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProbeAdapterModel_ChannelMappingRegion> _instance;
} _ProbeAdapterModel_ChannelMappingRegion_default_instance_;
class ProbeAdapterModel_ChannelMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProbeAdapterModel_ChannelMapping> _instance;
} _ProbeAdapterModel_ChannelMapping_default_instance_;
class ProbeAdapterModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProbeAdapterModel> _instance;
} _ProbeAdapterModel_default_instance_;
}  // namespace proto
}  // namespace arrus
static void InitDefaultsscc_info_ProbeAdapterModel_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_ProbeAdapterModel_default_instance_;
    new (ptr) ::arrus::proto::ProbeAdapterModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::ProbeAdapterModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProbeAdapterModel_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ProbeAdapterModel_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto}, {
      &scc_info_ProbeAdapterModel_Id_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base,
      &scc_info_ProbeAdapterModel_ChannelMapping_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base,
      &scc_info_ProbeAdapterModel_ChannelMappingRegion_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base,
      &scc_info_IOSettings_io_2fproto_2fdevices_2fus4r_2fIOSettings_2eproto.base,}};

static void InitDefaultsscc_info_ProbeAdapterModel_ChannelMapping_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_ProbeAdapterModel_ChannelMapping_default_instance_;
    new (ptr) ::arrus::proto::ProbeAdapterModel_ChannelMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::ProbeAdapterModel_ChannelMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeAdapterModel_ChannelMapping_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProbeAdapterModel_ChannelMapping_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto}, {}};

static void InitDefaultsscc_info_ProbeAdapterModel_ChannelMappingRegion_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_ProbeAdapterModel_ChannelMappingRegion_default_instance_;
    new (ptr) ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProbeAdapterModel_ChannelMappingRegion_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProbeAdapterModel_ChannelMappingRegion_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto}, {
      &scc_info_IntervalInteger_io_2fproto_2fcommon_2fIntervalInteger_2eproto.base,}};

static void InitDefaultsscc_info_ProbeAdapterModel_Id_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_ProbeAdapterModel_Id_default_instance_;
    new (ptr) ::arrus::proto::ProbeAdapterModel_Id();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::ProbeAdapterModel_Id::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeAdapterModel_Id_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProbeAdapterModel_Id_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel_Id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel_Id, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel_Id, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel_ChannelMappingRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel_ChannelMappingRegion, us4oem_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel_ChannelMappingRegion, channels_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel_ChannelMappingRegion, region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel_ChannelMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel_ChannelMapping, us4oems_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel_ChannelMapping, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel, id_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel, n_channels_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel, channel_mapping_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel, channel_mapping_regions_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeAdapterModel, io_settings_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::arrus::proto::ProbeAdapterModel_Id)},
  { 7, -1, sizeof(::arrus::proto::ProbeAdapterModel_ChannelMappingRegion)},
  { 15, -1, sizeof(::arrus::proto::ProbeAdapterModel_ChannelMapping)},
  { 22, -1, sizeof(::arrus::proto::ProbeAdapterModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_ProbeAdapterModel_Id_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_ProbeAdapterModel_ChannelMappingRegion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_ProbeAdapterModel_ChannelMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_ProbeAdapterModel_default_instance_),
};

const char descriptor_table_protodef_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-io/proto/devices/us4r/ProbeAdapterMode"
  "l.proto\022\013arrus.proto\032%io/proto/common/In"
  "tervalInteger.proto\032&io/proto/devices/us"
  "4r/IOSettings.proto\"\351\003\n\021ProbeAdapterMode"
  "l\022-\n\002id\030\001 \001(\0132!.arrus.proto.ProbeAdapter"
  "Model.Id\022\022\n\nn_channels\030\002 \001(\r\022F\n\017channel_"
  "mapping\030\003 \001(\0132-.arrus.proto.ProbeAdapter"
  "Model.ChannelMapping\022T\n\027channel_mapping_"
  "regions\030\004 \003(\01323.arrus.proto.ProbeAdapter"
  "Model.ChannelMappingRegion\022,\n\013io_setting"
  "s\030\005 \001(\0132\027.arrus.proto.IOSettings\032(\n\002Id\022\024"
  "\n\014manufacturer\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\032f\n\024Ch"
  "annelMappingRegion\022\016\n\006us4oem\030\001 \001(\r\022\020\n\010ch"
  "annels\030\002 \003(\r\022,\n\006region\030\003 \001(\0132\034.arrus.pro"
  "to.IntervalInteger\0323\n\016ChannelMapping\022\017\n\007"
  "us4oems\030\001 \003(\r\022\020\n\010channels\030\002 \003(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto_deps[2] = {
  &::descriptor_table_io_2fproto_2fcommon_2fIntervalInteger_2eproto,
  &::descriptor_table_io_2fproto_2fdevices_2fus4r_2fIOSettings_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto_sccs[4] = {
  &scc_info_ProbeAdapterModel_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base,
  &scc_info_ProbeAdapterModel_ChannelMapping_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base,
  &scc_info_ProbeAdapterModel_ChannelMappingRegion_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base,
  &scc_info_ProbeAdapterModel_Id_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto_once;
static bool descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto = {
  &descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto_initialized, descriptor_table_protodef_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto, "io/proto/devices/us4r/ProbeAdapterModel.proto", 639,
  &descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto_once, descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto_sccs, descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto::offsets,
  file_level_metadata_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto, 4, file_level_enum_descriptors_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto, file_level_service_descriptors_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto), true);
namespace arrus {
namespace proto {

// ===================================================================

void ProbeAdapterModel_Id::InitAsDefaultInstance() {
}
class ProbeAdapterModel_Id::_Internal {
 public:
};

ProbeAdapterModel_Id::ProbeAdapterModel_Id()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.ProbeAdapterModel.Id)
}
ProbeAdapterModel_Id::ProbeAdapterModel_Id(const ProbeAdapterModel_Id& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_manufacturer().empty()) {
    manufacturer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:arrus.proto.ProbeAdapterModel.Id)
}

void ProbeAdapterModel_Id::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProbeAdapterModel_Id_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base);
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProbeAdapterModel_Id::~ProbeAdapterModel_Id() {
  // @@protoc_insertion_point(destructor:arrus.proto.ProbeAdapterModel.Id)
  SharedDtor();
}

void ProbeAdapterModel_Id::SharedDtor() {
  manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProbeAdapterModel_Id::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProbeAdapterModel_Id& ProbeAdapterModel_Id::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProbeAdapterModel_Id_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base);
  return *internal_default_instance();
}


void ProbeAdapterModel_Id::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.ProbeAdapterModel.Id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ProbeAdapterModel_Id::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string manufacturer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "arrus.proto.ProbeAdapterModel.Id.manufacturer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "arrus.proto.ProbeAdapterModel.Id.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProbeAdapterModel_Id::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.ProbeAdapterModel.Id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrus.proto.ProbeAdapterModel.Id.manufacturer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_manufacturer(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrus.proto.ProbeAdapterModel.Id.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.ProbeAdapterModel.Id)
  return target;
}

size_t ProbeAdapterModel_Id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.ProbeAdapterModel.Id)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbeAdapterModel_Id::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.ProbeAdapterModel.Id)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbeAdapterModel_Id* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProbeAdapterModel_Id>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.ProbeAdapterModel.Id)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.ProbeAdapterModel.Id)
    MergeFrom(*source);
  }
}

void ProbeAdapterModel_Id::MergeFrom(const ProbeAdapterModel_Id& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.ProbeAdapterModel.Id)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ProbeAdapterModel_Id::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.ProbeAdapterModel.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeAdapterModel_Id::CopyFrom(const ProbeAdapterModel_Id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.ProbeAdapterModel.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeAdapterModel_Id::IsInitialized() const {
  return true;
}

void ProbeAdapterModel_Id::InternalSwap(ProbeAdapterModel_Id* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  manufacturer_.Swap(&other->manufacturer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProbeAdapterModel_Id::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProbeAdapterModel_ChannelMappingRegion::InitAsDefaultInstance() {
  ::arrus::proto::_ProbeAdapterModel_ChannelMappingRegion_default_instance_._instance.get_mutable()->region_ = const_cast< ::arrus::proto::IntervalInteger*>(
      ::arrus::proto::IntervalInteger::internal_default_instance());
}
class ProbeAdapterModel_ChannelMappingRegion::_Internal {
 public:
  static const ::arrus::proto::IntervalInteger& region(const ProbeAdapterModel_ChannelMappingRegion* msg);
};

const ::arrus::proto::IntervalInteger&
ProbeAdapterModel_ChannelMappingRegion::_Internal::region(const ProbeAdapterModel_ChannelMappingRegion* msg) {
  return *msg->region_;
}
void ProbeAdapterModel_ChannelMappingRegion::clear_region() {
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
ProbeAdapterModel_ChannelMappingRegion::ProbeAdapterModel_ChannelMappingRegion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
}
ProbeAdapterModel_ChannelMappingRegion::ProbeAdapterModel_ChannelMappingRegion(const ProbeAdapterModel_ChannelMappingRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_region()) {
    region_ = new ::arrus::proto::IntervalInteger(*from.region_);
  } else {
    region_ = nullptr;
  }
  us4oem_ = from.us4oem_;
  // @@protoc_insertion_point(copy_constructor:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
}

void ProbeAdapterModel_ChannelMappingRegion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProbeAdapterModel_ChannelMappingRegion_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&us4oem_) -
      reinterpret_cast<char*>(&region_)) + sizeof(us4oem_));
}

ProbeAdapterModel_ChannelMappingRegion::~ProbeAdapterModel_ChannelMappingRegion() {
  // @@protoc_insertion_point(destructor:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
  SharedDtor();
}

void ProbeAdapterModel_ChannelMappingRegion::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
}

void ProbeAdapterModel_ChannelMappingRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProbeAdapterModel_ChannelMappingRegion& ProbeAdapterModel_ChannelMappingRegion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProbeAdapterModel_ChannelMappingRegion_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base);
  return *internal_default_instance();
}


void ProbeAdapterModel_ChannelMappingRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  us4oem_ = 0u;
  _internal_metadata_.Clear();
}

const char* ProbeAdapterModel_ChannelMappingRegion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 us4oem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          us4oem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrus.proto.IntervalInteger region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProbeAdapterModel_ChannelMappingRegion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 us4oem = 1;
  if (this->us4oem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_us4oem(), target);
  }

  // repeated uint32 channels = 2;
  {
    int byte_size = _channels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_channels(), byte_size, target);
    }
  }

  // .arrus.proto.IntervalInteger region = 3;
  if (this->has_region()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::region(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
  return target;
}

size_t ProbeAdapterModel_ChannelMappingRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 channels = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->channels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .arrus.proto.IntervalInteger region = 3;
  if (this->has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // uint32 us4oem = 1;
  if (this->us4oem() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_us4oem());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbeAdapterModel_ChannelMappingRegion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbeAdapterModel_ChannelMappingRegion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProbeAdapterModel_ChannelMappingRegion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
    MergeFrom(*source);
  }
}

void ProbeAdapterModel_ChannelMappingRegion::MergeFrom(const ProbeAdapterModel_ChannelMappingRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from.has_region()) {
    _internal_mutable_region()->::arrus::proto::IntervalInteger::MergeFrom(from._internal_region());
  }
  if (from.us4oem() != 0) {
    _internal_set_us4oem(from._internal_us4oem());
  }
}

void ProbeAdapterModel_ChannelMappingRegion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeAdapterModel_ChannelMappingRegion::CopyFrom(const ProbeAdapterModel_ChannelMappingRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeAdapterModel_ChannelMappingRegion::IsInitialized() const {
  return true;
}

void ProbeAdapterModel_ChannelMappingRegion::InternalSwap(ProbeAdapterModel_ChannelMappingRegion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  swap(region_, other->region_);
  swap(us4oem_, other->us4oem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProbeAdapterModel_ChannelMappingRegion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProbeAdapterModel_ChannelMapping::InitAsDefaultInstance() {
}
class ProbeAdapterModel_ChannelMapping::_Internal {
 public:
};

ProbeAdapterModel_ChannelMapping::ProbeAdapterModel_ChannelMapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.ProbeAdapterModel.ChannelMapping)
}
ProbeAdapterModel_ChannelMapping::ProbeAdapterModel_ChannelMapping(const ProbeAdapterModel_ChannelMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      us4oems_(from.us4oems_),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:arrus.proto.ProbeAdapterModel.ChannelMapping)
}

void ProbeAdapterModel_ChannelMapping::SharedCtor() {
}

ProbeAdapterModel_ChannelMapping::~ProbeAdapterModel_ChannelMapping() {
  // @@protoc_insertion_point(destructor:arrus.proto.ProbeAdapterModel.ChannelMapping)
  SharedDtor();
}

void ProbeAdapterModel_ChannelMapping::SharedDtor() {
}

void ProbeAdapterModel_ChannelMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProbeAdapterModel_ChannelMapping& ProbeAdapterModel_ChannelMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProbeAdapterModel_ChannelMapping_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base);
  return *internal_default_instance();
}


void ProbeAdapterModel_ChannelMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.ProbeAdapterModel.ChannelMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  us4oems_.Clear();
  channels_.Clear();
  _internal_metadata_.Clear();
}

const char* ProbeAdapterModel_ChannelMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 us4oems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_us4oems(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_us4oems(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_channels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_channels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProbeAdapterModel_ChannelMapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.ProbeAdapterModel.ChannelMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 us4oems = 1;
  {
    int byte_size = _us4oems_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_us4oems(), byte_size, target);
    }
  }

  // repeated uint32 channels = 2;
  {
    int byte_size = _channels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_channels(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.ProbeAdapterModel.ChannelMapping)
  return target;
}

size_t ProbeAdapterModel_ChannelMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.ProbeAdapterModel.ChannelMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 us4oems = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->us4oems_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _us4oems_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 channels = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->channels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbeAdapterModel_ChannelMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.ProbeAdapterModel.ChannelMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbeAdapterModel_ChannelMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProbeAdapterModel_ChannelMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.ProbeAdapterModel.ChannelMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.ProbeAdapterModel.ChannelMapping)
    MergeFrom(*source);
  }
}

void ProbeAdapterModel_ChannelMapping::MergeFrom(const ProbeAdapterModel_ChannelMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.ProbeAdapterModel.ChannelMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  us4oems_.MergeFrom(from.us4oems_);
  channels_.MergeFrom(from.channels_);
}

void ProbeAdapterModel_ChannelMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.ProbeAdapterModel.ChannelMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeAdapterModel_ChannelMapping::CopyFrom(const ProbeAdapterModel_ChannelMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.ProbeAdapterModel.ChannelMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeAdapterModel_ChannelMapping::IsInitialized() const {
  return true;
}

void ProbeAdapterModel_ChannelMapping::InternalSwap(ProbeAdapterModel_ChannelMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  us4oems_.InternalSwap(&other->us4oems_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProbeAdapterModel_ChannelMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProbeAdapterModel::InitAsDefaultInstance() {
  ::arrus::proto::_ProbeAdapterModel_default_instance_._instance.get_mutable()->id_ = const_cast< ::arrus::proto::ProbeAdapterModel_Id*>(
      ::arrus::proto::ProbeAdapterModel_Id::internal_default_instance());
  ::arrus::proto::_ProbeAdapterModel_default_instance_._instance.get_mutable()->channel_mapping_ = const_cast< ::arrus::proto::ProbeAdapterModel_ChannelMapping*>(
      ::arrus::proto::ProbeAdapterModel_ChannelMapping::internal_default_instance());
  ::arrus::proto::_ProbeAdapterModel_default_instance_._instance.get_mutable()->io_settings_ = const_cast< ::arrus::proto::IOSettings*>(
      ::arrus::proto::IOSettings::internal_default_instance());
}
class ProbeAdapterModel::_Internal {
 public:
  static const ::arrus::proto::ProbeAdapterModel_Id& id(const ProbeAdapterModel* msg);
  static const ::arrus::proto::ProbeAdapterModel_ChannelMapping& channel_mapping(const ProbeAdapterModel* msg);
  static const ::arrus::proto::IOSettings& io_settings(const ProbeAdapterModel* msg);
};

const ::arrus::proto::ProbeAdapterModel_Id&
ProbeAdapterModel::_Internal::id(const ProbeAdapterModel* msg) {
  return *msg->id_;
}
const ::arrus::proto::ProbeAdapterModel_ChannelMapping&
ProbeAdapterModel::_Internal::channel_mapping(const ProbeAdapterModel* msg) {
  return *msg->channel_mapping_;
}
const ::arrus::proto::IOSettings&
ProbeAdapterModel::_Internal::io_settings(const ProbeAdapterModel* msg) {
  return *msg->io_settings_;
}
void ProbeAdapterModel::clear_io_settings() {
  if (GetArenaNoVirtual() == nullptr && io_settings_ != nullptr) {
    delete io_settings_;
  }
  io_settings_ = nullptr;
}
ProbeAdapterModel::ProbeAdapterModel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.ProbeAdapterModel)
}
ProbeAdapterModel::ProbeAdapterModel(const ProbeAdapterModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channel_mapping_regions_(from.channel_mapping_regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::arrus::proto::ProbeAdapterModel_Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_channel_mapping()) {
    channel_mapping_ = new ::arrus::proto::ProbeAdapterModel_ChannelMapping(*from.channel_mapping_);
  } else {
    channel_mapping_ = nullptr;
  }
  if (from._internal_has_io_settings()) {
    io_settings_ = new ::arrus::proto::IOSettings(*from.io_settings_);
  } else {
    io_settings_ = nullptr;
  }
  n_channels_ = from.n_channels_;
  // @@protoc_insertion_point(copy_constructor:arrus.proto.ProbeAdapterModel)
}

void ProbeAdapterModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProbeAdapterModel_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_channels_) -
      reinterpret_cast<char*>(&id_)) + sizeof(n_channels_));
}

ProbeAdapterModel::~ProbeAdapterModel() {
  // @@protoc_insertion_point(destructor:arrus.proto.ProbeAdapterModel)
  SharedDtor();
}

void ProbeAdapterModel::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete channel_mapping_;
  if (this != internal_default_instance()) delete io_settings_;
}

void ProbeAdapterModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProbeAdapterModel& ProbeAdapterModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProbeAdapterModel_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.base);
  return *internal_default_instance();
}


void ProbeAdapterModel::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.ProbeAdapterModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_mapping_regions_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && channel_mapping_ != nullptr) {
    delete channel_mapping_;
  }
  channel_mapping_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && io_settings_ != nullptr) {
    delete io_settings_;
  }
  io_settings_ = nullptr;
  n_channels_ = 0u;
  _internal_metadata_.Clear();
}

const char* ProbeAdapterModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrus.proto.ProbeAdapterModel.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrus.proto.ProbeAdapterModel.ChannelMapping channel_mapping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_mapping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .arrus.proto.ProbeAdapterModel.ChannelMappingRegion channel_mapping_regions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_mapping_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .arrus.proto.IOSettings io_settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_io_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProbeAdapterModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.ProbeAdapterModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrus.proto.ProbeAdapterModel.Id id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // uint32 n_channels = 2;
  if (this->n_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_n_channels(), target);
  }

  // .arrus.proto.ProbeAdapterModel.ChannelMapping channel_mapping = 3;
  if (this->has_channel_mapping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::channel_mapping(this), target, stream);
  }

  // repeated .arrus.proto.ProbeAdapterModel.ChannelMappingRegion channel_mapping_regions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_mapping_regions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_channel_mapping_regions(i), target, stream);
  }

  // .arrus.proto.IOSettings io_settings = 5;
  if (this->has_io_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::io_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.ProbeAdapterModel)
  return target;
}

size_t ProbeAdapterModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.ProbeAdapterModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .arrus.proto.ProbeAdapterModel.ChannelMappingRegion channel_mapping_regions = 4;
  total_size += 1UL * this->_internal_channel_mapping_regions_size();
  for (const auto& msg : this->channel_mapping_regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .arrus.proto.ProbeAdapterModel.Id id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .arrus.proto.ProbeAdapterModel.ChannelMapping channel_mapping = 3;
  if (this->has_channel_mapping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_mapping_);
  }

  // .arrus.proto.IOSettings io_settings = 5;
  if (this->has_io_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *io_settings_);
  }

  // uint32 n_channels = 2;
  if (this->n_channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_channels());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbeAdapterModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.ProbeAdapterModel)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbeAdapterModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProbeAdapterModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.ProbeAdapterModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.ProbeAdapterModel)
    MergeFrom(*source);
  }
}

void ProbeAdapterModel::MergeFrom(const ProbeAdapterModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.ProbeAdapterModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_mapping_regions_.MergeFrom(from.channel_mapping_regions_);
  if (from.has_id()) {
    _internal_mutable_id()->::arrus::proto::ProbeAdapterModel_Id::MergeFrom(from._internal_id());
  }
  if (from.has_channel_mapping()) {
    _internal_mutable_channel_mapping()->::arrus::proto::ProbeAdapterModel_ChannelMapping::MergeFrom(from._internal_channel_mapping());
  }
  if (from.has_io_settings()) {
    _internal_mutable_io_settings()->::arrus::proto::IOSettings::MergeFrom(from._internal_io_settings());
  }
  if (from.n_channels() != 0) {
    _internal_set_n_channels(from._internal_n_channels());
  }
}

void ProbeAdapterModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.ProbeAdapterModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeAdapterModel::CopyFrom(const ProbeAdapterModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.ProbeAdapterModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeAdapterModel::IsInitialized() const {
  return true;
}

void ProbeAdapterModel::InternalSwap(ProbeAdapterModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_mapping_regions_.InternalSwap(&other->channel_mapping_regions_);
  swap(id_, other->id_);
  swap(channel_mapping_, other->channel_mapping_);
  swap(io_settings_, other->io_settings_);
  swap(n_channels_, other->n_channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProbeAdapterModel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::arrus::proto::ProbeAdapterModel_Id* Arena::CreateMaybeMessage< ::arrus::proto::ProbeAdapterModel_Id >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::ProbeAdapterModel_Id >(arena);
}
template<> PROTOBUF_NOINLINE ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion* Arena::CreateMaybeMessage< ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::arrus::proto::ProbeAdapterModel_ChannelMapping* Arena::CreateMaybeMessage< ::arrus::proto::ProbeAdapterModel_ChannelMapping >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::ProbeAdapterModel_ChannelMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::arrus::proto::ProbeAdapterModel* Arena::CreateMaybeMessage< ::arrus::proto::ProbeAdapterModel >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::ProbeAdapterModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
