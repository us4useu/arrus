// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/devices/us4r/Us4RSettings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "io/proto/devices/probe/ProbeModel.pb.h"
#include "io/proto/devices/us4r/ProbeAdapterModel.pb.h"
#include "io/proto/devices/us4r/ProbeToAdapterConnection.pb.h"
#include "io/proto/devices/us4r/RxSettings.pb.h"
#include "io/proto/devices/us4r/Us4OEMSettings.pb.h"
#include "io/proto/devices/us4r/HVSettings.pb.h"
#include "io/proto/devices/us4r/DigitalBackplaneSettings.pb.h"
#include "io/proto/devices/us4r/Bitstream.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto;
namespace arrus {
namespace proto {
class Us4RSettings;
class Us4RSettingsDefaultTypeInternal;
extern Us4RSettingsDefaultTypeInternal _Us4RSettings_default_instance_;
class Us4RSettings_ChannelsMask;
class Us4RSettings_ChannelsMaskDefaultTypeInternal;
extern Us4RSettings_ChannelsMaskDefaultTypeInternal _Us4RSettings_ChannelsMask_default_instance_;
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> ::arrus::proto::Us4RSettings* Arena::CreateMaybeMessage<::arrus::proto::Us4RSettings>(Arena*);
template<> ::arrus::proto::Us4RSettings_ChannelsMask* Arena::CreateMaybeMessage<::arrus::proto::Us4RSettings_ChannelsMask>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace arrus {
namespace proto {

// ===================================================================

class Us4RSettings_ChannelsMask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrus.proto.Us4RSettings.ChannelsMask) */ {
 public:
  Us4RSettings_ChannelsMask();
  virtual ~Us4RSettings_ChannelsMask();

  Us4RSettings_ChannelsMask(const Us4RSettings_ChannelsMask& from);
  Us4RSettings_ChannelsMask(Us4RSettings_ChannelsMask&& from) noexcept
    : Us4RSettings_ChannelsMask() {
    *this = ::std::move(from);
  }

  inline Us4RSettings_ChannelsMask& operator=(const Us4RSettings_ChannelsMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline Us4RSettings_ChannelsMask& operator=(Us4RSettings_ChannelsMask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Us4RSettings_ChannelsMask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Us4RSettings_ChannelsMask* internal_default_instance() {
    return reinterpret_cast<const Us4RSettings_ChannelsMask*>(
               &_Us4RSettings_ChannelsMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Us4RSettings_ChannelsMask& a, Us4RSettings_ChannelsMask& b) {
    a.Swap(&b);
  }
  inline void Swap(Us4RSettings_ChannelsMask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Us4RSettings_ChannelsMask* New() const final {
    return CreateMaybeMessage<Us4RSettings_ChannelsMask>(nullptr);
  }

  Us4RSettings_ChannelsMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Us4RSettings_ChannelsMask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Us4RSettings_ChannelsMask& from);
  void MergeFrom(const Us4RSettings_ChannelsMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Us4RSettings_ChannelsMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrus.proto.Us4RSettings.ChannelsMask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto);
    return ::descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated uint32 channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_channels() const;
  void _internal_add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_channels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 channels(int index) const;
  void set_channels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_channels();

  // @@protoc_insertion_point(class_scope:arrus.proto.Us4RSettings.ChannelsMask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > channels_;
  mutable std::atomic<int> _channels_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto;
};
// -------------------------------------------------------------------

class Us4RSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrus.proto.Us4RSettings) */ {
 public:
  Us4RSettings();
  virtual ~Us4RSettings();

  Us4RSettings(const Us4RSettings& from);
  Us4RSettings(Us4RSettings&& from) noexcept
    : Us4RSettings() {
    *this = ::std::move(from);
  }

  inline Us4RSettings& operator=(const Us4RSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Us4RSettings& operator=(Us4RSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Us4RSettings& default_instance();

  enum OneOfAdapterRepresentationCase {
    kAdapterId = 3,
    kAdapter = 4,
    ONE_OF_ADAPTER_REPRESENTATION_NOT_SET = 0,
  };

  enum OptionalNus4EmsCase {
    kNus4Oems = 12,
    OPTIONAL_NUS4EMS_NOT_SET = 0,
  };

  enum OptionalTxFrequencyRangeCase {
    kTxFrequencyRange = 15,
    OPTIONAL_TX_FREQUENCY_RANGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Us4RSettings* internal_default_instance() {
    return reinterpret_cast<const Us4RSettings*>(
               &_Us4RSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Us4RSettings& a, Us4RSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(Us4RSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Us4RSettings* New() const final {
    return CreateMaybeMessage<Us4RSettings>(nullptr);
  }

  Us4RSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Us4RSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Us4RSettings& from);
  void MergeFrom(const Us4RSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Us4RSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrus.proto.Us4RSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto);
    return ::descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Us4RSettings_ChannelsMask ChannelsMask;

  // accessors -------------------------------------------------------

  enum : int {
    kProbeIdFieldNumber = 1,
    kProbeFieldNumber = 2,
    kChannelsMaskFieldNumber = 5,
    kProbeToAdapterConnectionFieldNumber = 6,
    kUs4OemsFieldNumber = 8,
    kUs4OemChannelsMaskFieldNumber = 10,
    kAdapterToUs4RModuleNrFieldNumber = 13,
    kBitstreamsFieldNumber = 17,
    kRxSettingsFieldNumber = 7,
    kHvFieldNumber = 9,
    kDigitalBackplaneFieldNumber = 16,
    kReprogrammingModeFieldNumber = 11,
    kExternalTriggerFieldNumber = 14,
    kAdapterIdFieldNumber = 3,
    kAdapterFieldNumber = 4,
    kNus4OemsFieldNumber = 12,
    kTxFrequencyRangeFieldNumber = 15,
  };
  // repeated .arrus.proto.ProbeModel.Id probe_id = 1;
  int probe_id_size() const;
  private:
  int _internal_probe_id_size() const;
  public:
  void clear_probe_id();
  ::arrus::proto::ProbeModel_Id* mutable_probe_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeModel_Id >*
      mutable_probe_id();
  private:
  const ::arrus::proto::ProbeModel_Id& _internal_probe_id(int index) const;
  ::arrus::proto::ProbeModel_Id* _internal_add_probe_id();
  public:
  const ::arrus::proto::ProbeModel_Id& probe_id(int index) const;
  ::arrus::proto::ProbeModel_Id* add_probe_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeModel_Id >&
      probe_id() const;

  // repeated .arrus.proto.ProbeModel probe = 2;
  int probe_size() const;
  private:
  int _internal_probe_size() const;
  public:
  void clear_probe();
  ::arrus::proto::ProbeModel* mutable_probe(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeModel >*
      mutable_probe();
  private:
  const ::arrus::proto::ProbeModel& _internal_probe(int index) const;
  ::arrus::proto::ProbeModel* _internal_add_probe();
  public:
  const ::arrus::proto::ProbeModel& probe(int index) const;
  ::arrus::proto::ProbeModel* add_probe();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeModel >&
      probe() const;

  // repeated .arrus.proto.Us4RSettings.ChannelsMask channels_mask = 5;
  int channels_mask_size() const;
  private:
  int _internal_channels_mask_size() const;
  public:
  void clear_channels_mask();
  ::arrus::proto::Us4RSettings_ChannelsMask* mutable_channels_mask(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4RSettings_ChannelsMask >*
      mutable_channels_mask();
  private:
  const ::arrus::proto::Us4RSettings_ChannelsMask& _internal_channels_mask(int index) const;
  ::arrus::proto::Us4RSettings_ChannelsMask* _internal_add_channels_mask();
  public:
  const ::arrus::proto::Us4RSettings_ChannelsMask& channels_mask(int index) const;
  ::arrus::proto::Us4RSettings_ChannelsMask* add_channels_mask();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4RSettings_ChannelsMask >&
      channels_mask() const;

  // repeated .arrus.proto.ProbeToAdapterConnection probe_to_adapter_connection = 6;
  int probe_to_adapter_connection_size() const;
  private:
  int _internal_probe_to_adapter_connection_size() const;
  public:
  void clear_probe_to_adapter_connection();
  ::arrus::proto::ProbeToAdapterConnection* mutable_probe_to_adapter_connection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeToAdapterConnection >*
      mutable_probe_to_adapter_connection();
  private:
  const ::arrus::proto::ProbeToAdapterConnection& _internal_probe_to_adapter_connection(int index) const;
  ::arrus::proto::ProbeToAdapterConnection* _internal_add_probe_to_adapter_connection();
  public:
  const ::arrus::proto::ProbeToAdapterConnection& probe_to_adapter_connection(int index) const;
  ::arrus::proto::ProbeToAdapterConnection* add_probe_to_adapter_connection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeToAdapterConnection >&
      probe_to_adapter_connection() const;

  // repeated .arrus.proto.Us4OEMSettings us4oems = 8;
  int us4oems_size() const;
  private:
  int _internal_us4oems_size() const;
  public:
  void clear_us4oems();
  ::arrus::proto::Us4OEMSettings* mutable_us4oems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4OEMSettings >*
      mutable_us4oems();
  private:
  const ::arrus::proto::Us4OEMSettings& _internal_us4oems(int index) const;
  ::arrus::proto::Us4OEMSettings* _internal_add_us4oems();
  public:
  const ::arrus::proto::Us4OEMSettings& us4oems(int index) const;
  ::arrus::proto::Us4OEMSettings* add_us4oems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4OEMSettings >&
      us4oems() const;

  // repeated .arrus.proto.Us4RSettings.ChannelsMask us4oem_channels_mask = 10;
  int us4oem_channels_mask_size() const;
  private:
  int _internal_us4oem_channels_mask_size() const;
  public:
  void clear_us4oem_channels_mask();
  ::arrus::proto::Us4RSettings_ChannelsMask* mutable_us4oem_channels_mask(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4RSettings_ChannelsMask >*
      mutable_us4oem_channels_mask();
  private:
  const ::arrus::proto::Us4RSettings_ChannelsMask& _internal_us4oem_channels_mask(int index) const;
  ::arrus::proto::Us4RSettings_ChannelsMask* _internal_add_us4oem_channels_mask();
  public:
  const ::arrus::proto::Us4RSettings_ChannelsMask& us4oem_channels_mask(int index) const;
  ::arrus::proto::Us4RSettings_ChannelsMask* add_us4oem_channels_mask();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4RSettings_ChannelsMask >&
      us4oem_channels_mask() const;

  // repeated uint32 adapter_to_us4r_module_nr = 13;
  int adapter_to_us4r_module_nr_size() const;
  private:
  int _internal_adapter_to_us4r_module_nr_size() const;
  public:
  void clear_adapter_to_us4r_module_nr();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_adapter_to_us4r_module_nr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_adapter_to_us4r_module_nr() const;
  void _internal_add_adapter_to_us4r_module_nr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_adapter_to_us4r_module_nr();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 adapter_to_us4r_module_nr(int index) const;
  void set_adapter_to_us4r_module_nr(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_adapter_to_us4r_module_nr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      adapter_to_us4r_module_nr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_adapter_to_us4r_module_nr();

  // repeated .arrus.proto.Bitstream bitstreams = 17;
  int bitstreams_size() const;
  private:
  int _internal_bitstreams_size() const;
  public:
  void clear_bitstreams();
  ::arrus::proto::Bitstream* mutable_bitstreams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Bitstream >*
      mutable_bitstreams();
  private:
  const ::arrus::proto::Bitstream& _internal_bitstreams(int index) const;
  ::arrus::proto::Bitstream* _internal_add_bitstreams();
  public:
  const ::arrus::proto::Bitstream& bitstreams(int index) const;
  ::arrus::proto::Bitstream* add_bitstreams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Bitstream >&
      bitstreams() const;

  // .arrus.proto.RxSettings rx_settings = 7;
  bool has_rx_settings() const;
  private:
  bool _internal_has_rx_settings() const;
  public:
  void clear_rx_settings();
  const ::arrus::proto::RxSettings& rx_settings() const;
  ::arrus::proto::RxSettings* release_rx_settings();
  ::arrus::proto::RxSettings* mutable_rx_settings();
  void set_allocated_rx_settings(::arrus::proto::RxSettings* rx_settings);
  private:
  const ::arrus::proto::RxSettings& _internal_rx_settings() const;
  ::arrus::proto::RxSettings* _internal_mutable_rx_settings();
  public:

  // .arrus.proto.HVSettings hv = 9;
  bool has_hv() const;
  private:
  bool _internal_has_hv() const;
  public:
  void clear_hv();
  const ::arrus::proto::HVSettings& hv() const;
  ::arrus::proto::HVSettings* release_hv();
  ::arrus::proto::HVSettings* mutable_hv();
  void set_allocated_hv(::arrus::proto::HVSettings* hv);
  private:
  const ::arrus::proto::HVSettings& _internal_hv() const;
  ::arrus::proto::HVSettings* _internal_mutable_hv();
  public:

  // .arrus.proto.DigitalBackplaneSettings digital_backplane = 16;
  bool has_digital_backplane() const;
  private:
  bool _internal_has_digital_backplane() const;
  public:
  void clear_digital_backplane();
  const ::arrus::proto::DigitalBackplaneSettings& digital_backplane() const;
  ::arrus::proto::DigitalBackplaneSettings* release_digital_backplane();
  ::arrus::proto::DigitalBackplaneSettings* mutable_digital_backplane();
  void set_allocated_digital_backplane(::arrus::proto::DigitalBackplaneSettings* digital_backplane);
  private:
  const ::arrus::proto::DigitalBackplaneSettings& _internal_digital_backplane() const;
  ::arrus::proto::DigitalBackplaneSettings* _internal_mutable_digital_backplane();
  public:

  // .arrus.proto.Us4OEMSettings.ReprogrammingMode reprogramming_mode = 11;
  void clear_reprogramming_mode();
  ::arrus::proto::Us4OEMSettings_ReprogrammingMode reprogramming_mode() const;
  void set_reprogramming_mode(::arrus::proto::Us4OEMSettings_ReprogrammingMode value);
  private:
  ::arrus::proto::Us4OEMSettings_ReprogrammingMode _internal_reprogramming_mode() const;
  void _internal_set_reprogramming_mode(::arrus::proto::Us4OEMSettings_ReprogrammingMode value);
  public:

  // bool external_trigger = 14;
  void clear_external_trigger();
  bool external_trigger() const;
  void set_external_trigger(bool value);
  private:
  bool _internal_external_trigger() const;
  void _internal_set_external_trigger(bool value);
  public:

  // .arrus.proto.ProbeAdapterModel.Id adapter_id = 3;
  bool has_adapter_id() const;
  private:
  bool _internal_has_adapter_id() const;
  public:
  void clear_adapter_id();
  const ::arrus::proto::ProbeAdapterModel_Id& adapter_id() const;
  ::arrus::proto::ProbeAdapterModel_Id* release_adapter_id();
  ::arrus::proto::ProbeAdapterModel_Id* mutable_adapter_id();
  void set_allocated_adapter_id(::arrus::proto::ProbeAdapterModel_Id* adapter_id);
  private:
  const ::arrus::proto::ProbeAdapterModel_Id& _internal_adapter_id() const;
  ::arrus::proto::ProbeAdapterModel_Id* _internal_mutable_adapter_id();
  public:

  // .arrus.proto.ProbeAdapterModel adapter = 4;
  bool has_adapter() const;
  private:
  bool _internal_has_adapter() const;
  public:
  void clear_adapter();
  const ::arrus::proto::ProbeAdapterModel& adapter() const;
  ::arrus::proto::ProbeAdapterModel* release_adapter();
  ::arrus::proto::ProbeAdapterModel* mutable_adapter();
  void set_allocated_adapter(::arrus::proto::ProbeAdapterModel* adapter);
  private:
  const ::arrus::proto::ProbeAdapterModel& _internal_adapter() const;
  ::arrus::proto::ProbeAdapterModel* _internal_mutable_adapter();
  public:

  // uint32 nus4oems = 12;
  private:
  bool _internal_has_nus4oems() const;
  public:
  void clear_nus4oems();
  ::PROTOBUF_NAMESPACE_ID::uint32 nus4oems() const;
  void set_nus4oems(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nus4oems() const;
  void _internal_set_nus4oems(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tx_frequency_range = 15;
  private:
  bool _internal_has_tx_frequency_range() const;
  public:
  void clear_tx_frequency_range();
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_frequency_range() const;
  void set_tx_frequency_range(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tx_frequency_range() const;
  void _internal_set_tx_frequency_range(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_one_of_adapter_representation();
  OneOfAdapterRepresentationCase one_of_adapter_representation_case() const;
  void clear_optional_nus4ems();
  OptionalNus4EmsCase optional_nus4ems_case() const;
  void clear_optional_tx_frequency_range();
  OptionalTxFrequencyRangeCase optional_tx_frequency_range_case() const;
  // @@protoc_insertion_point(class_scope:arrus.proto.Us4RSettings)
 private:
  class _Internal;
  void set_has_adapter_id();
  void set_has_adapter();
  void set_has_nus4oems();
  void set_has_tx_frequency_range();

  inline bool has_one_of_adapter_representation() const;
  inline void clear_has_one_of_adapter_representation();

  inline bool has_optional_nus4ems() const;
  inline void clear_has_optional_nus4ems();

  inline bool has_optional_tx_frequency_range() const;
  inline void clear_has_optional_tx_frequency_range();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeModel_Id > probe_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeModel > probe_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4RSettings_ChannelsMask > channels_mask_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeToAdapterConnection > probe_to_adapter_connection_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4OEMSettings > us4oems_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4RSettings_ChannelsMask > us4oem_channels_mask_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > adapter_to_us4r_module_nr_;
  mutable std::atomic<int> _adapter_to_us4r_module_nr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Bitstream > bitstreams_;
  ::arrus::proto::RxSettings* rx_settings_;
  ::arrus::proto::HVSettings* hv_;
  ::arrus::proto::DigitalBackplaneSettings* digital_backplane_;
  int reprogramming_mode_;
  bool external_trigger_;
  union OneOfAdapterRepresentationUnion {
    OneOfAdapterRepresentationUnion() {}
    ::arrus::proto::ProbeAdapterModel_Id* adapter_id_;
    ::arrus::proto::ProbeAdapterModel* adapter_;
  } one_of_adapter_representation_;
  union OptionalNus4EmsUnion {
    OptionalNus4EmsUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 nus4oems_;
  } optional_nus4ems_;
  union OptionalTxFrequencyRangeUnion {
    OptionalTxFrequencyRangeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 tx_frequency_range_;
  } optional_tx_frequency_range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[3];

  friend struct ::TableStruct_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Us4RSettings_ChannelsMask

// repeated uint32 channels = 1;
inline int Us4RSettings_ChannelsMask::_internal_channels_size() const {
  return channels_.size();
}
inline int Us4RSettings_ChannelsMask::channels_size() const {
  return _internal_channels_size();
}
inline void Us4RSettings_ChannelsMask::clear_channels() {
  channels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Us4RSettings_ChannelsMask::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Us4RSettings_ChannelsMask::channels(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.ChannelsMask.channels)
  return _internal_channels(index);
}
inline void Us4RSettings_ChannelsMask::set_channels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:arrus.proto.Us4RSettings.ChannelsMask.channels)
}
inline void Us4RSettings_ChannelsMask::_internal_add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channels_.Add(value);
}
inline void Us4RSettings_ChannelsMask::add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_channels(value);
  // @@protoc_insertion_point(field_add:arrus.proto.Us4RSettings.ChannelsMask.channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Us4RSettings_ChannelsMask::_internal_channels() const {
  return channels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Us4RSettings_ChannelsMask::channels() const {
  // @@protoc_insertion_point(field_list:arrus.proto.Us4RSettings.ChannelsMask.channels)
  return _internal_channels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Us4RSettings_ChannelsMask::_internal_mutable_channels() {
  return &channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Us4RSettings_ChannelsMask::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.Us4RSettings.ChannelsMask.channels)
  return _internal_mutable_channels();
}

// -------------------------------------------------------------------

// Us4RSettings

// repeated .arrus.proto.ProbeModel.Id probe_id = 1;
inline int Us4RSettings::_internal_probe_id_size() const {
  return probe_id_.size();
}
inline int Us4RSettings::probe_id_size() const {
  return _internal_probe_id_size();
}
inline ::arrus::proto::ProbeModel_Id* Us4RSettings::mutable_probe_id(int index) {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4RSettings.probe_id)
  return probe_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeModel_Id >*
Us4RSettings::mutable_probe_id() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.Us4RSettings.probe_id)
  return &probe_id_;
}
inline const ::arrus::proto::ProbeModel_Id& Us4RSettings::_internal_probe_id(int index) const {
  return probe_id_.Get(index);
}
inline const ::arrus::proto::ProbeModel_Id& Us4RSettings::probe_id(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.probe_id)
  return _internal_probe_id(index);
}
inline ::arrus::proto::ProbeModel_Id* Us4RSettings::_internal_add_probe_id() {
  return probe_id_.Add();
}
inline ::arrus::proto::ProbeModel_Id* Us4RSettings::add_probe_id() {
  // @@protoc_insertion_point(field_add:arrus.proto.Us4RSettings.probe_id)
  return _internal_add_probe_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeModel_Id >&
Us4RSettings::probe_id() const {
  // @@protoc_insertion_point(field_list:arrus.proto.Us4RSettings.probe_id)
  return probe_id_;
}

// repeated .arrus.proto.ProbeModel probe = 2;
inline int Us4RSettings::_internal_probe_size() const {
  return probe_.size();
}
inline int Us4RSettings::probe_size() const {
  return _internal_probe_size();
}
inline ::arrus::proto::ProbeModel* Us4RSettings::mutable_probe(int index) {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4RSettings.probe)
  return probe_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeModel >*
Us4RSettings::mutable_probe() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.Us4RSettings.probe)
  return &probe_;
}
inline const ::arrus::proto::ProbeModel& Us4RSettings::_internal_probe(int index) const {
  return probe_.Get(index);
}
inline const ::arrus::proto::ProbeModel& Us4RSettings::probe(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.probe)
  return _internal_probe(index);
}
inline ::arrus::proto::ProbeModel* Us4RSettings::_internal_add_probe() {
  return probe_.Add();
}
inline ::arrus::proto::ProbeModel* Us4RSettings::add_probe() {
  // @@protoc_insertion_point(field_add:arrus.proto.Us4RSettings.probe)
  return _internal_add_probe();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeModel >&
Us4RSettings::probe() const {
  // @@protoc_insertion_point(field_list:arrus.proto.Us4RSettings.probe)
  return probe_;
}

// .arrus.proto.ProbeAdapterModel.Id adapter_id = 3;
inline bool Us4RSettings::_internal_has_adapter_id() const {
  return one_of_adapter_representation_case() == kAdapterId;
}
inline bool Us4RSettings::has_adapter_id() const {
  return _internal_has_adapter_id();
}
inline void Us4RSettings::set_has_adapter_id() {
  _oneof_case_[0] = kAdapterId;
}
inline ::arrus::proto::ProbeAdapterModel_Id* Us4RSettings::release_adapter_id() {
  // @@protoc_insertion_point(field_release:arrus.proto.Us4RSettings.adapter_id)
  if (_internal_has_adapter_id()) {
    clear_has_one_of_adapter_representation();
      ::arrus::proto::ProbeAdapterModel_Id* temp = one_of_adapter_representation_.adapter_id_;
    one_of_adapter_representation_.adapter_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arrus::proto::ProbeAdapterModel_Id& Us4RSettings::_internal_adapter_id() const {
  return _internal_has_adapter_id()
      ? *one_of_adapter_representation_.adapter_id_
      : *reinterpret_cast< ::arrus::proto::ProbeAdapterModel_Id*>(&::arrus::proto::_ProbeAdapterModel_Id_default_instance_);
}
inline const ::arrus::proto::ProbeAdapterModel_Id& Us4RSettings::adapter_id() const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.adapter_id)
  return _internal_adapter_id();
}
inline ::arrus::proto::ProbeAdapterModel_Id* Us4RSettings::_internal_mutable_adapter_id() {
  if (!_internal_has_adapter_id()) {
    clear_one_of_adapter_representation();
    set_has_adapter_id();
    one_of_adapter_representation_.adapter_id_ = CreateMaybeMessage< ::arrus::proto::ProbeAdapterModel_Id >(
        GetArenaNoVirtual());
  }
  return one_of_adapter_representation_.adapter_id_;
}
inline ::arrus::proto::ProbeAdapterModel_Id* Us4RSettings::mutable_adapter_id() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4RSettings.adapter_id)
  return _internal_mutable_adapter_id();
}

// .arrus.proto.ProbeAdapterModel adapter = 4;
inline bool Us4RSettings::_internal_has_adapter() const {
  return one_of_adapter_representation_case() == kAdapter;
}
inline bool Us4RSettings::has_adapter() const {
  return _internal_has_adapter();
}
inline void Us4RSettings::set_has_adapter() {
  _oneof_case_[0] = kAdapter;
}
inline ::arrus::proto::ProbeAdapterModel* Us4RSettings::release_adapter() {
  // @@protoc_insertion_point(field_release:arrus.proto.Us4RSettings.adapter)
  if (_internal_has_adapter()) {
    clear_has_one_of_adapter_representation();
      ::arrus::proto::ProbeAdapterModel* temp = one_of_adapter_representation_.adapter_;
    one_of_adapter_representation_.adapter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arrus::proto::ProbeAdapterModel& Us4RSettings::_internal_adapter() const {
  return _internal_has_adapter()
      ? *one_of_adapter_representation_.adapter_
      : *reinterpret_cast< ::arrus::proto::ProbeAdapterModel*>(&::arrus::proto::_ProbeAdapterModel_default_instance_);
}
inline const ::arrus::proto::ProbeAdapterModel& Us4RSettings::adapter() const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.adapter)
  return _internal_adapter();
}
inline ::arrus::proto::ProbeAdapterModel* Us4RSettings::_internal_mutable_adapter() {
  if (!_internal_has_adapter()) {
    clear_one_of_adapter_representation();
    set_has_adapter();
    one_of_adapter_representation_.adapter_ = CreateMaybeMessage< ::arrus::proto::ProbeAdapterModel >(
        GetArenaNoVirtual());
  }
  return one_of_adapter_representation_.adapter_;
}
inline ::arrus::proto::ProbeAdapterModel* Us4RSettings::mutable_adapter() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4RSettings.adapter)
  return _internal_mutable_adapter();
}

// repeated .arrus.proto.Us4RSettings.ChannelsMask channels_mask = 5;
inline int Us4RSettings::_internal_channels_mask_size() const {
  return channels_mask_.size();
}
inline int Us4RSettings::channels_mask_size() const {
  return _internal_channels_mask_size();
}
inline void Us4RSettings::clear_channels_mask() {
  channels_mask_.Clear();
}
inline ::arrus::proto::Us4RSettings_ChannelsMask* Us4RSettings::mutable_channels_mask(int index) {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4RSettings.channels_mask)
  return channels_mask_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4RSettings_ChannelsMask >*
Us4RSettings::mutable_channels_mask() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.Us4RSettings.channels_mask)
  return &channels_mask_;
}
inline const ::arrus::proto::Us4RSettings_ChannelsMask& Us4RSettings::_internal_channels_mask(int index) const {
  return channels_mask_.Get(index);
}
inline const ::arrus::proto::Us4RSettings_ChannelsMask& Us4RSettings::channels_mask(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.channels_mask)
  return _internal_channels_mask(index);
}
inline ::arrus::proto::Us4RSettings_ChannelsMask* Us4RSettings::_internal_add_channels_mask() {
  return channels_mask_.Add();
}
inline ::arrus::proto::Us4RSettings_ChannelsMask* Us4RSettings::add_channels_mask() {
  // @@protoc_insertion_point(field_add:arrus.proto.Us4RSettings.channels_mask)
  return _internal_add_channels_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4RSettings_ChannelsMask >&
Us4RSettings::channels_mask() const {
  // @@protoc_insertion_point(field_list:arrus.proto.Us4RSettings.channels_mask)
  return channels_mask_;
}

// repeated .arrus.proto.ProbeToAdapterConnection probe_to_adapter_connection = 6;
inline int Us4RSettings::_internal_probe_to_adapter_connection_size() const {
  return probe_to_adapter_connection_.size();
}
inline int Us4RSettings::probe_to_adapter_connection_size() const {
  return _internal_probe_to_adapter_connection_size();
}
inline ::arrus::proto::ProbeToAdapterConnection* Us4RSettings::mutable_probe_to_adapter_connection(int index) {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4RSettings.probe_to_adapter_connection)
  return probe_to_adapter_connection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeToAdapterConnection >*
Us4RSettings::mutable_probe_to_adapter_connection() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.Us4RSettings.probe_to_adapter_connection)
  return &probe_to_adapter_connection_;
}
inline const ::arrus::proto::ProbeToAdapterConnection& Us4RSettings::_internal_probe_to_adapter_connection(int index) const {
  return probe_to_adapter_connection_.Get(index);
}
inline const ::arrus::proto::ProbeToAdapterConnection& Us4RSettings::probe_to_adapter_connection(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.probe_to_adapter_connection)
  return _internal_probe_to_adapter_connection(index);
}
inline ::arrus::proto::ProbeToAdapterConnection* Us4RSettings::_internal_add_probe_to_adapter_connection() {
  return probe_to_adapter_connection_.Add();
}
inline ::arrus::proto::ProbeToAdapterConnection* Us4RSettings::add_probe_to_adapter_connection() {
  // @@protoc_insertion_point(field_add:arrus.proto.Us4RSettings.probe_to_adapter_connection)
  return _internal_add_probe_to_adapter_connection();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeToAdapterConnection >&
Us4RSettings::probe_to_adapter_connection() const {
  // @@protoc_insertion_point(field_list:arrus.proto.Us4RSettings.probe_to_adapter_connection)
  return probe_to_adapter_connection_;
}

// .arrus.proto.RxSettings rx_settings = 7;
inline bool Us4RSettings::_internal_has_rx_settings() const {
  return this != internal_default_instance() && rx_settings_ != nullptr;
}
inline bool Us4RSettings::has_rx_settings() const {
  return _internal_has_rx_settings();
}
inline const ::arrus::proto::RxSettings& Us4RSettings::_internal_rx_settings() const {
  const ::arrus::proto::RxSettings* p = rx_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::arrus::proto::RxSettings*>(
      &::arrus::proto::_RxSettings_default_instance_);
}
inline const ::arrus::proto::RxSettings& Us4RSettings::rx_settings() const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.rx_settings)
  return _internal_rx_settings();
}
inline ::arrus::proto::RxSettings* Us4RSettings::release_rx_settings() {
  // @@protoc_insertion_point(field_release:arrus.proto.Us4RSettings.rx_settings)
  
  ::arrus::proto::RxSettings* temp = rx_settings_;
  rx_settings_ = nullptr;
  return temp;
}
inline ::arrus::proto::RxSettings* Us4RSettings::_internal_mutable_rx_settings() {
  
  if (rx_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrus::proto::RxSettings>(GetArenaNoVirtual());
    rx_settings_ = p;
  }
  return rx_settings_;
}
inline ::arrus::proto::RxSettings* Us4RSettings::mutable_rx_settings() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4RSettings.rx_settings)
  return _internal_mutable_rx_settings();
}
inline void Us4RSettings::set_allocated_rx_settings(::arrus::proto::RxSettings* rx_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rx_settings_);
  }
  if (rx_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rx_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rx_settings, submessage_arena);
    }
    
  } else {
    
  }
  rx_settings_ = rx_settings;
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.Us4RSettings.rx_settings)
}

// repeated .arrus.proto.Us4OEMSettings us4oems = 8;
inline int Us4RSettings::_internal_us4oems_size() const {
  return us4oems_.size();
}
inline int Us4RSettings::us4oems_size() const {
  return _internal_us4oems_size();
}
inline ::arrus::proto::Us4OEMSettings* Us4RSettings::mutable_us4oems(int index) {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4RSettings.us4oems)
  return us4oems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4OEMSettings >*
Us4RSettings::mutable_us4oems() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.Us4RSettings.us4oems)
  return &us4oems_;
}
inline const ::arrus::proto::Us4OEMSettings& Us4RSettings::_internal_us4oems(int index) const {
  return us4oems_.Get(index);
}
inline const ::arrus::proto::Us4OEMSettings& Us4RSettings::us4oems(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.us4oems)
  return _internal_us4oems(index);
}
inline ::arrus::proto::Us4OEMSettings* Us4RSettings::_internal_add_us4oems() {
  return us4oems_.Add();
}
inline ::arrus::proto::Us4OEMSettings* Us4RSettings::add_us4oems() {
  // @@protoc_insertion_point(field_add:arrus.proto.Us4RSettings.us4oems)
  return _internal_add_us4oems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4OEMSettings >&
Us4RSettings::us4oems() const {
  // @@protoc_insertion_point(field_list:arrus.proto.Us4RSettings.us4oems)
  return us4oems_;
}

// .arrus.proto.HVSettings hv = 9;
inline bool Us4RSettings::_internal_has_hv() const {
  return this != internal_default_instance() && hv_ != nullptr;
}
inline bool Us4RSettings::has_hv() const {
  return _internal_has_hv();
}
inline const ::arrus::proto::HVSettings& Us4RSettings::_internal_hv() const {
  const ::arrus::proto::HVSettings* p = hv_;
  return p != nullptr ? *p : *reinterpret_cast<const ::arrus::proto::HVSettings*>(
      &::arrus::proto::_HVSettings_default_instance_);
}
inline const ::arrus::proto::HVSettings& Us4RSettings::hv() const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.hv)
  return _internal_hv();
}
inline ::arrus::proto::HVSettings* Us4RSettings::release_hv() {
  // @@protoc_insertion_point(field_release:arrus.proto.Us4RSettings.hv)
  
  ::arrus::proto::HVSettings* temp = hv_;
  hv_ = nullptr;
  return temp;
}
inline ::arrus::proto::HVSettings* Us4RSettings::_internal_mutable_hv() {
  
  if (hv_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrus::proto::HVSettings>(GetArenaNoVirtual());
    hv_ = p;
  }
  return hv_;
}
inline ::arrus::proto::HVSettings* Us4RSettings::mutable_hv() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4RSettings.hv)
  return _internal_mutable_hv();
}
inline void Us4RSettings::set_allocated_hv(::arrus::proto::HVSettings* hv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hv_);
  }
  if (hv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hv, submessage_arena);
    }
    
  } else {
    
  }
  hv_ = hv;
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.Us4RSettings.hv)
}

// repeated .arrus.proto.Us4RSettings.ChannelsMask us4oem_channels_mask = 10;
inline int Us4RSettings::_internal_us4oem_channels_mask_size() const {
  return us4oem_channels_mask_.size();
}
inline int Us4RSettings::us4oem_channels_mask_size() const {
  return _internal_us4oem_channels_mask_size();
}
inline void Us4RSettings::clear_us4oem_channels_mask() {
  us4oem_channels_mask_.Clear();
}
inline ::arrus::proto::Us4RSettings_ChannelsMask* Us4RSettings::mutable_us4oem_channels_mask(int index) {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4RSettings.us4oem_channels_mask)
  return us4oem_channels_mask_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4RSettings_ChannelsMask >*
Us4RSettings::mutable_us4oem_channels_mask() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.Us4RSettings.us4oem_channels_mask)
  return &us4oem_channels_mask_;
}
inline const ::arrus::proto::Us4RSettings_ChannelsMask& Us4RSettings::_internal_us4oem_channels_mask(int index) const {
  return us4oem_channels_mask_.Get(index);
}
inline const ::arrus::proto::Us4RSettings_ChannelsMask& Us4RSettings::us4oem_channels_mask(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.us4oem_channels_mask)
  return _internal_us4oem_channels_mask(index);
}
inline ::arrus::proto::Us4RSettings_ChannelsMask* Us4RSettings::_internal_add_us4oem_channels_mask() {
  return us4oem_channels_mask_.Add();
}
inline ::arrus::proto::Us4RSettings_ChannelsMask* Us4RSettings::add_us4oem_channels_mask() {
  // @@protoc_insertion_point(field_add:arrus.proto.Us4RSettings.us4oem_channels_mask)
  return _internal_add_us4oem_channels_mask();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Us4RSettings_ChannelsMask >&
Us4RSettings::us4oem_channels_mask() const {
  // @@protoc_insertion_point(field_list:arrus.proto.Us4RSettings.us4oem_channels_mask)
  return us4oem_channels_mask_;
}

// .arrus.proto.Us4OEMSettings.ReprogrammingMode reprogramming_mode = 11;
inline void Us4RSettings::clear_reprogramming_mode() {
  reprogramming_mode_ = 0;
}
inline ::arrus::proto::Us4OEMSettings_ReprogrammingMode Us4RSettings::_internal_reprogramming_mode() const {
  return static_cast< ::arrus::proto::Us4OEMSettings_ReprogrammingMode >(reprogramming_mode_);
}
inline ::arrus::proto::Us4OEMSettings_ReprogrammingMode Us4RSettings::reprogramming_mode() const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.reprogramming_mode)
  return _internal_reprogramming_mode();
}
inline void Us4RSettings::_internal_set_reprogramming_mode(::arrus::proto::Us4OEMSettings_ReprogrammingMode value) {
  
  reprogramming_mode_ = value;
}
inline void Us4RSettings::set_reprogramming_mode(::arrus::proto::Us4OEMSettings_ReprogrammingMode value) {
  _internal_set_reprogramming_mode(value);
  // @@protoc_insertion_point(field_set:arrus.proto.Us4RSettings.reprogramming_mode)
}

// uint32 nus4oems = 12;
inline bool Us4RSettings::_internal_has_nus4oems() const {
  return optional_nus4ems_case() == kNus4Oems;
}
inline void Us4RSettings::set_has_nus4oems() {
  _oneof_case_[1] = kNus4Oems;
}
inline void Us4RSettings::clear_nus4oems() {
  if (_internal_has_nus4oems()) {
    optional_nus4ems_.nus4oems_ = 0u;
    clear_has_optional_nus4ems();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Us4RSettings::_internal_nus4oems() const {
  if (_internal_has_nus4oems()) {
    return optional_nus4ems_.nus4oems_;
  }
  return 0u;
}
inline void Us4RSettings::_internal_set_nus4oems(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_nus4oems()) {
    clear_optional_nus4ems();
    set_has_nus4oems();
  }
  optional_nus4ems_.nus4oems_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Us4RSettings::nus4oems() const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.nus4oems)
  return _internal_nus4oems();
}
inline void Us4RSettings::set_nus4oems(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nus4oems(value);
  // @@protoc_insertion_point(field_set:arrus.proto.Us4RSettings.nus4oems)
}

// repeated uint32 adapter_to_us4r_module_nr = 13;
inline int Us4RSettings::_internal_adapter_to_us4r_module_nr_size() const {
  return adapter_to_us4r_module_nr_.size();
}
inline int Us4RSettings::adapter_to_us4r_module_nr_size() const {
  return _internal_adapter_to_us4r_module_nr_size();
}
inline void Us4RSettings::clear_adapter_to_us4r_module_nr() {
  adapter_to_us4r_module_nr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Us4RSettings::_internal_adapter_to_us4r_module_nr(int index) const {
  return adapter_to_us4r_module_nr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Us4RSettings::adapter_to_us4r_module_nr(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.adapter_to_us4r_module_nr)
  return _internal_adapter_to_us4r_module_nr(index);
}
inline void Us4RSettings::set_adapter_to_us4r_module_nr(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  adapter_to_us4r_module_nr_.Set(index, value);
  // @@protoc_insertion_point(field_set:arrus.proto.Us4RSettings.adapter_to_us4r_module_nr)
}
inline void Us4RSettings::_internal_add_adapter_to_us4r_module_nr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  adapter_to_us4r_module_nr_.Add(value);
}
inline void Us4RSettings::add_adapter_to_us4r_module_nr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_adapter_to_us4r_module_nr(value);
  // @@protoc_insertion_point(field_add:arrus.proto.Us4RSettings.adapter_to_us4r_module_nr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Us4RSettings::_internal_adapter_to_us4r_module_nr() const {
  return adapter_to_us4r_module_nr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Us4RSettings::adapter_to_us4r_module_nr() const {
  // @@protoc_insertion_point(field_list:arrus.proto.Us4RSettings.adapter_to_us4r_module_nr)
  return _internal_adapter_to_us4r_module_nr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Us4RSettings::_internal_mutable_adapter_to_us4r_module_nr() {
  return &adapter_to_us4r_module_nr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Us4RSettings::mutable_adapter_to_us4r_module_nr() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.Us4RSettings.adapter_to_us4r_module_nr)
  return _internal_mutable_adapter_to_us4r_module_nr();
}

// bool external_trigger = 14;
inline void Us4RSettings::clear_external_trigger() {
  external_trigger_ = false;
}
inline bool Us4RSettings::_internal_external_trigger() const {
  return external_trigger_;
}
inline bool Us4RSettings::external_trigger() const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.external_trigger)
  return _internal_external_trigger();
}
inline void Us4RSettings::_internal_set_external_trigger(bool value) {
  
  external_trigger_ = value;
}
inline void Us4RSettings::set_external_trigger(bool value) {
  _internal_set_external_trigger(value);
  // @@protoc_insertion_point(field_set:arrus.proto.Us4RSettings.external_trigger)
}

// uint32 tx_frequency_range = 15;
inline bool Us4RSettings::_internal_has_tx_frequency_range() const {
  return optional_tx_frequency_range_case() == kTxFrequencyRange;
}
inline void Us4RSettings::set_has_tx_frequency_range() {
  _oneof_case_[2] = kTxFrequencyRange;
}
inline void Us4RSettings::clear_tx_frequency_range() {
  if (_internal_has_tx_frequency_range()) {
    optional_tx_frequency_range_.tx_frequency_range_ = 0u;
    clear_has_optional_tx_frequency_range();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Us4RSettings::_internal_tx_frequency_range() const {
  if (_internal_has_tx_frequency_range()) {
    return optional_tx_frequency_range_.tx_frequency_range_;
  }
  return 0u;
}
inline void Us4RSettings::_internal_set_tx_frequency_range(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_tx_frequency_range()) {
    clear_optional_tx_frequency_range();
    set_has_tx_frequency_range();
  }
  optional_tx_frequency_range_.tx_frequency_range_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Us4RSettings::tx_frequency_range() const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.tx_frequency_range)
  return _internal_tx_frequency_range();
}
inline void Us4RSettings::set_tx_frequency_range(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tx_frequency_range(value);
  // @@protoc_insertion_point(field_set:arrus.proto.Us4RSettings.tx_frequency_range)
}

// .arrus.proto.DigitalBackplaneSettings digital_backplane = 16;
inline bool Us4RSettings::_internal_has_digital_backplane() const {
  return this != internal_default_instance() && digital_backplane_ != nullptr;
}
inline bool Us4RSettings::has_digital_backplane() const {
  return _internal_has_digital_backplane();
}
inline const ::arrus::proto::DigitalBackplaneSettings& Us4RSettings::_internal_digital_backplane() const {
  const ::arrus::proto::DigitalBackplaneSettings* p = digital_backplane_;
  return p != nullptr ? *p : *reinterpret_cast<const ::arrus::proto::DigitalBackplaneSettings*>(
      &::arrus::proto::_DigitalBackplaneSettings_default_instance_);
}
inline const ::arrus::proto::DigitalBackplaneSettings& Us4RSettings::digital_backplane() const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.digital_backplane)
  return _internal_digital_backplane();
}
inline ::arrus::proto::DigitalBackplaneSettings* Us4RSettings::release_digital_backplane() {
  // @@protoc_insertion_point(field_release:arrus.proto.Us4RSettings.digital_backplane)
  
  ::arrus::proto::DigitalBackplaneSettings* temp = digital_backplane_;
  digital_backplane_ = nullptr;
  return temp;
}
inline ::arrus::proto::DigitalBackplaneSettings* Us4RSettings::_internal_mutable_digital_backplane() {
  
  if (digital_backplane_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrus::proto::DigitalBackplaneSettings>(GetArenaNoVirtual());
    digital_backplane_ = p;
  }
  return digital_backplane_;
}
inline ::arrus::proto::DigitalBackplaneSettings* Us4RSettings::mutable_digital_backplane() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4RSettings.digital_backplane)
  return _internal_mutable_digital_backplane();
}
inline void Us4RSettings::set_allocated_digital_backplane(::arrus::proto::DigitalBackplaneSettings* digital_backplane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(digital_backplane_);
  }
  if (digital_backplane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      digital_backplane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digital_backplane, submessage_arena);
    }
    
  } else {
    
  }
  digital_backplane_ = digital_backplane;
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.Us4RSettings.digital_backplane)
}

// repeated .arrus.proto.Bitstream bitstreams = 17;
inline int Us4RSettings::_internal_bitstreams_size() const {
  return bitstreams_.size();
}
inline int Us4RSettings::bitstreams_size() const {
  return _internal_bitstreams_size();
}
inline ::arrus::proto::Bitstream* Us4RSettings::mutable_bitstreams(int index) {
  // @@protoc_insertion_point(field_mutable:arrus.proto.Us4RSettings.bitstreams)
  return bitstreams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Bitstream >*
Us4RSettings::mutable_bitstreams() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.Us4RSettings.bitstreams)
  return &bitstreams_;
}
inline const ::arrus::proto::Bitstream& Us4RSettings::_internal_bitstreams(int index) const {
  return bitstreams_.Get(index);
}
inline const ::arrus::proto::Bitstream& Us4RSettings::bitstreams(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.Us4RSettings.bitstreams)
  return _internal_bitstreams(index);
}
inline ::arrus::proto::Bitstream* Us4RSettings::_internal_add_bitstreams() {
  return bitstreams_.Add();
}
inline ::arrus::proto::Bitstream* Us4RSettings::add_bitstreams() {
  // @@protoc_insertion_point(field_add:arrus.proto.Us4RSettings.bitstreams)
  return _internal_add_bitstreams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::Bitstream >&
Us4RSettings::bitstreams() const {
  // @@protoc_insertion_point(field_list:arrus.proto.Us4RSettings.bitstreams)
  return bitstreams_;
}

inline bool Us4RSettings::has_one_of_adapter_representation() const {
  return one_of_adapter_representation_case() != ONE_OF_ADAPTER_REPRESENTATION_NOT_SET;
}
inline void Us4RSettings::clear_has_one_of_adapter_representation() {
  _oneof_case_[0] = ONE_OF_ADAPTER_REPRESENTATION_NOT_SET;
}
inline bool Us4RSettings::has_optional_nus4ems() const {
  return optional_nus4ems_case() != OPTIONAL_NUS4EMS_NOT_SET;
}
inline void Us4RSettings::clear_has_optional_nus4ems() {
  _oneof_case_[1] = OPTIONAL_NUS4EMS_NOT_SET;
}
inline bool Us4RSettings::has_optional_tx_frequency_range() const {
  return optional_tx_frequency_range_case() != OPTIONAL_TX_FREQUENCY_RANGE_NOT_SET;
}
inline void Us4RSettings::clear_has_optional_tx_frequency_range() {
  _oneof_case_[2] = OPTIONAL_TX_FREQUENCY_RANGE_NOT_SET;
}
inline Us4RSettings::OneOfAdapterRepresentationCase Us4RSettings::one_of_adapter_representation_case() const {
  return Us4RSettings::OneOfAdapterRepresentationCase(_oneof_case_[0]);
}
inline Us4RSettings::OptionalNus4EmsCase Us4RSettings::optional_nus4ems_case() const {
  return Us4RSettings::OptionalNus4EmsCase(_oneof_case_[1]);
}
inline Us4RSettings::OptionalTxFrequencyRangeCase Us4RSettings::optional_tx_frequency_range_case() const {
  return Us4RSettings::OptionalTxFrequencyRangeCase(_oneof_case_[2]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace arrus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fus4r_2fUs4RSettings_2eproto
