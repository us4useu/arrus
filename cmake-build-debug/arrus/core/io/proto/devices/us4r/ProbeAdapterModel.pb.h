// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/devices/us4r/ProbeAdapterModel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "io/proto/common/IntervalInteger.pb.h"
#include "io/proto/devices/us4r/IOSettings.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto;
namespace arrus {
namespace proto {
class ProbeAdapterModel;
class ProbeAdapterModelDefaultTypeInternal;
extern ProbeAdapterModelDefaultTypeInternal _ProbeAdapterModel_default_instance_;
class ProbeAdapterModel_ChannelMapping;
class ProbeAdapterModel_ChannelMappingDefaultTypeInternal;
extern ProbeAdapterModel_ChannelMappingDefaultTypeInternal _ProbeAdapterModel_ChannelMapping_default_instance_;
class ProbeAdapterModel_ChannelMappingRegion;
class ProbeAdapterModel_ChannelMappingRegionDefaultTypeInternal;
extern ProbeAdapterModel_ChannelMappingRegionDefaultTypeInternal _ProbeAdapterModel_ChannelMappingRegion_default_instance_;
class ProbeAdapterModel_Id;
class ProbeAdapterModel_IdDefaultTypeInternal;
extern ProbeAdapterModel_IdDefaultTypeInternal _ProbeAdapterModel_Id_default_instance_;
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> ::arrus::proto::ProbeAdapterModel* Arena::CreateMaybeMessage<::arrus::proto::ProbeAdapterModel>(Arena*);
template<> ::arrus::proto::ProbeAdapterModel_ChannelMapping* Arena::CreateMaybeMessage<::arrus::proto::ProbeAdapterModel_ChannelMapping>(Arena*);
template<> ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion* Arena::CreateMaybeMessage<::arrus::proto::ProbeAdapterModel_ChannelMappingRegion>(Arena*);
template<> ::arrus::proto::ProbeAdapterModel_Id* Arena::CreateMaybeMessage<::arrus::proto::ProbeAdapterModel_Id>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace arrus {
namespace proto {

// ===================================================================

class ProbeAdapterModel_Id :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrus.proto.ProbeAdapterModel.Id) */ {
 public:
  ProbeAdapterModel_Id();
  virtual ~ProbeAdapterModel_Id();

  ProbeAdapterModel_Id(const ProbeAdapterModel_Id& from);
  ProbeAdapterModel_Id(ProbeAdapterModel_Id&& from) noexcept
    : ProbeAdapterModel_Id() {
    *this = ::std::move(from);
  }

  inline ProbeAdapterModel_Id& operator=(const ProbeAdapterModel_Id& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbeAdapterModel_Id& operator=(ProbeAdapterModel_Id&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProbeAdapterModel_Id& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProbeAdapterModel_Id* internal_default_instance() {
    return reinterpret_cast<const ProbeAdapterModel_Id*>(
               &_ProbeAdapterModel_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProbeAdapterModel_Id& a, ProbeAdapterModel_Id& b) {
    a.Swap(&b);
  }
  inline void Swap(ProbeAdapterModel_Id* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProbeAdapterModel_Id* New() const final {
    return CreateMaybeMessage<ProbeAdapterModel_Id>(nullptr);
  }

  ProbeAdapterModel_Id* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProbeAdapterModel_Id>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProbeAdapterModel_Id& from);
  void MergeFrom(const ProbeAdapterModel_Id& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProbeAdapterModel_Id* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrus.proto.ProbeAdapterModel.Id";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto);
    return ::descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManufacturerFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string manufacturer = 1;
  void clear_manufacturer();
  const std::string& manufacturer() const;
  void set_manufacturer(const std::string& value);
  void set_manufacturer(std::string&& value);
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  std::string* mutable_manufacturer();
  std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:arrus.proto.ProbeAdapterModel.Id)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto;
};
// -------------------------------------------------------------------

class ProbeAdapterModel_ChannelMappingRegion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrus.proto.ProbeAdapterModel.ChannelMappingRegion) */ {
 public:
  ProbeAdapterModel_ChannelMappingRegion();
  virtual ~ProbeAdapterModel_ChannelMappingRegion();

  ProbeAdapterModel_ChannelMappingRegion(const ProbeAdapterModel_ChannelMappingRegion& from);
  ProbeAdapterModel_ChannelMappingRegion(ProbeAdapterModel_ChannelMappingRegion&& from) noexcept
    : ProbeAdapterModel_ChannelMappingRegion() {
    *this = ::std::move(from);
  }

  inline ProbeAdapterModel_ChannelMappingRegion& operator=(const ProbeAdapterModel_ChannelMappingRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbeAdapterModel_ChannelMappingRegion& operator=(ProbeAdapterModel_ChannelMappingRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProbeAdapterModel_ChannelMappingRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProbeAdapterModel_ChannelMappingRegion* internal_default_instance() {
    return reinterpret_cast<const ProbeAdapterModel_ChannelMappingRegion*>(
               &_ProbeAdapterModel_ChannelMappingRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProbeAdapterModel_ChannelMappingRegion& a, ProbeAdapterModel_ChannelMappingRegion& b) {
    a.Swap(&b);
  }
  inline void Swap(ProbeAdapterModel_ChannelMappingRegion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProbeAdapterModel_ChannelMappingRegion* New() const final {
    return CreateMaybeMessage<ProbeAdapterModel_ChannelMappingRegion>(nullptr);
  }

  ProbeAdapterModel_ChannelMappingRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProbeAdapterModel_ChannelMappingRegion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProbeAdapterModel_ChannelMappingRegion& from);
  void MergeFrom(const ProbeAdapterModel_ChannelMappingRegion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProbeAdapterModel_ChannelMappingRegion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrus.proto.ProbeAdapterModel.ChannelMappingRegion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto);
    return ::descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 2,
    kRegionFieldNumber = 3,
    kUs4OemFieldNumber = 1,
  };
  // repeated uint32 channels = 2;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_channels() const;
  void _internal_add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_channels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 channels(int index) const;
  void set_channels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_channels();

  // .arrus.proto.IntervalInteger region = 3;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const ::arrus::proto::IntervalInteger& region() const;
  ::arrus::proto::IntervalInteger* release_region();
  ::arrus::proto::IntervalInteger* mutable_region();
  void set_allocated_region(::arrus::proto::IntervalInteger* region);
  private:
  const ::arrus::proto::IntervalInteger& _internal_region() const;
  ::arrus::proto::IntervalInteger* _internal_mutable_region();
  public:

  // uint32 us4oem = 1;
  void clear_us4oem();
  ::PROTOBUF_NAMESPACE_ID::uint32 us4oem() const;
  void set_us4oem(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_us4oem() const;
  void _internal_set_us4oem(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:arrus.proto.ProbeAdapterModel.ChannelMappingRegion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > channels_;
  mutable std::atomic<int> _channels_cached_byte_size_;
  ::arrus::proto::IntervalInteger* region_;
  ::PROTOBUF_NAMESPACE_ID::uint32 us4oem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto;
};
// -------------------------------------------------------------------

class ProbeAdapterModel_ChannelMapping :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrus.proto.ProbeAdapterModel.ChannelMapping) */ {
 public:
  ProbeAdapterModel_ChannelMapping();
  virtual ~ProbeAdapterModel_ChannelMapping();

  ProbeAdapterModel_ChannelMapping(const ProbeAdapterModel_ChannelMapping& from);
  ProbeAdapterModel_ChannelMapping(ProbeAdapterModel_ChannelMapping&& from) noexcept
    : ProbeAdapterModel_ChannelMapping() {
    *this = ::std::move(from);
  }

  inline ProbeAdapterModel_ChannelMapping& operator=(const ProbeAdapterModel_ChannelMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbeAdapterModel_ChannelMapping& operator=(ProbeAdapterModel_ChannelMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProbeAdapterModel_ChannelMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProbeAdapterModel_ChannelMapping* internal_default_instance() {
    return reinterpret_cast<const ProbeAdapterModel_ChannelMapping*>(
               &_ProbeAdapterModel_ChannelMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProbeAdapterModel_ChannelMapping& a, ProbeAdapterModel_ChannelMapping& b) {
    a.Swap(&b);
  }
  inline void Swap(ProbeAdapterModel_ChannelMapping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProbeAdapterModel_ChannelMapping* New() const final {
    return CreateMaybeMessage<ProbeAdapterModel_ChannelMapping>(nullptr);
  }

  ProbeAdapterModel_ChannelMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProbeAdapterModel_ChannelMapping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProbeAdapterModel_ChannelMapping& from);
  void MergeFrom(const ProbeAdapterModel_ChannelMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProbeAdapterModel_ChannelMapping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrus.proto.ProbeAdapterModel.ChannelMapping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto);
    return ::descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUs4OemsFieldNumber = 1,
    kChannelsFieldNumber = 2,
  };
  // repeated uint32 us4oems = 1;
  int us4oems_size() const;
  private:
  int _internal_us4oems_size() const;
  public:
  void clear_us4oems();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_us4oems(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_us4oems() const;
  void _internal_add_us4oems(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_us4oems();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 us4oems(int index) const;
  void set_us4oems(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_us4oems(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      us4oems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_us4oems();

  // repeated uint32 channels = 2;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_channels() const;
  void _internal_add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_channels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 channels(int index) const;
  void set_channels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_channels();

  // @@protoc_insertion_point(class_scope:arrus.proto.ProbeAdapterModel.ChannelMapping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > us4oems_;
  mutable std::atomic<int> _us4oems_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > channels_;
  mutable std::atomic<int> _channels_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto;
};
// -------------------------------------------------------------------

class ProbeAdapterModel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrus.proto.ProbeAdapterModel) */ {
 public:
  ProbeAdapterModel();
  virtual ~ProbeAdapterModel();

  ProbeAdapterModel(const ProbeAdapterModel& from);
  ProbeAdapterModel(ProbeAdapterModel&& from) noexcept
    : ProbeAdapterModel() {
    *this = ::std::move(from);
  }

  inline ProbeAdapterModel& operator=(const ProbeAdapterModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbeAdapterModel& operator=(ProbeAdapterModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProbeAdapterModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProbeAdapterModel* internal_default_instance() {
    return reinterpret_cast<const ProbeAdapterModel*>(
               &_ProbeAdapterModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProbeAdapterModel& a, ProbeAdapterModel& b) {
    a.Swap(&b);
  }
  inline void Swap(ProbeAdapterModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProbeAdapterModel* New() const final {
    return CreateMaybeMessage<ProbeAdapterModel>(nullptr);
  }

  ProbeAdapterModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProbeAdapterModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProbeAdapterModel& from);
  void MergeFrom(const ProbeAdapterModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProbeAdapterModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrus.proto.ProbeAdapterModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto);
    return ::descriptor_table_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProbeAdapterModel_Id Id;
  typedef ProbeAdapterModel_ChannelMappingRegion ChannelMappingRegion;
  typedef ProbeAdapterModel_ChannelMapping ChannelMapping;

  // accessors -------------------------------------------------------

  enum : int {
    kChannelMappingRegionsFieldNumber = 4,
    kIdFieldNumber = 1,
    kChannelMappingFieldNumber = 3,
    kIoSettingsFieldNumber = 5,
    kNChannelsFieldNumber = 2,
  };
  // repeated .arrus.proto.ProbeAdapterModel.ChannelMappingRegion channel_mapping_regions = 4;
  int channel_mapping_regions_size() const;
  private:
  int _internal_channel_mapping_regions_size() const;
  public:
  void clear_channel_mapping_regions();
  ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion* mutable_channel_mapping_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion >*
      mutable_channel_mapping_regions();
  private:
  const ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion& _internal_channel_mapping_regions(int index) const;
  ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion* _internal_add_channel_mapping_regions();
  public:
  const ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion& channel_mapping_regions(int index) const;
  ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion* add_channel_mapping_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion >&
      channel_mapping_regions() const;

  // .arrus.proto.ProbeAdapterModel.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::arrus::proto::ProbeAdapterModel_Id& id() const;
  ::arrus::proto::ProbeAdapterModel_Id* release_id();
  ::arrus::proto::ProbeAdapterModel_Id* mutable_id();
  void set_allocated_id(::arrus::proto::ProbeAdapterModel_Id* id);
  private:
  const ::arrus::proto::ProbeAdapterModel_Id& _internal_id() const;
  ::arrus::proto::ProbeAdapterModel_Id* _internal_mutable_id();
  public:

  // .arrus.proto.ProbeAdapterModel.ChannelMapping channel_mapping = 3;
  bool has_channel_mapping() const;
  private:
  bool _internal_has_channel_mapping() const;
  public:
  void clear_channel_mapping();
  const ::arrus::proto::ProbeAdapterModel_ChannelMapping& channel_mapping() const;
  ::arrus::proto::ProbeAdapterModel_ChannelMapping* release_channel_mapping();
  ::arrus::proto::ProbeAdapterModel_ChannelMapping* mutable_channel_mapping();
  void set_allocated_channel_mapping(::arrus::proto::ProbeAdapterModel_ChannelMapping* channel_mapping);
  private:
  const ::arrus::proto::ProbeAdapterModel_ChannelMapping& _internal_channel_mapping() const;
  ::arrus::proto::ProbeAdapterModel_ChannelMapping* _internal_mutable_channel_mapping();
  public:

  // .arrus.proto.IOSettings io_settings = 5;
  bool has_io_settings() const;
  private:
  bool _internal_has_io_settings() const;
  public:
  void clear_io_settings();
  const ::arrus::proto::IOSettings& io_settings() const;
  ::arrus::proto::IOSettings* release_io_settings();
  ::arrus::proto::IOSettings* mutable_io_settings();
  void set_allocated_io_settings(::arrus::proto::IOSettings* io_settings);
  private:
  const ::arrus::proto::IOSettings& _internal_io_settings() const;
  ::arrus::proto::IOSettings* _internal_mutable_io_settings();
  public:

  // uint32 n_channels = 2;
  void clear_n_channels();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_channels() const;
  void set_n_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_channels() const;
  void _internal_set_n_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:arrus.proto.ProbeAdapterModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion > channel_mapping_regions_;
  ::arrus::proto::ProbeAdapterModel_Id* id_;
  ::arrus::proto::ProbeAdapterModel_ChannelMapping* channel_mapping_;
  ::arrus::proto::IOSettings* io_settings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProbeAdapterModel_Id

// string manufacturer = 1;
inline void ProbeAdapterModel_Id::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProbeAdapterModel_Id::manufacturer() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeAdapterModel.Id.manufacturer)
  return _internal_manufacturer();
}
inline void ProbeAdapterModel_Id::set_manufacturer(const std::string& value) {
  _internal_set_manufacturer(value);
  // @@protoc_insertion_point(field_set:arrus.proto.ProbeAdapterModel.Id.manufacturer)
}
inline std::string* ProbeAdapterModel_Id::mutable_manufacturer() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.ProbeAdapterModel.Id.manufacturer)
  return _internal_mutable_manufacturer();
}
inline const std::string& ProbeAdapterModel_Id::_internal_manufacturer() const {
  return manufacturer_.GetNoArena();
}
inline void ProbeAdapterModel_Id::_internal_set_manufacturer(const std::string& value) {
  
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProbeAdapterModel_Id::set_manufacturer(std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arrus.proto.ProbeAdapterModel.Id.manufacturer)
}
inline void ProbeAdapterModel_Id::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arrus.proto.ProbeAdapterModel.Id.manufacturer)
}
inline void ProbeAdapterModel_Id::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arrus.proto.ProbeAdapterModel.Id.manufacturer)
}
inline std::string* ProbeAdapterModel_Id::_internal_mutable_manufacturer() {
  
  return manufacturer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProbeAdapterModel_Id::release_manufacturer() {
  // @@protoc_insertion_point(field_release:arrus.proto.ProbeAdapterModel.Id.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProbeAdapterModel_Id::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.ProbeAdapterModel.Id.manufacturer)
}

// string name = 2;
inline void ProbeAdapterModel_Id::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProbeAdapterModel_Id::name() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeAdapterModel.Id.name)
  return _internal_name();
}
inline void ProbeAdapterModel_Id::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:arrus.proto.ProbeAdapterModel.Id.name)
}
inline std::string* ProbeAdapterModel_Id::mutable_name() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.ProbeAdapterModel.Id.name)
  return _internal_mutable_name();
}
inline const std::string& ProbeAdapterModel_Id::_internal_name() const {
  return name_.GetNoArena();
}
inline void ProbeAdapterModel_Id::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProbeAdapterModel_Id::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arrus.proto.ProbeAdapterModel.Id.name)
}
inline void ProbeAdapterModel_Id::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arrus.proto.ProbeAdapterModel.Id.name)
}
inline void ProbeAdapterModel_Id::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arrus.proto.ProbeAdapterModel.Id.name)
}
inline std::string* ProbeAdapterModel_Id::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProbeAdapterModel_Id::release_name() {
  // @@protoc_insertion_point(field_release:arrus.proto.ProbeAdapterModel.Id.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProbeAdapterModel_Id::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.ProbeAdapterModel.Id.name)
}

// -------------------------------------------------------------------

// ProbeAdapterModel_ChannelMappingRegion

// uint32 us4oem = 1;
inline void ProbeAdapterModel_ChannelMappingRegion::clear_us4oem() {
  us4oem_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProbeAdapterModel_ChannelMappingRegion::_internal_us4oem() const {
  return us4oem_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProbeAdapterModel_ChannelMappingRegion::us4oem() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeAdapterModel.ChannelMappingRegion.us4oem)
  return _internal_us4oem();
}
inline void ProbeAdapterModel_ChannelMappingRegion::_internal_set_us4oem(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  us4oem_ = value;
}
inline void ProbeAdapterModel_ChannelMappingRegion::set_us4oem(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_us4oem(value);
  // @@protoc_insertion_point(field_set:arrus.proto.ProbeAdapterModel.ChannelMappingRegion.us4oem)
}

// repeated uint32 channels = 2;
inline int ProbeAdapterModel_ChannelMappingRegion::_internal_channels_size() const {
  return channels_.size();
}
inline int ProbeAdapterModel_ChannelMappingRegion::channels_size() const {
  return _internal_channels_size();
}
inline void ProbeAdapterModel_ChannelMappingRegion::clear_channels() {
  channels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProbeAdapterModel_ChannelMappingRegion::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProbeAdapterModel_ChannelMappingRegion::channels(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeAdapterModel.ChannelMappingRegion.channels)
  return _internal_channels(index);
}
inline void ProbeAdapterModel_ChannelMappingRegion::set_channels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:arrus.proto.ProbeAdapterModel.ChannelMappingRegion.channels)
}
inline void ProbeAdapterModel_ChannelMappingRegion::_internal_add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channels_.Add(value);
}
inline void ProbeAdapterModel_ChannelMappingRegion::add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_channels(value);
  // @@protoc_insertion_point(field_add:arrus.proto.ProbeAdapterModel.ChannelMappingRegion.channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProbeAdapterModel_ChannelMappingRegion::_internal_channels() const {
  return channels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProbeAdapterModel_ChannelMappingRegion::channels() const {
  // @@protoc_insertion_point(field_list:arrus.proto.ProbeAdapterModel.ChannelMappingRegion.channels)
  return _internal_channels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProbeAdapterModel_ChannelMappingRegion::_internal_mutable_channels() {
  return &channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProbeAdapterModel_ChannelMappingRegion::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.ProbeAdapterModel.ChannelMappingRegion.channels)
  return _internal_mutable_channels();
}

// .arrus.proto.IntervalInteger region = 3;
inline bool ProbeAdapterModel_ChannelMappingRegion::_internal_has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline bool ProbeAdapterModel_ChannelMappingRegion::has_region() const {
  return _internal_has_region();
}
inline const ::arrus::proto::IntervalInteger& ProbeAdapterModel_ChannelMappingRegion::_internal_region() const {
  const ::arrus::proto::IntervalInteger* p = region_;
  return p != nullptr ? *p : *reinterpret_cast<const ::arrus::proto::IntervalInteger*>(
      &::arrus::proto::_IntervalInteger_default_instance_);
}
inline const ::arrus::proto::IntervalInteger& ProbeAdapterModel_ChannelMappingRegion::region() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeAdapterModel.ChannelMappingRegion.region)
  return _internal_region();
}
inline ::arrus::proto::IntervalInteger* ProbeAdapterModel_ChannelMappingRegion::release_region() {
  // @@protoc_insertion_point(field_release:arrus.proto.ProbeAdapterModel.ChannelMappingRegion.region)
  
  ::arrus::proto::IntervalInteger* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::arrus::proto::IntervalInteger* ProbeAdapterModel_ChannelMappingRegion::_internal_mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrus::proto::IntervalInteger>(GetArenaNoVirtual());
    region_ = p;
  }
  return region_;
}
inline ::arrus::proto::IntervalInteger* ProbeAdapterModel_ChannelMappingRegion::mutable_region() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.ProbeAdapterModel.ChannelMappingRegion.region)
  return _internal_mutable_region();
}
inline void ProbeAdapterModel_ChannelMappingRegion::set_allocated_region(::arrus::proto::IntervalInteger* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.ProbeAdapterModel.ChannelMappingRegion.region)
}

// -------------------------------------------------------------------

// ProbeAdapterModel_ChannelMapping

// repeated uint32 us4oems = 1;
inline int ProbeAdapterModel_ChannelMapping::_internal_us4oems_size() const {
  return us4oems_.size();
}
inline int ProbeAdapterModel_ChannelMapping::us4oems_size() const {
  return _internal_us4oems_size();
}
inline void ProbeAdapterModel_ChannelMapping::clear_us4oems() {
  us4oems_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProbeAdapterModel_ChannelMapping::_internal_us4oems(int index) const {
  return us4oems_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProbeAdapterModel_ChannelMapping::us4oems(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeAdapterModel.ChannelMapping.us4oems)
  return _internal_us4oems(index);
}
inline void ProbeAdapterModel_ChannelMapping::set_us4oems(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  us4oems_.Set(index, value);
  // @@protoc_insertion_point(field_set:arrus.proto.ProbeAdapterModel.ChannelMapping.us4oems)
}
inline void ProbeAdapterModel_ChannelMapping::_internal_add_us4oems(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  us4oems_.Add(value);
}
inline void ProbeAdapterModel_ChannelMapping::add_us4oems(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_us4oems(value);
  // @@protoc_insertion_point(field_add:arrus.proto.ProbeAdapterModel.ChannelMapping.us4oems)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProbeAdapterModel_ChannelMapping::_internal_us4oems() const {
  return us4oems_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProbeAdapterModel_ChannelMapping::us4oems() const {
  // @@protoc_insertion_point(field_list:arrus.proto.ProbeAdapterModel.ChannelMapping.us4oems)
  return _internal_us4oems();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProbeAdapterModel_ChannelMapping::_internal_mutable_us4oems() {
  return &us4oems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProbeAdapterModel_ChannelMapping::mutable_us4oems() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.ProbeAdapterModel.ChannelMapping.us4oems)
  return _internal_mutable_us4oems();
}

// repeated uint32 channels = 2;
inline int ProbeAdapterModel_ChannelMapping::_internal_channels_size() const {
  return channels_.size();
}
inline int ProbeAdapterModel_ChannelMapping::channels_size() const {
  return _internal_channels_size();
}
inline void ProbeAdapterModel_ChannelMapping::clear_channels() {
  channels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProbeAdapterModel_ChannelMapping::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProbeAdapterModel_ChannelMapping::channels(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeAdapterModel.ChannelMapping.channels)
  return _internal_channels(index);
}
inline void ProbeAdapterModel_ChannelMapping::set_channels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:arrus.proto.ProbeAdapterModel.ChannelMapping.channels)
}
inline void ProbeAdapterModel_ChannelMapping::_internal_add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  channels_.Add(value);
}
inline void ProbeAdapterModel_ChannelMapping::add_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_channels(value);
  // @@protoc_insertion_point(field_add:arrus.proto.ProbeAdapterModel.ChannelMapping.channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProbeAdapterModel_ChannelMapping::_internal_channels() const {
  return channels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProbeAdapterModel_ChannelMapping::channels() const {
  // @@protoc_insertion_point(field_list:arrus.proto.ProbeAdapterModel.ChannelMapping.channels)
  return _internal_channels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProbeAdapterModel_ChannelMapping::_internal_mutable_channels() {
  return &channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProbeAdapterModel_ChannelMapping::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.ProbeAdapterModel.ChannelMapping.channels)
  return _internal_mutable_channels();
}

// -------------------------------------------------------------------

// ProbeAdapterModel

// .arrus.proto.ProbeAdapterModel.Id id = 1;
inline bool ProbeAdapterModel::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ProbeAdapterModel::has_id() const {
  return _internal_has_id();
}
inline void ProbeAdapterModel::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::arrus::proto::ProbeAdapterModel_Id& ProbeAdapterModel::_internal_id() const {
  const ::arrus::proto::ProbeAdapterModel_Id* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::arrus::proto::ProbeAdapterModel_Id*>(
      &::arrus::proto::_ProbeAdapterModel_Id_default_instance_);
}
inline const ::arrus::proto::ProbeAdapterModel_Id& ProbeAdapterModel::id() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeAdapterModel.id)
  return _internal_id();
}
inline ::arrus::proto::ProbeAdapterModel_Id* ProbeAdapterModel::release_id() {
  // @@protoc_insertion_point(field_release:arrus.proto.ProbeAdapterModel.id)
  
  ::arrus::proto::ProbeAdapterModel_Id* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::arrus::proto::ProbeAdapterModel_Id* ProbeAdapterModel::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrus::proto::ProbeAdapterModel_Id>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::arrus::proto::ProbeAdapterModel_Id* ProbeAdapterModel::mutable_id() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.ProbeAdapterModel.id)
  return _internal_mutable_id();
}
inline void ProbeAdapterModel::set_allocated_id(::arrus::proto::ProbeAdapterModel_Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.ProbeAdapterModel.id)
}

// uint32 n_channels = 2;
inline void ProbeAdapterModel::clear_n_channels() {
  n_channels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProbeAdapterModel::_internal_n_channels() const {
  return n_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProbeAdapterModel::n_channels() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeAdapterModel.n_channels)
  return _internal_n_channels();
}
inline void ProbeAdapterModel::_internal_set_n_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_channels_ = value;
}
inline void ProbeAdapterModel::set_n_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_channels(value);
  // @@protoc_insertion_point(field_set:arrus.proto.ProbeAdapterModel.n_channels)
}

// .arrus.proto.ProbeAdapterModel.ChannelMapping channel_mapping = 3;
inline bool ProbeAdapterModel::_internal_has_channel_mapping() const {
  return this != internal_default_instance() && channel_mapping_ != nullptr;
}
inline bool ProbeAdapterModel::has_channel_mapping() const {
  return _internal_has_channel_mapping();
}
inline void ProbeAdapterModel::clear_channel_mapping() {
  if (GetArenaNoVirtual() == nullptr && channel_mapping_ != nullptr) {
    delete channel_mapping_;
  }
  channel_mapping_ = nullptr;
}
inline const ::arrus::proto::ProbeAdapterModel_ChannelMapping& ProbeAdapterModel::_internal_channel_mapping() const {
  const ::arrus::proto::ProbeAdapterModel_ChannelMapping* p = channel_mapping_;
  return p != nullptr ? *p : *reinterpret_cast<const ::arrus::proto::ProbeAdapterModel_ChannelMapping*>(
      &::arrus::proto::_ProbeAdapterModel_ChannelMapping_default_instance_);
}
inline const ::arrus::proto::ProbeAdapterModel_ChannelMapping& ProbeAdapterModel::channel_mapping() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeAdapterModel.channel_mapping)
  return _internal_channel_mapping();
}
inline ::arrus::proto::ProbeAdapterModel_ChannelMapping* ProbeAdapterModel::release_channel_mapping() {
  // @@protoc_insertion_point(field_release:arrus.proto.ProbeAdapterModel.channel_mapping)
  
  ::arrus::proto::ProbeAdapterModel_ChannelMapping* temp = channel_mapping_;
  channel_mapping_ = nullptr;
  return temp;
}
inline ::arrus::proto::ProbeAdapterModel_ChannelMapping* ProbeAdapterModel::_internal_mutable_channel_mapping() {
  
  if (channel_mapping_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrus::proto::ProbeAdapterModel_ChannelMapping>(GetArenaNoVirtual());
    channel_mapping_ = p;
  }
  return channel_mapping_;
}
inline ::arrus::proto::ProbeAdapterModel_ChannelMapping* ProbeAdapterModel::mutable_channel_mapping() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.ProbeAdapterModel.channel_mapping)
  return _internal_mutable_channel_mapping();
}
inline void ProbeAdapterModel::set_allocated_channel_mapping(::arrus::proto::ProbeAdapterModel_ChannelMapping* channel_mapping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_mapping_;
  }
  if (channel_mapping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel_mapping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_mapping, submessage_arena);
    }
    
  } else {
    
  }
  channel_mapping_ = channel_mapping;
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.ProbeAdapterModel.channel_mapping)
}

// repeated .arrus.proto.ProbeAdapterModel.ChannelMappingRegion channel_mapping_regions = 4;
inline int ProbeAdapterModel::_internal_channel_mapping_regions_size() const {
  return channel_mapping_regions_.size();
}
inline int ProbeAdapterModel::channel_mapping_regions_size() const {
  return _internal_channel_mapping_regions_size();
}
inline void ProbeAdapterModel::clear_channel_mapping_regions() {
  channel_mapping_regions_.Clear();
}
inline ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion* ProbeAdapterModel::mutable_channel_mapping_regions(int index) {
  // @@protoc_insertion_point(field_mutable:arrus.proto.ProbeAdapterModel.channel_mapping_regions)
  return channel_mapping_regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion >*
ProbeAdapterModel::mutable_channel_mapping_regions() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.ProbeAdapterModel.channel_mapping_regions)
  return &channel_mapping_regions_;
}
inline const ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion& ProbeAdapterModel::_internal_channel_mapping_regions(int index) const {
  return channel_mapping_regions_.Get(index);
}
inline const ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion& ProbeAdapterModel::channel_mapping_regions(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeAdapterModel.channel_mapping_regions)
  return _internal_channel_mapping_regions(index);
}
inline ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion* ProbeAdapterModel::_internal_add_channel_mapping_regions() {
  return channel_mapping_regions_.Add();
}
inline ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion* ProbeAdapterModel::add_channel_mapping_regions() {
  // @@protoc_insertion_point(field_add:arrus.proto.ProbeAdapterModel.channel_mapping_regions)
  return _internal_add_channel_mapping_regions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arrus::proto::ProbeAdapterModel_ChannelMappingRegion >&
ProbeAdapterModel::channel_mapping_regions() const {
  // @@protoc_insertion_point(field_list:arrus.proto.ProbeAdapterModel.channel_mapping_regions)
  return channel_mapping_regions_;
}

// .arrus.proto.IOSettings io_settings = 5;
inline bool ProbeAdapterModel::_internal_has_io_settings() const {
  return this != internal_default_instance() && io_settings_ != nullptr;
}
inline bool ProbeAdapterModel::has_io_settings() const {
  return _internal_has_io_settings();
}
inline const ::arrus::proto::IOSettings& ProbeAdapterModel::_internal_io_settings() const {
  const ::arrus::proto::IOSettings* p = io_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::arrus::proto::IOSettings*>(
      &::arrus::proto::_IOSettings_default_instance_);
}
inline const ::arrus::proto::IOSettings& ProbeAdapterModel::io_settings() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeAdapterModel.io_settings)
  return _internal_io_settings();
}
inline ::arrus::proto::IOSettings* ProbeAdapterModel::release_io_settings() {
  // @@protoc_insertion_point(field_release:arrus.proto.ProbeAdapterModel.io_settings)
  
  ::arrus::proto::IOSettings* temp = io_settings_;
  io_settings_ = nullptr;
  return temp;
}
inline ::arrus::proto::IOSettings* ProbeAdapterModel::_internal_mutable_io_settings() {
  
  if (io_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrus::proto::IOSettings>(GetArenaNoVirtual());
    io_settings_ = p;
  }
  return io_settings_;
}
inline ::arrus::proto::IOSettings* ProbeAdapterModel::mutable_io_settings() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.ProbeAdapterModel.io_settings)
  return _internal_mutable_io_settings();
}
inline void ProbeAdapterModel::set_allocated_io_settings(::arrus::proto::IOSettings* io_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(io_settings_);
  }
  if (io_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      io_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, io_settings, submessage_arena);
    }
    
  } else {
    
  }
  io_settings_ = io_settings;
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.ProbeAdapterModel.io_settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace arrus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fus4r_2fProbeAdapterModel_2eproto
