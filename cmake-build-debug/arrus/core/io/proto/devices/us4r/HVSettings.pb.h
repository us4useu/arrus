// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/devices/us4r/HVSettings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto;
namespace arrus {
namespace proto {
class HVSettings;
class HVSettingsDefaultTypeInternal;
extern HVSettingsDefaultTypeInternal _HVSettings_default_instance_;
class HVSettings_Id;
class HVSettings_IdDefaultTypeInternal;
extern HVSettings_IdDefaultTypeInternal _HVSettings_Id_default_instance_;
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> ::arrus::proto::HVSettings* Arena::CreateMaybeMessage<::arrus::proto::HVSettings>(Arena*);
template<> ::arrus::proto::HVSettings_Id* Arena::CreateMaybeMessage<::arrus::proto::HVSettings_Id>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace arrus {
namespace proto {

// ===================================================================

class HVSettings_Id :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrus.proto.HVSettings.Id) */ {
 public:
  HVSettings_Id();
  virtual ~HVSettings_Id();

  HVSettings_Id(const HVSettings_Id& from);
  HVSettings_Id(HVSettings_Id&& from) noexcept
    : HVSettings_Id() {
    *this = ::std::move(from);
  }

  inline HVSettings_Id& operator=(const HVSettings_Id& from) {
    CopyFrom(from);
    return *this;
  }
  inline HVSettings_Id& operator=(HVSettings_Id&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HVSettings_Id& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HVSettings_Id* internal_default_instance() {
    return reinterpret_cast<const HVSettings_Id*>(
               &_HVSettings_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HVSettings_Id& a, HVSettings_Id& b) {
    a.Swap(&b);
  }
  inline void Swap(HVSettings_Id* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HVSettings_Id* New() const final {
    return CreateMaybeMessage<HVSettings_Id>(nullptr);
  }

  HVSettings_Id* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HVSettings_Id>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HVSettings_Id& from);
  void MergeFrom(const HVSettings_Id& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HVSettings_Id* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrus.proto.HVSettings.Id";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto);
    return ::descriptor_table_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManufacturerFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string manufacturer = 1;
  void clear_manufacturer();
  const std::string& manufacturer() const;
  void set_manufacturer(const std::string& value);
  void set_manufacturer(std::string&& value);
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  std::string* mutable_manufacturer();
  std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:arrus.proto.HVSettings.Id)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto;
};
// -------------------------------------------------------------------

class HVSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrus.proto.HVSettings) */ {
 public:
  HVSettings();
  virtual ~HVSettings();

  HVSettings(const HVSettings& from);
  HVSettings(HVSettings&& from) noexcept
    : HVSettings() {
    *this = ::std::move(from);
  }

  inline HVSettings& operator=(const HVSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline HVSettings& operator=(HVSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HVSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HVSettings* internal_default_instance() {
    return reinterpret_cast<const HVSettings*>(
               &_HVSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HVSettings& a, HVSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(HVSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HVSettings* New() const final {
    return CreateMaybeMessage<HVSettings>(nullptr);
  }

  HVSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HVSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HVSettings& from);
  void MergeFrom(const HVSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HVSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrus.proto.HVSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto);
    return ::descriptor_table_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HVSettings_Id Id;

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 1,
  };
  // .arrus.proto.HVSettings.Id model_id = 1;
  bool has_model_id() const;
  private:
  bool _internal_has_model_id() const;
  public:
  void clear_model_id();
  const ::arrus::proto::HVSettings_Id& model_id() const;
  ::arrus::proto::HVSettings_Id* release_model_id();
  ::arrus::proto::HVSettings_Id* mutable_model_id();
  void set_allocated_model_id(::arrus::proto::HVSettings_Id* model_id);
  private:
  const ::arrus::proto::HVSettings_Id& _internal_model_id() const;
  ::arrus::proto::HVSettings_Id* _internal_mutable_model_id();
  public:

  // @@protoc_insertion_point(class_scope:arrus.proto.HVSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::arrus::proto::HVSettings_Id* model_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HVSettings_Id

// string manufacturer = 1;
inline void HVSettings_Id::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HVSettings_Id::manufacturer() const {
  // @@protoc_insertion_point(field_get:arrus.proto.HVSettings.Id.manufacturer)
  return _internal_manufacturer();
}
inline void HVSettings_Id::set_manufacturer(const std::string& value) {
  _internal_set_manufacturer(value);
  // @@protoc_insertion_point(field_set:arrus.proto.HVSettings.Id.manufacturer)
}
inline std::string* HVSettings_Id::mutable_manufacturer() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.HVSettings.Id.manufacturer)
  return _internal_mutable_manufacturer();
}
inline const std::string& HVSettings_Id::_internal_manufacturer() const {
  return manufacturer_.GetNoArena();
}
inline void HVSettings_Id::_internal_set_manufacturer(const std::string& value) {
  
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HVSettings_Id::set_manufacturer(std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arrus.proto.HVSettings.Id.manufacturer)
}
inline void HVSettings_Id::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arrus.proto.HVSettings.Id.manufacturer)
}
inline void HVSettings_Id::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arrus.proto.HVSettings.Id.manufacturer)
}
inline std::string* HVSettings_Id::_internal_mutable_manufacturer() {
  
  return manufacturer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HVSettings_Id::release_manufacturer() {
  // @@protoc_insertion_point(field_release:arrus.proto.HVSettings.Id.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HVSettings_Id::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.HVSettings.Id.manufacturer)
}

// string name = 2;
inline void HVSettings_Id::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HVSettings_Id::name() const {
  // @@protoc_insertion_point(field_get:arrus.proto.HVSettings.Id.name)
  return _internal_name();
}
inline void HVSettings_Id::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:arrus.proto.HVSettings.Id.name)
}
inline std::string* HVSettings_Id::mutable_name() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.HVSettings.Id.name)
  return _internal_mutable_name();
}
inline const std::string& HVSettings_Id::_internal_name() const {
  return name_.GetNoArena();
}
inline void HVSettings_Id::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HVSettings_Id::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arrus.proto.HVSettings.Id.name)
}
inline void HVSettings_Id::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arrus.proto.HVSettings.Id.name)
}
inline void HVSettings_Id::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arrus.proto.HVSettings.Id.name)
}
inline std::string* HVSettings_Id::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HVSettings_Id::release_name() {
  // @@protoc_insertion_point(field_release:arrus.proto.HVSettings.Id.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HVSettings_Id::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.HVSettings.Id.name)
}

// -------------------------------------------------------------------

// HVSettings

// .arrus.proto.HVSettings.Id model_id = 1;
inline bool HVSettings::_internal_has_model_id() const {
  return this != internal_default_instance() && model_id_ != nullptr;
}
inline bool HVSettings::has_model_id() const {
  return _internal_has_model_id();
}
inline void HVSettings::clear_model_id() {
  if (GetArenaNoVirtual() == nullptr && model_id_ != nullptr) {
    delete model_id_;
  }
  model_id_ = nullptr;
}
inline const ::arrus::proto::HVSettings_Id& HVSettings::_internal_model_id() const {
  const ::arrus::proto::HVSettings_Id* p = model_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::arrus::proto::HVSettings_Id*>(
      &::arrus::proto::_HVSettings_Id_default_instance_);
}
inline const ::arrus::proto::HVSettings_Id& HVSettings::model_id() const {
  // @@protoc_insertion_point(field_get:arrus.proto.HVSettings.model_id)
  return _internal_model_id();
}
inline ::arrus::proto::HVSettings_Id* HVSettings::release_model_id() {
  // @@protoc_insertion_point(field_release:arrus.proto.HVSettings.model_id)
  
  ::arrus::proto::HVSettings_Id* temp = model_id_;
  model_id_ = nullptr;
  return temp;
}
inline ::arrus::proto::HVSettings_Id* HVSettings::_internal_mutable_model_id() {
  
  if (model_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrus::proto::HVSettings_Id>(GetArenaNoVirtual());
    model_id_ = p;
  }
  return model_id_;
}
inline ::arrus::proto::HVSettings_Id* HVSettings::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.HVSettings.model_id)
  return _internal_mutable_model_id();
}
inline void HVSettings::set_allocated_model_id(::arrus::proto::HVSettings_Id* model_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete model_id_;
  }
  if (model_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_id, submessage_arena);
    }
    
  } else {
    
  }
  model_id_ = model_id;
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.HVSettings.model_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace arrus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fus4r_2fHVSettings_2eproto
