// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/devices/us4r/Us4OEMSettings.proto

#include "io/proto/devices/us4r/Us4OEMSettings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fus4r_2fRxSettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RxSettings_io_2fproto_2fdevices_2fus4r_2fRxSettings_2eproto;
namespace arrus {
namespace proto {
class Us4OEMSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Us4OEMSettings> _instance;
} _Us4OEMSettings_default_instance_;
}  // namespace proto
}  // namespace arrus
static void InitDefaultsscc_info_Us4OEMSettings_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_Us4OEMSettings_default_instance_;
    new (ptr) ::arrus::proto::Us4OEMSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::Us4OEMSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Us4OEMSettings_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Us4OEMSettings_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto}, {
      &scc_info_RxSettings_io_2fproto_2fdevices_2fus4r_2fRxSettings_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4OEMSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4OEMSettings, channel_mapping_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4OEMSettings, active_channel_groups_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4OEMSettings, rx_settings_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::Us4OEMSettings, reprogramming_mode_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::arrus::proto::Us4OEMSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_Us4OEMSettings_default_instance_),
};

const char descriptor_table_protodef_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*io/proto/devices/us4r/Us4OEMSettings.p"
  "roto\022\013arrus.proto\032&io/proto/devices/us4r"
  "/RxSettings.proto\"\364\001\n\016Us4OEMSettings\022\027\n\017"
  "channel_mapping\030\001 \003(\r\022\035\n\025active_channel_"
  "groups\030\002 \003(\010\022,\n\013rx_settings\030\003 \001(\0132\027.arru"
  "s.proto.RxSettings\022I\n\022reprogramming_mode"
  "\030\004 \001(\0162-.arrus.proto.Us4OEMSettings.Repr"
  "ogrammingMode\"1\n\021ReprogrammingMode\022\016\n\nSE"
  "QUENTIAL\020\000\022\014\n\010PARALLEL\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto_deps[1] = {
  &::descriptor_table_io_2fproto_2fdevices_2fus4r_2fRxSettings_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto_sccs[1] = {
  &scc_info_Us4OEMSettings_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto_once;
static bool descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto = {
  &descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto_initialized, descriptor_table_protodef_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto, "io/proto/devices/us4r/Us4OEMSettings.proto", 352,
  &descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto_once, descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto_sccs, descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto::offsets,
  file_level_metadata_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto, 1, file_level_enum_descriptors_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto, file_level_service_descriptors_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto), true);
namespace arrus {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Us4OEMSettings_ReprogrammingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto);
  return file_level_enum_descriptors_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto[0];
}
bool Us4OEMSettings_ReprogrammingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Us4OEMSettings_ReprogrammingMode Us4OEMSettings::SEQUENTIAL;
constexpr Us4OEMSettings_ReprogrammingMode Us4OEMSettings::PARALLEL;
constexpr Us4OEMSettings_ReprogrammingMode Us4OEMSettings::ReprogrammingMode_MIN;
constexpr Us4OEMSettings_ReprogrammingMode Us4OEMSettings::ReprogrammingMode_MAX;
constexpr int Us4OEMSettings::ReprogrammingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Us4OEMSettings::InitAsDefaultInstance() {
  ::arrus::proto::_Us4OEMSettings_default_instance_._instance.get_mutable()->rx_settings_ = const_cast< ::arrus::proto::RxSettings*>(
      ::arrus::proto::RxSettings::internal_default_instance());
}
class Us4OEMSettings::_Internal {
 public:
  static const ::arrus::proto::RxSettings& rx_settings(const Us4OEMSettings* msg);
};

const ::arrus::proto::RxSettings&
Us4OEMSettings::_Internal::rx_settings(const Us4OEMSettings* msg) {
  return *msg->rx_settings_;
}
void Us4OEMSettings::clear_rx_settings() {
  if (GetArenaNoVirtual() == nullptr && rx_settings_ != nullptr) {
    delete rx_settings_;
  }
  rx_settings_ = nullptr;
}
Us4OEMSettings::Us4OEMSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.Us4OEMSettings)
}
Us4OEMSettings::Us4OEMSettings(const Us4OEMSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channel_mapping_(from.channel_mapping_),
      active_channel_groups_(from.active_channel_groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rx_settings()) {
    rx_settings_ = new ::arrus::proto::RxSettings(*from.rx_settings_);
  } else {
    rx_settings_ = nullptr;
  }
  reprogramming_mode_ = from.reprogramming_mode_;
  // @@protoc_insertion_point(copy_constructor:arrus.proto.Us4OEMSettings)
}

void Us4OEMSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Us4OEMSettings_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto.base);
  ::memset(&rx_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reprogramming_mode_) -
      reinterpret_cast<char*>(&rx_settings_)) + sizeof(reprogramming_mode_));
}

Us4OEMSettings::~Us4OEMSettings() {
  // @@protoc_insertion_point(destructor:arrus.proto.Us4OEMSettings)
  SharedDtor();
}

void Us4OEMSettings::SharedDtor() {
  if (this != internal_default_instance()) delete rx_settings_;
}

void Us4OEMSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Us4OEMSettings& Us4OEMSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Us4OEMSettings_io_2fproto_2fdevices_2fus4r_2fUs4OEMSettings_2eproto.base);
  return *internal_default_instance();
}


void Us4OEMSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.Us4OEMSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_mapping_.Clear();
  active_channel_groups_.Clear();
  if (GetArenaNoVirtual() == nullptr && rx_settings_ != nullptr) {
    delete rx_settings_;
  }
  rx_settings_ = nullptr;
  reprogramming_mode_ = 0;
  _internal_metadata_.Clear();
}

const char* Us4OEMSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 channel_mapping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_channel_mapping(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_channel_mapping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool active_channel_groups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_active_channel_groups(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_active_channel_groups(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrus.proto.RxSettings rx_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rx_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrus.proto.Us4OEMSettings.ReprogrammingMode reprogramming_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_reprogramming_mode(static_cast<::arrus::proto::Us4OEMSettings_ReprogrammingMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Us4OEMSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.Us4OEMSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 channel_mapping = 1;
  {
    int byte_size = _channel_mapping_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_channel_mapping(), byte_size, target);
    }
  }

  // repeated bool active_channel_groups = 2;
  if (this->_internal_active_channel_groups_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_active_channel_groups(), target);
  }

  // .arrus.proto.RxSettings rx_settings = 3;
  if (this->has_rx_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rx_settings(this), target, stream);
  }

  // .arrus.proto.Us4OEMSettings.ReprogrammingMode reprogramming_mode = 4;
  if (this->reprogramming_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_reprogramming_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.Us4OEMSettings)
  return target;
}

size_t Us4OEMSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.Us4OEMSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 channel_mapping = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->channel_mapping_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channel_mapping_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool active_channel_groups = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_active_channel_groups_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _active_channel_groups_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .arrus.proto.RxSettings rx_settings = 3;
  if (this->has_rx_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rx_settings_);
  }

  // .arrus.proto.Us4OEMSettings.ReprogrammingMode reprogramming_mode = 4;
  if (this->reprogramming_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reprogramming_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Us4OEMSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.Us4OEMSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const Us4OEMSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Us4OEMSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.Us4OEMSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.Us4OEMSettings)
    MergeFrom(*source);
  }
}

void Us4OEMSettings::MergeFrom(const Us4OEMSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.Us4OEMSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_mapping_.MergeFrom(from.channel_mapping_);
  active_channel_groups_.MergeFrom(from.active_channel_groups_);
  if (from.has_rx_settings()) {
    _internal_mutable_rx_settings()->::arrus::proto::RxSettings::MergeFrom(from._internal_rx_settings());
  }
  if (from.reprogramming_mode() != 0) {
    _internal_set_reprogramming_mode(from._internal_reprogramming_mode());
  }
}

void Us4OEMSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.Us4OEMSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Us4OEMSettings::CopyFrom(const Us4OEMSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.Us4OEMSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Us4OEMSettings::IsInitialized() const {
  return true;
}

void Us4OEMSettings::InternalSwap(Us4OEMSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_mapping_.InternalSwap(&other->channel_mapping_);
  active_channel_groups_.InternalSwap(&other->active_channel_groups_);
  swap(rx_settings_, other->rx_settings_);
  swap(reprogramming_mode_, other->reprogramming_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Us4OEMSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::arrus::proto::Us4OEMSettings* Arena::CreateMaybeMessage< ::arrus::proto::Us4OEMSettings >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::Us4OEMSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
