// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/devices/probe/ProbeModel.proto

#include "io/proto/devices/probe/ProbeModel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fcommon_2fIntervalDouble_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntervalDouble_io_2fproto_2fcommon_2fIntervalDouble_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fcommon_2fIntervalInteger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntervalInteger_io_2fproto_2fcommon_2fIntervalInteger_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto;
namespace arrus {
namespace proto {
class ProbeModel_IdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProbeModel_Id> _instance;
} _ProbeModel_Id_default_instance_;
class ProbeModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProbeModel> _instance;
} _ProbeModel_default_instance_;
}  // namespace proto
}  // namespace arrus
static void InitDefaultsscc_info_ProbeModel_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_ProbeModel_default_instance_;
    new (ptr) ::arrus::proto::ProbeModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::ProbeModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProbeModel_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProbeModel_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto}, {
      &scc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.base,
      &scc_info_IntervalDouble_io_2fproto_2fcommon_2fIntervalDouble_2eproto.base,
      &scc_info_IntervalInteger_io_2fproto_2fcommon_2fIntervalInteger_2eproto.base,}};

static void InitDefaultsscc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::arrus::proto::_ProbeModel_Id_default_instance_;
    new (ptr) ::arrus::proto::ProbeModel_Id();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::arrus::proto::ProbeModel_Id::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeModel_Id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeModel_Id, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeModel_Id, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeModel, id_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeModel, n_elements_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeModel, pitch_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeModel, tx_frequency_range_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeModel, voltage_range_),
  PROTOBUF_FIELD_OFFSET(::arrus::proto::ProbeModel, curvature_radius_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::arrus::proto::ProbeModel_Id)},
  { 7, -1, sizeof(::arrus::proto::ProbeModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_ProbeModel_Id_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::arrus::proto::_ProbeModel_default_instance_),
};

const char descriptor_table_protodef_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'io/proto/devices/probe/ProbeModel.prot"
  "o\022\013arrus.proto\032$io/proto/common/Interval"
  "Double.proto\032%io/proto/common/IntervalIn"
  "teger.proto\"\211\002\n\nProbeModel\022&\n\002id\030\001 \001(\0132\032"
  ".arrus.proto.ProbeModel.Id\022\022\n\nn_elements"
  "\030\002 \003(\r\022\r\n\005pitch\030\003 \003(\001\0227\n\022tx_frequency_ra"
  "nge\030\004 \001(\0132\033.arrus.proto.IntervalDouble\0223"
  "\n\rvoltage_range\030\005 \001(\0132\034.arrus.proto.Inte"
  "rvalInteger\022\030\n\020curvature_radius\030\006 \001(\001\032(\n"
  "\002Id\022\024\n\014manufacturer\030\001 \001(\t\022\014\n\004name\030\002 \001(\tb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto_deps[2] = {
  &::descriptor_table_io_2fproto_2fcommon_2fIntervalDouble_2eproto,
  &::descriptor_table_io_2fproto_2fcommon_2fIntervalInteger_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto_sccs[2] = {
  &scc_info_ProbeModel_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.base,
  &scc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto_once;
static bool descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto = {
  &descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto_initialized, descriptor_table_protodef_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto, "io/proto/devices/probe/ProbeModel.proto", 407,
  &descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto_once, descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto_sccs, descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto::offsets,
  file_level_metadata_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto, 2, file_level_enum_descriptors_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto, file_level_service_descriptors_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto), true);
namespace arrus {
namespace proto {

// ===================================================================

void ProbeModel_Id::InitAsDefaultInstance() {
}
class ProbeModel_Id::_Internal {
 public:
};

ProbeModel_Id::ProbeModel_Id()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.ProbeModel.Id)
}
ProbeModel_Id::ProbeModel_Id(const ProbeModel_Id& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_manufacturer().empty()) {
    manufacturer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:arrus.proto.ProbeModel.Id)
}

void ProbeModel_Id::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.base);
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProbeModel_Id::~ProbeModel_Id() {
  // @@protoc_insertion_point(destructor:arrus.proto.ProbeModel.Id)
  SharedDtor();
}

void ProbeModel_Id::SharedDtor() {
  manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProbeModel_Id::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProbeModel_Id& ProbeModel_Id::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProbeModel_Id_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.base);
  return *internal_default_instance();
}


void ProbeModel_Id::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.ProbeModel.Id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ProbeModel_Id::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string manufacturer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "arrus.proto.ProbeModel.Id.manufacturer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "arrus.proto.ProbeModel.Id.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProbeModel_Id::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.ProbeModel.Id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrus.proto.ProbeModel.Id.manufacturer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_manufacturer(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arrus.proto.ProbeModel.Id.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.ProbeModel.Id)
  return target;
}

size_t ProbeModel_Id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.ProbeModel.Id)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbeModel_Id::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.ProbeModel.Id)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbeModel_Id* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProbeModel_Id>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.ProbeModel.Id)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.ProbeModel.Id)
    MergeFrom(*source);
  }
}

void ProbeModel_Id::MergeFrom(const ProbeModel_Id& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.ProbeModel.Id)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void ProbeModel_Id::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.ProbeModel.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeModel_Id::CopyFrom(const ProbeModel_Id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.ProbeModel.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeModel_Id::IsInitialized() const {
  return true;
}

void ProbeModel_Id::InternalSwap(ProbeModel_Id* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  manufacturer_.Swap(&other->manufacturer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProbeModel_Id::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProbeModel::InitAsDefaultInstance() {
  ::arrus::proto::_ProbeModel_default_instance_._instance.get_mutable()->id_ = const_cast< ::arrus::proto::ProbeModel_Id*>(
      ::arrus::proto::ProbeModel_Id::internal_default_instance());
  ::arrus::proto::_ProbeModel_default_instance_._instance.get_mutable()->tx_frequency_range_ = const_cast< ::arrus::proto::IntervalDouble*>(
      ::arrus::proto::IntervalDouble::internal_default_instance());
  ::arrus::proto::_ProbeModel_default_instance_._instance.get_mutable()->voltage_range_ = const_cast< ::arrus::proto::IntervalInteger*>(
      ::arrus::proto::IntervalInteger::internal_default_instance());
}
class ProbeModel::_Internal {
 public:
  static const ::arrus::proto::ProbeModel_Id& id(const ProbeModel* msg);
  static const ::arrus::proto::IntervalDouble& tx_frequency_range(const ProbeModel* msg);
  static const ::arrus::proto::IntervalInteger& voltage_range(const ProbeModel* msg);
};

const ::arrus::proto::ProbeModel_Id&
ProbeModel::_Internal::id(const ProbeModel* msg) {
  return *msg->id_;
}
const ::arrus::proto::IntervalDouble&
ProbeModel::_Internal::tx_frequency_range(const ProbeModel* msg) {
  return *msg->tx_frequency_range_;
}
const ::arrus::proto::IntervalInteger&
ProbeModel::_Internal::voltage_range(const ProbeModel* msg) {
  return *msg->voltage_range_;
}
void ProbeModel::clear_tx_frequency_range() {
  if (GetArenaNoVirtual() == nullptr && tx_frequency_range_ != nullptr) {
    delete tx_frequency_range_;
  }
  tx_frequency_range_ = nullptr;
}
void ProbeModel::clear_voltage_range() {
  if (GetArenaNoVirtual() == nullptr && voltage_range_ != nullptr) {
    delete voltage_range_;
  }
  voltage_range_ = nullptr;
}
ProbeModel::ProbeModel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:arrus.proto.ProbeModel)
}
ProbeModel::ProbeModel(const ProbeModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      n_elements_(from.n_elements_),
      pitch_(from.pitch_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::arrus::proto::ProbeModel_Id(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_tx_frequency_range()) {
    tx_frequency_range_ = new ::arrus::proto::IntervalDouble(*from.tx_frequency_range_);
  } else {
    tx_frequency_range_ = nullptr;
  }
  if (from._internal_has_voltage_range()) {
    voltage_range_ = new ::arrus::proto::IntervalInteger(*from.voltage_range_);
  } else {
    voltage_range_ = nullptr;
  }
  curvature_radius_ = from.curvature_radius_;
  // @@protoc_insertion_point(copy_constructor:arrus.proto.ProbeModel)
}

void ProbeModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProbeModel_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curvature_radius_) -
      reinterpret_cast<char*>(&id_)) + sizeof(curvature_radius_));
}

ProbeModel::~ProbeModel() {
  // @@protoc_insertion_point(destructor:arrus.proto.ProbeModel)
  SharedDtor();
}

void ProbeModel::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete tx_frequency_range_;
  if (this != internal_default_instance()) delete voltage_range_;
}

void ProbeModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProbeModel& ProbeModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProbeModel_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.base);
  return *internal_default_instance();
}


void ProbeModel::Clear() {
// @@protoc_insertion_point(message_clear_start:arrus.proto.ProbeModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n_elements_.Clear();
  pitch_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tx_frequency_range_ != nullptr) {
    delete tx_frequency_range_;
  }
  tx_frequency_range_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voltage_range_ != nullptr) {
    delete voltage_range_;
  }
  voltage_range_ = nullptr;
  curvature_radius_ = 0;
  _internal_metadata_.Clear();
}

const char* ProbeModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .arrus.proto.ProbeModel.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 n_elements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_n_elements(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_n_elements(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double pitch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_pitch(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_pitch(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .arrus.proto.IntervalDouble tx_frequency_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_frequency_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .arrus.proto.IntervalInteger voltage_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltage_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double curvature_radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          curvature_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProbeModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arrus.proto.ProbeModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .arrus.proto.ProbeModel.Id id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // repeated uint32 n_elements = 2;
  {
    int byte_size = _n_elements_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_n_elements(), byte_size, target);
    }
  }

  // repeated double pitch = 3;
  if (this->_internal_pitch_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_pitch(), target);
  }

  // .arrus.proto.IntervalDouble tx_frequency_range = 4;
  if (this->has_tx_frequency_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tx_frequency_range(this), target, stream);
  }

  // .arrus.proto.IntervalInteger voltage_range = 5;
  if (this->has_voltage_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::voltage_range(this), target, stream);
  }

  // double curvature_radius = 6;
  if (!(this->curvature_radius() <= 0 && this->curvature_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_curvature_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arrus.proto.ProbeModel)
  return target;
}

size_t ProbeModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arrus.proto.ProbeModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 n_elements = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->n_elements_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _n_elements_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double pitch = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pitch_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pitch_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .arrus.proto.ProbeModel.Id id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .arrus.proto.IntervalDouble tx_frequency_range = 4;
  if (this->has_tx_frequency_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tx_frequency_range_);
  }

  // .arrus.proto.IntervalInteger voltage_range = 5;
  if (this->has_voltage_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltage_range_);
  }

  // double curvature_radius = 6;
  if (!(this->curvature_radius() <= 0 && this->curvature_radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbeModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:arrus.proto.ProbeModel)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbeModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProbeModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:arrus.proto.ProbeModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:arrus.proto.ProbeModel)
    MergeFrom(*source);
  }
}

void ProbeModel::MergeFrom(const ProbeModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:arrus.proto.ProbeModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  n_elements_.MergeFrom(from.n_elements_);
  pitch_.MergeFrom(from.pitch_);
  if (from.has_id()) {
    _internal_mutable_id()->::arrus::proto::ProbeModel_Id::MergeFrom(from._internal_id());
  }
  if (from.has_tx_frequency_range()) {
    _internal_mutable_tx_frequency_range()->::arrus::proto::IntervalDouble::MergeFrom(from._internal_tx_frequency_range());
  }
  if (from.has_voltage_range()) {
    _internal_mutable_voltage_range()->::arrus::proto::IntervalInteger::MergeFrom(from._internal_voltage_range());
  }
  if (!(from.curvature_radius() <= 0 && from.curvature_radius() >= 0)) {
    _internal_set_curvature_radius(from._internal_curvature_radius());
  }
}

void ProbeModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:arrus.proto.ProbeModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbeModel::CopyFrom(const ProbeModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arrus.proto.ProbeModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbeModel::IsInitialized() const {
  return true;
}

void ProbeModel::InternalSwap(ProbeModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  n_elements_.InternalSwap(&other->n_elements_);
  pitch_.InternalSwap(&other->pitch_);
  swap(id_, other->id_);
  swap(tx_frequency_range_, other->tx_frequency_range_);
  swap(voltage_range_, other->voltage_range_);
  swap(curvature_radius_, other->curvature_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProbeModel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::arrus::proto::ProbeModel_Id* Arena::CreateMaybeMessage< ::arrus::proto::ProbeModel_Id >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::ProbeModel_Id >(arena);
}
template<> PROTOBUF_NOINLINE ::arrus::proto::ProbeModel* Arena::CreateMaybeMessage< ::arrus::proto::ProbeModel >(Arena* arena) {
  return Arena::CreateInternal< ::arrus::proto::ProbeModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
