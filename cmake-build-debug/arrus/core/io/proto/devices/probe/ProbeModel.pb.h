// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/devices/probe/ProbeModel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "io/proto/common/IntervalDouble.pb.h"
#include "io/proto/common/IntervalInteger.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto;
namespace arrus {
namespace proto {
class ProbeModel;
class ProbeModelDefaultTypeInternal;
extern ProbeModelDefaultTypeInternal _ProbeModel_default_instance_;
class ProbeModel_Id;
class ProbeModel_IdDefaultTypeInternal;
extern ProbeModel_IdDefaultTypeInternal _ProbeModel_Id_default_instance_;
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> ::arrus::proto::ProbeModel* Arena::CreateMaybeMessage<::arrus::proto::ProbeModel>(Arena*);
template<> ::arrus::proto::ProbeModel_Id* Arena::CreateMaybeMessage<::arrus::proto::ProbeModel_Id>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace arrus {
namespace proto {

// ===================================================================

class ProbeModel_Id :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrus.proto.ProbeModel.Id) */ {
 public:
  ProbeModel_Id();
  virtual ~ProbeModel_Id();

  ProbeModel_Id(const ProbeModel_Id& from);
  ProbeModel_Id(ProbeModel_Id&& from) noexcept
    : ProbeModel_Id() {
    *this = ::std::move(from);
  }

  inline ProbeModel_Id& operator=(const ProbeModel_Id& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbeModel_Id& operator=(ProbeModel_Id&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProbeModel_Id& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProbeModel_Id* internal_default_instance() {
    return reinterpret_cast<const ProbeModel_Id*>(
               &_ProbeModel_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProbeModel_Id& a, ProbeModel_Id& b) {
    a.Swap(&b);
  }
  inline void Swap(ProbeModel_Id* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProbeModel_Id* New() const final {
    return CreateMaybeMessage<ProbeModel_Id>(nullptr);
  }

  ProbeModel_Id* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProbeModel_Id>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProbeModel_Id& from);
  void MergeFrom(const ProbeModel_Id& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProbeModel_Id* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrus.proto.ProbeModel.Id";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto);
    return ::descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManufacturerFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string manufacturer = 1;
  void clear_manufacturer();
  const std::string& manufacturer() const;
  void set_manufacturer(const std::string& value);
  void set_manufacturer(std::string&& value);
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  std::string* mutable_manufacturer();
  std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:arrus.proto.ProbeModel.Id)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto;
};
// -------------------------------------------------------------------

class ProbeModel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrus.proto.ProbeModel) */ {
 public:
  ProbeModel();
  virtual ~ProbeModel();

  ProbeModel(const ProbeModel& from);
  ProbeModel(ProbeModel&& from) noexcept
    : ProbeModel() {
    *this = ::std::move(from);
  }

  inline ProbeModel& operator=(const ProbeModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbeModel& operator=(ProbeModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProbeModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProbeModel* internal_default_instance() {
    return reinterpret_cast<const ProbeModel*>(
               &_ProbeModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProbeModel& a, ProbeModel& b) {
    a.Swap(&b);
  }
  inline void Swap(ProbeModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProbeModel* New() const final {
    return CreateMaybeMessage<ProbeModel>(nullptr);
  }

  ProbeModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProbeModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProbeModel& from);
  void MergeFrom(const ProbeModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProbeModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrus.proto.ProbeModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto);
    return ::descriptor_table_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProbeModel_Id Id;

  // accessors -------------------------------------------------------

  enum : int {
    kNElementsFieldNumber = 2,
    kPitchFieldNumber = 3,
    kIdFieldNumber = 1,
    kTxFrequencyRangeFieldNumber = 4,
    kVoltageRangeFieldNumber = 5,
    kCurvatureRadiusFieldNumber = 6,
  };
  // repeated uint32 n_elements = 2;
  int n_elements_size() const;
  private:
  int _internal_n_elements_size() const;
  public:
  void clear_n_elements();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_elements(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_n_elements() const;
  void _internal_add_n_elements(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_n_elements();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 n_elements(int index) const;
  void set_n_elements(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_n_elements(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      n_elements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_n_elements();

  // repeated double pitch = 3;
  int pitch_size() const;
  private:
  int _internal_pitch_size() const;
  public:
  void clear_pitch();
  private:
  double _internal_pitch(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_pitch() const;
  void _internal_add_pitch(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_pitch();
  public:
  double pitch(int index) const;
  void set_pitch(int index, double value);
  void add_pitch(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      pitch() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_pitch();

  // .arrus.proto.ProbeModel.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::arrus::proto::ProbeModel_Id& id() const;
  ::arrus::proto::ProbeModel_Id* release_id();
  ::arrus::proto::ProbeModel_Id* mutable_id();
  void set_allocated_id(::arrus::proto::ProbeModel_Id* id);
  private:
  const ::arrus::proto::ProbeModel_Id& _internal_id() const;
  ::arrus::proto::ProbeModel_Id* _internal_mutable_id();
  public:

  // .arrus.proto.IntervalDouble tx_frequency_range = 4;
  bool has_tx_frequency_range() const;
  private:
  bool _internal_has_tx_frequency_range() const;
  public:
  void clear_tx_frequency_range();
  const ::arrus::proto::IntervalDouble& tx_frequency_range() const;
  ::arrus::proto::IntervalDouble* release_tx_frequency_range();
  ::arrus::proto::IntervalDouble* mutable_tx_frequency_range();
  void set_allocated_tx_frequency_range(::arrus::proto::IntervalDouble* tx_frequency_range);
  private:
  const ::arrus::proto::IntervalDouble& _internal_tx_frequency_range() const;
  ::arrus::proto::IntervalDouble* _internal_mutable_tx_frequency_range();
  public:

  // .arrus.proto.IntervalInteger voltage_range = 5;
  bool has_voltage_range() const;
  private:
  bool _internal_has_voltage_range() const;
  public:
  void clear_voltage_range();
  const ::arrus::proto::IntervalInteger& voltage_range() const;
  ::arrus::proto::IntervalInteger* release_voltage_range();
  ::arrus::proto::IntervalInteger* mutable_voltage_range();
  void set_allocated_voltage_range(::arrus::proto::IntervalInteger* voltage_range);
  private:
  const ::arrus::proto::IntervalInteger& _internal_voltage_range() const;
  ::arrus::proto::IntervalInteger* _internal_mutable_voltage_range();
  public:

  // double curvature_radius = 6;
  void clear_curvature_radius();
  double curvature_radius() const;
  void set_curvature_radius(double value);
  private:
  double _internal_curvature_radius() const;
  void _internal_set_curvature_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:arrus.proto.ProbeModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > n_elements_;
  mutable std::atomic<int> _n_elements_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > pitch_;
  mutable std::atomic<int> _pitch_cached_byte_size_;
  ::arrus::proto::ProbeModel_Id* id_;
  ::arrus::proto::IntervalDouble* tx_frequency_range_;
  ::arrus::proto::IntervalInteger* voltage_range_;
  double curvature_radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProbeModel_Id

// string manufacturer = 1;
inline void ProbeModel_Id::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProbeModel_Id::manufacturer() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeModel.Id.manufacturer)
  return _internal_manufacturer();
}
inline void ProbeModel_Id::set_manufacturer(const std::string& value) {
  _internal_set_manufacturer(value);
  // @@protoc_insertion_point(field_set:arrus.proto.ProbeModel.Id.manufacturer)
}
inline std::string* ProbeModel_Id::mutable_manufacturer() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.ProbeModel.Id.manufacturer)
  return _internal_mutable_manufacturer();
}
inline const std::string& ProbeModel_Id::_internal_manufacturer() const {
  return manufacturer_.GetNoArena();
}
inline void ProbeModel_Id::_internal_set_manufacturer(const std::string& value) {
  
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProbeModel_Id::set_manufacturer(std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arrus.proto.ProbeModel.Id.manufacturer)
}
inline void ProbeModel_Id::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arrus.proto.ProbeModel.Id.manufacturer)
}
inline void ProbeModel_Id::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arrus.proto.ProbeModel.Id.manufacturer)
}
inline std::string* ProbeModel_Id::_internal_mutable_manufacturer() {
  
  return manufacturer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProbeModel_Id::release_manufacturer() {
  // @@protoc_insertion_point(field_release:arrus.proto.ProbeModel.Id.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProbeModel_Id::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.ProbeModel.Id.manufacturer)
}

// string name = 2;
inline void ProbeModel_Id::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProbeModel_Id::name() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeModel.Id.name)
  return _internal_name();
}
inline void ProbeModel_Id::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:arrus.proto.ProbeModel.Id.name)
}
inline std::string* ProbeModel_Id::mutable_name() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.ProbeModel.Id.name)
  return _internal_mutable_name();
}
inline const std::string& ProbeModel_Id::_internal_name() const {
  return name_.GetNoArena();
}
inline void ProbeModel_Id::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProbeModel_Id::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arrus.proto.ProbeModel.Id.name)
}
inline void ProbeModel_Id::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arrus.proto.ProbeModel.Id.name)
}
inline void ProbeModel_Id::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arrus.proto.ProbeModel.Id.name)
}
inline std::string* ProbeModel_Id::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProbeModel_Id::release_name() {
  // @@protoc_insertion_point(field_release:arrus.proto.ProbeModel.Id.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProbeModel_Id::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.ProbeModel.Id.name)
}

// -------------------------------------------------------------------

// ProbeModel

// .arrus.proto.ProbeModel.Id id = 1;
inline bool ProbeModel::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ProbeModel::has_id() const {
  return _internal_has_id();
}
inline void ProbeModel::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::arrus::proto::ProbeModel_Id& ProbeModel::_internal_id() const {
  const ::arrus::proto::ProbeModel_Id* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::arrus::proto::ProbeModel_Id*>(
      &::arrus::proto::_ProbeModel_Id_default_instance_);
}
inline const ::arrus::proto::ProbeModel_Id& ProbeModel::id() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeModel.id)
  return _internal_id();
}
inline ::arrus::proto::ProbeModel_Id* ProbeModel::release_id() {
  // @@protoc_insertion_point(field_release:arrus.proto.ProbeModel.id)
  
  ::arrus::proto::ProbeModel_Id* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::arrus::proto::ProbeModel_Id* ProbeModel::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrus::proto::ProbeModel_Id>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::arrus::proto::ProbeModel_Id* ProbeModel::mutable_id() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.ProbeModel.id)
  return _internal_mutable_id();
}
inline void ProbeModel::set_allocated_id(::arrus::proto::ProbeModel_Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.ProbeModel.id)
}

// repeated uint32 n_elements = 2;
inline int ProbeModel::_internal_n_elements_size() const {
  return n_elements_.size();
}
inline int ProbeModel::n_elements_size() const {
  return _internal_n_elements_size();
}
inline void ProbeModel::clear_n_elements() {
  n_elements_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProbeModel::_internal_n_elements(int index) const {
  return n_elements_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProbeModel::n_elements(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeModel.n_elements)
  return _internal_n_elements(index);
}
inline void ProbeModel::set_n_elements(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  n_elements_.Set(index, value);
  // @@protoc_insertion_point(field_set:arrus.proto.ProbeModel.n_elements)
}
inline void ProbeModel::_internal_add_n_elements(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  n_elements_.Add(value);
}
inline void ProbeModel::add_n_elements(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_n_elements(value);
  // @@protoc_insertion_point(field_add:arrus.proto.ProbeModel.n_elements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProbeModel::_internal_n_elements() const {
  return n_elements_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ProbeModel::n_elements() const {
  // @@protoc_insertion_point(field_list:arrus.proto.ProbeModel.n_elements)
  return _internal_n_elements();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProbeModel::_internal_mutable_n_elements() {
  return &n_elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ProbeModel::mutable_n_elements() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.ProbeModel.n_elements)
  return _internal_mutable_n_elements();
}

// repeated double pitch = 3;
inline int ProbeModel::_internal_pitch_size() const {
  return pitch_.size();
}
inline int ProbeModel::pitch_size() const {
  return _internal_pitch_size();
}
inline void ProbeModel::clear_pitch() {
  pitch_.Clear();
}
inline double ProbeModel::_internal_pitch(int index) const {
  return pitch_.Get(index);
}
inline double ProbeModel::pitch(int index) const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeModel.pitch)
  return _internal_pitch(index);
}
inline void ProbeModel::set_pitch(int index, double value) {
  pitch_.Set(index, value);
  // @@protoc_insertion_point(field_set:arrus.proto.ProbeModel.pitch)
}
inline void ProbeModel::_internal_add_pitch(double value) {
  pitch_.Add(value);
}
inline void ProbeModel::add_pitch(double value) {
  _internal_add_pitch(value);
  // @@protoc_insertion_point(field_add:arrus.proto.ProbeModel.pitch)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ProbeModel::_internal_pitch() const {
  return pitch_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ProbeModel::pitch() const {
  // @@protoc_insertion_point(field_list:arrus.proto.ProbeModel.pitch)
  return _internal_pitch();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ProbeModel::_internal_mutable_pitch() {
  return &pitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ProbeModel::mutable_pitch() {
  // @@protoc_insertion_point(field_mutable_list:arrus.proto.ProbeModel.pitch)
  return _internal_mutable_pitch();
}

// .arrus.proto.IntervalDouble tx_frequency_range = 4;
inline bool ProbeModel::_internal_has_tx_frequency_range() const {
  return this != internal_default_instance() && tx_frequency_range_ != nullptr;
}
inline bool ProbeModel::has_tx_frequency_range() const {
  return _internal_has_tx_frequency_range();
}
inline const ::arrus::proto::IntervalDouble& ProbeModel::_internal_tx_frequency_range() const {
  const ::arrus::proto::IntervalDouble* p = tx_frequency_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::arrus::proto::IntervalDouble*>(
      &::arrus::proto::_IntervalDouble_default_instance_);
}
inline const ::arrus::proto::IntervalDouble& ProbeModel::tx_frequency_range() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeModel.tx_frequency_range)
  return _internal_tx_frequency_range();
}
inline ::arrus::proto::IntervalDouble* ProbeModel::release_tx_frequency_range() {
  // @@protoc_insertion_point(field_release:arrus.proto.ProbeModel.tx_frequency_range)
  
  ::arrus::proto::IntervalDouble* temp = tx_frequency_range_;
  tx_frequency_range_ = nullptr;
  return temp;
}
inline ::arrus::proto::IntervalDouble* ProbeModel::_internal_mutable_tx_frequency_range() {
  
  if (tx_frequency_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrus::proto::IntervalDouble>(GetArenaNoVirtual());
    tx_frequency_range_ = p;
  }
  return tx_frequency_range_;
}
inline ::arrus::proto::IntervalDouble* ProbeModel::mutable_tx_frequency_range() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.ProbeModel.tx_frequency_range)
  return _internal_mutable_tx_frequency_range();
}
inline void ProbeModel::set_allocated_tx_frequency_range(::arrus::proto::IntervalDouble* tx_frequency_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_frequency_range_);
  }
  if (tx_frequency_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx_frequency_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx_frequency_range, submessage_arena);
    }
    
  } else {
    
  }
  tx_frequency_range_ = tx_frequency_range;
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.ProbeModel.tx_frequency_range)
}

// .arrus.proto.IntervalInteger voltage_range = 5;
inline bool ProbeModel::_internal_has_voltage_range() const {
  return this != internal_default_instance() && voltage_range_ != nullptr;
}
inline bool ProbeModel::has_voltage_range() const {
  return _internal_has_voltage_range();
}
inline const ::arrus::proto::IntervalInteger& ProbeModel::_internal_voltage_range() const {
  const ::arrus::proto::IntervalInteger* p = voltage_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::arrus::proto::IntervalInteger*>(
      &::arrus::proto::_IntervalInteger_default_instance_);
}
inline const ::arrus::proto::IntervalInteger& ProbeModel::voltage_range() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeModel.voltage_range)
  return _internal_voltage_range();
}
inline ::arrus::proto::IntervalInteger* ProbeModel::release_voltage_range() {
  // @@protoc_insertion_point(field_release:arrus.proto.ProbeModel.voltage_range)
  
  ::arrus::proto::IntervalInteger* temp = voltage_range_;
  voltage_range_ = nullptr;
  return temp;
}
inline ::arrus::proto::IntervalInteger* ProbeModel::_internal_mutable_voltage_range() {
  
  if (voltage_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::arrus::proto::IntervalInteger>(GetArenaNoVirtual());
    voltage_range_ = p;
  }
  return voltage_range_;
}
inline ::arrus::proto::IntervalInteger* ProbeModel::mutable_voltage_range() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.ProbeModel.voltage_range)
  return _internal_mutable_voltage_range();
}
inline void ProbeModel::set_allocated_voltage_range(::arrus::proto::IntervalInteger* voltage_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voltage_range_);
  }
  if (voltage_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voltage_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voltage_range, submessage_arena);
    }
    
  } else {
    
  }
  voltage_range_ = voltage_range;
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.ProbeModel.voltage_range)
}

// double curvature_radius = 6;
inline void ProbeModel::clear_curvature_radius() {
  curvature_radius_ = 0;
}
inline double ProbeModel::_internal_curvature_radius() const {
  return curvature_radius_;
}
inline double ProbeModel::curvature_radius() const {
  // @@protoc_insertion_point(field_get:arrus.proto.ProbeModel.curvature_radius)
  return _internal_curvature_radius();
}
inline void ProbeModel::_internal_set_curvature_radius(double value) {
  
  curvature_radius_ = value;
}
inline void ProbeModel::set_curvature_radius(double value) {
  _internal_set_curvature_radius(value);
  // @@protoc_insertion_point(field_set:arrus.proto.ProbeModel.curvature_radius)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace arrus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fdevices_2fprobe_2fProbeModel_2eproto
