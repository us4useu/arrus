// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/proto/session/SessionSettings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fsession_2fSessionSettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fsession_2fSessionSettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "io/proto/devices/us4r/Us4RSettings.pb.h"
#include "io/proto/devices/file/FileSettings.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_io_2fproto_2fsession_2fSessionSettings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_io_2fproto_2fsession_2fSessionSettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_io_2fproto_2fsession_2fSessionSettings_2eproto;
namespace arrus {
namespace proto {
class SessionSettings;
class SessionSettingsDefaultTypeInternal;
extern SessionSettingsDefaultTypeInternal _SessionSettings_default_instance_;
}  // namespace proto
}  // namespace arrus
PROTOBUF_NAMESPACE_OPEN
template<> ::arrus::proto::SessionSettings* Arena::CreateMaybeMessage<::arrus::proto::SessionSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace arrus {
namespace proto {

// ===================================================================

class SessionSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arrus.proto.SessionSettings) */ {
 public:
  SessionSettings();
  virtual ~SessionSettings();

  SessionSettings(const SessionSettings& from);
  SessionSettings(SessionSettings&& from) noexcept
    : SessionSettings() {
    *this = ::std::move(from);
  }

  inline SessionSettings& operator=(const SessionSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionSettings& operator=(SessionSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionSettings& default_instance();

  enum OneOfDeviceRepresentationCase {
    kUs4R = 1,
    kFile = 2,
    ONE_OF_DEVICE_REPRESENTATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionSettings* internal_default_instance() {
    return reinterpret_cast<const SessionSettings*>(
               &_SessionSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionSettings& a, SessionSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionSettings* New() const final {
    return CreateMaybeMessage<SessionSettings>(nullptr);
  }

  SessionSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionSettings& from);
  void MergeFrom(const SessionSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arrus.proto.SessionSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_io_2fproto_2fsession_2fSessionSettings_2eproto);
    return ::descriptor_table_io_2fproto_2fsession_2fSessionSettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDictionaryFileFieldNumber = 3,
    kUs4RFieldNumber = 1,
    kFileFieldNumber = 2,
  };
  // string dictionary_file = 3;
  void clear_dictionary_file();
  const std::string& dictionary_file() const;
  void set_dictionary_file(const std::string& value);
  void set_dictionary_file(std::string&& value);
  void set_dictionary_file(const char* value);
  void set_dictionary_file(const char* value, size_t size);
  std::string* mutable_dictionary_file();
  std::string* release_dictionary_file();
  void set_allocated_dictionary_file(std::string* dictionary_file);
  private:
  const std::string& _internal_dictionary_file() const;
  void _internal_set_dictionary_file(const std::string& value);
  std::string* _internal_mutable_dictionary_file();
  public:

  // .arrus.proto.Us4RSettings us4r = 1;
  bool has_us4r() const;
  private:
  bool _internal_has_us4r() const;
  public:
  void clear_us4r();
  const ::arrus::proto::Us4RSettings& us4r() const;
  ::arrus::proto::Us4RSettings* release_us4r();
  ::arrus::proto::Us4RSettings* mutable_us4r();
  void set_allocated_us4r(::arrus::proto::Us4RSettings* us4r);
  private:
  const ::arrus::proto::Us4RSettings& _internal_us4r() const;
  ::arrus::proto::Us4RSettings* _internal_mutable_us4r();
  public:

  // .arrus.proto.FileSettings file = 2;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::arrus::proto::FileSettings& file() const;
  ::arrus::proto::FileSettings* release_file();
  ::arrus::proto::FileSettings* mutable_file();
  void set_allocated_file(::arrus::proto::FileSettings* file);
  private:
  const ::arrus::proto::FileSettings& _internal_file() const;
  ::arrus::proto::FileSettings* _internal_mutable_file();
  public:

  void clear_one_of_device_representation();
  OneOfDeviceRepresentationCase one_of_device_representation_case() const;
  // @@protoc_insertion_point(class_scope:arrus.proto.SessionSettings)
 private:
  class _Internal;
  void set_has_us4r();
  void set_has_file();

  inline bool has_one_of_device_representation() const;
  inline void clear_has_one_of_device_representation();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dictionary_file_;
  union OneOfDeviceRepresentationUnion {
    OneOfDeviceRepresentationUnion() {}
    ::arrus::proto::Us4RSettings* us4r_;
    ::arrus::proto::FileSettings* file_;
  } one_of_device_representation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_io_2fproto_2fsession_2fSessionSettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionSettings

// .arrus.proto.Us4RSettings us4r = 1;
inline bool SessionSettings::_internal_has_us4r() const {
  return one_of_device_representation_case() == kUs4R;
}
inline bool SessionSettings::has_us4r() const {
  return _internal_has_us4r();
}
inline void SessionSettings::set_has_us4r() {
  _oneof_case_[0] = kUs4R;
}
inline ::arrus::proto::Us4RSettings* SessionSettings::release_us4r() {
  // @@protoc_insertion_point(field_release:arrus.proto.SessionSettings.us4r)
  if (_internal_has_us4r()) {
    clear_has_one_of_device_representation();
      ::arrus::proto::Us4RSettings* temp = one_of_device_representation_.us4r_;
    one_of_device_representation_.us4r_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arrus::proto::Us4RSettings& SessionSettings::_internal_us4r() const {
  return _internal_has_us4r()
      ? *one_of_device_representation_.us4r_
      : *reinterpret_cast< ::arrus::proto::Us4RSettings*>(&::arrus::proto::_Us4RSettings_default_instance_);
}
inline const ::arrus::proto::Us4RSettings& SessionSettings::us4r() const {
  // @@protoc_insertion_point(field_get:arrus.proto.SessionSettings.us4r)
  return _internal_us4r();
}
inline ::arrus::proto::Us4RSettings* SessionSettings::_internal_mutable_us4r() {
  if (!_internal_has_us4r()) {
    clear_one_of_device_representation();
    set_has_us4r();
    one_of_device_representation_.us4r_ = CreateMaybeMessage< ::arrus::proto::Us4RSettings >(
        GetArenaNoVirtual());
  }
  return one_of_device_representation_.us4r_;
}
inline ::arrus::proto::Us4RSettings* SessionSettings::mutable_us4r() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.SessionSettings.us4r)
  return _internal_mutable_us4r();
}

// .arrus.proto.FileSettings file = 2;
inline bool SessionSettings::_internal_has_file() const {
  return one_of_device_representation_case() == kFile;
}
inline bool SessionSettings::has_file() const {
  return _internal_has_file();
}
inline void SessionSettings::set_has_file() {
  _oneof_case_[0] = kFile;
}
inline ::arrus::proto::FileSettings* SessionSettings::release_file() {
  // @@protoc_insertion_point(field_release:arrus.proto.SessionSettings.file)
  if (_internal_has_file()) {
    clear_has_one_of_device_representation();
      ::arrus::proto::FileSettings* temp = one_of_device_representation_.file_;
    one_of_device_representation_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::arrus::proto::FileSettings& SessionSettings::_internal_file() const {
  return _internal_has_file()
      ? *one_of_device_representation_.file_
      : *reinterpret_cast< ::arrus::proto::FileSettings*>(&::arrus::proto::_FileSettings_default_instance_);
}
inline const ::arrus::proto::FileSettings& SessionSettings::file() const {
  // @@protoc_insertion_point(field_get:arrus.proto.SessionSettings.file)
  return _internal_file();
}
inline ::arrus::proto::FileSettings* SessionSettings::_internal_mutable_file() {
  if (!_internal_has_file()) {
    clear_one_of_device_representation();
    set_has_file();
    one_of_device_representation_.file_ = CreateMaybeMessage< ::arrus::proto::FileSettings >(
        GetArenaNoVirtual());
  }
  return one_of_device_representation_.file_;
}
inline ::arrus::proto::FileSettings* SessionSettings::mutable_file() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.SessionSettings.file)
  return _internal_mutable_file();
}

// string dictionary_file = 3;
inline void SessionSettings::clear_dictionary_file() {
  dictionary_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SessionSettings::dictionary_file() const {
  // @@protoc_insertion_point(field_get:arrus.proto.SessionSettings.dictionary_file)
  return _internal_dictionary_file();
}
inline void SessionSettings::set_dictionary_file(const std::string& value) {
  _internal_set_dictionary_file(value);
  // @@protoc_insertion_point(field_set:arrus.proto.SessionSettings.dictionary_file)
}
inline std::string* SessionSettings::mutable_dictionary_file() {
  // @@protoc_insertion_point(field_mutable:arrus.proto.SessionSettings.dictionary_file)
  return _internal_mutable_dictionary_file();
}
inline const std::string& SessionSettings::_internal_dictionary_file() const {
  return dictionary_file_.GetNoArena();
}
inline void SessionSettings::_internal_set_dictionary_file(const std::string& value) {
  
  dictionary_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SessionSettings::set_dictionary_file(std::string&& value) {
  
  dictionary_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:arrus.proto.SessionSettings.dictionary_file)
}
inline void SessionSettings::set_dictionary_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dictionary_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:arrus.proto.SessionSettings.dictionary_file)
}
inline void SessionSettings::set_dictionary_file(const char* value, size_t size) {
  
  dictionary_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:arrus.proto.SessionSettings.dictionary_file)
}
inline std::string* SessionSettings::_internal_mutable_dictionary_file() {
  
  return dictionary_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionSettings::release_dictionary_file() {
  // @@protoc_insertion_point(field_release:arrus.proto.SessionSettings.dictionary_file)
  
  return dictionary_file_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionSettings::set_allocated_dictionary_file(std::string* dictionary_file) {
  if (dictionary_file != nullptr) {
    
  } else {
    
  }
  dictionary_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dictionary_file);
  // @@protoc_insertion_point(field_set_allocated:arrus.proto.SessionSettings.dictionary_file)
}

inline bool SessionSettings::has_one_of_device_representation() const {
  return one_of_device_representation_case() != ONE_OF_DEVICE_REPRESENTATION_NOT_SET;
}
inline void SessionSettings::clear_has_one_of_device_representation() {
  _oneof_case_[0] = ONE_OF_DEVICE_REPRESENTATION_NOT_SET;
}
inline SessionSettings::OneOfDeviceRepresentationCase SessionSettings::one_of_device_representation_case() const {
  return SessionSettings::OneOfDeviceRepresentationCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace arrus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_io_2fproto_2fsession_2fSessionSettings_2eproto
