cmake_minimum_required(VERSION 3.17.0)

project(arrus LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 17)
# Version
set(PROJECT_VERSION 0.7.0)
set(ARRUS_PROJECT_VERSION "${PROJECT_VERSION}")

option(ARRUS_DEVELOP_VERSION "Build develop version." ON)
# TODO remove ARRUS_DEVELOP_VERSION, use ARRUS_APPEND_VERSION_SUFFIX_DATE
if(ARRUS_DEVELOP_VERSION)
    set(PROJECT_FULL_VERSION "${PROJECT_VERSION}-dev")
else()
    set(PROJECT_FULL_VERSION "${PROJECT_VERSION}")
endif()

string(TIMESTAMP CURRENT_YEAR "%Y")

################################################################################
# Modules
################################################################################
set(CMAKE_MODULE_PATH
    "${PROJECT_SOURCE_DIR}/cmake"
    ${CMAKE_BINARY_DIR} # Includes cmake scripts generated by conan package
    ${CMAKE_MODULE_PATH})

################################################################################
# Global options and settings
################################################################################
set(ARRUS_ROOT_DIR ${CMAKE_SOURCE_DIR})
set(ARRUS_DOCS_INSTALL_DIR docs)
set(ARRUS_MATLAB_INSTALL_DIR matlab)
set(ARRUS_PYTHON_INSTALL_DIR python)

set(Us4_LIB_DIR ${Us4_ROOT_DIR}/lib64)

option(ARRUS_BUILD_PY "Build python API." OFF)
set(ARRUS_PY_VERSION "3.8" CACHE STRING "Python version for which the ARRUS package should be built.")
option(ARRUS_BUILD_MATLAB "Build MATLAB API." OFF)
option(ARRUS_BUILD_DOCS "Build documentation." OFF)
option(ARRUS_RUN_TESTS "Run all tests builded packages." OFF)
option(ARRUS_EMBED_DEPS "Embed dependencies (like us4r dlls) into the output package." OFF)
option(ARRUS_APPEND_VERSION_SUFFIX_DATE "Append current timestamp to the ARRUS_PROJECT_VERSION." OFF)
option(ARRUS_CUDA "Build with CUDA GPU support" OFF)

if(ARRUS_APPEND_VERSION_SUFFIX_DATE)
    string(TIMESTAMP ARRUS_PROJECT_VERSION_SUFFIX "%Y%m%d")
    set(ARRUS_PROJECT_VERSION "${PROJECT_VERSION}-dev${ARRUS_PROJECT_VERSION_SUFFIX}")
endif()

# Determining host platform.
if(MSVC)
    set(ARRUS_BUILD_PLATFORM windows)
elseif(UNIX AND NOT APPLE)
    set(ARRUS_BUILD_PLATFORM linux)
else()
    message(FATAL_ERROR "Unsupported platform.")
endif()

# Common C++ compile options
if("${ARRUS_BUILD_PLATFORM}" STREQUAL "windows")
    # permissive- is required by range-v3/0.5.0
    set(ARRUS_CPP_COMMON_COMPILE_OPTIONS /permissive- /EHsc)
    set(ARRUS_CPP_STRICT_COMPILE_OPTIONS "/W4 /WX")

    set(ARRUS_CPP_COMMON_COMPILE_DEFINITIONS
            _WIN32
            # warnings occurs in boost bimap implementation headers
            _SILENCE_CXX17_ALLOCATOR_VOID_DEPRECATION_WARNING
            _CRT_SECURE_NO_WARNINGS)
else("${ARRUS_BUILD_PLATFORM}" STREQUAL "linux")
    set(ARRUS_CPP_COMMON_COMPILE_OPTIONS "")
    set(ARRUS_CPP_STRICT_COMPILE_OPTIONS "-Wall -Wextra -pedantic -Werror")
    set(ARRUS_CPP_COMMON_COMPILE_DEFINITIONS
            ARRUS_LINUX
            _SILENCE_CXX17_ALLOCATOR_VOID_DEPRECATION_WARNING)
endif()

# installation directories
set(ARRUS_BIN_INSTALL_DIR bin)
set(ARRUS_LIB_INSTALL_DIR lib64)
set(ARRUS_INCLUDE_INSTALL_DIR include)
set(ARRUS_DOCS_INSTALL_DIR docs)

################################################################################
# Common dependencies
################################################################################
find_package(Us4 0.8.5 EXACT REQUIRED US4OEM HV256 DBARLite)
find_package(Boost REQUIRED)
set(Boost_USE_STATIC_LIBS ON)
find_package(Protobuf REQUIRED)
# Use project root to search for .proto files.
set(Protobuf_IMPORT_DIRS ${CMAKE_CURRENT_SOURCE_DIR})
find_package(fmt REQUIRED)
find_package(Microsoft.GSL REQUIRED)
find_package(Eigen3 REQUIRED)

# OS specific dependencies.
if("${ARRUS_BUILD_PLATFORM}" STREQUAL "windows")
    set(ARRUS_OS_DEPS "")
else("${ARRUS_BUILD_PLATFORM}" STREQUAL "linux")
    set(ARRUS_OS_DEPS "")
endif()
################################################################################
# Sub-projects
################################################################################
if(ARRUS_RUN_TESTS)
    include(tests)
    enable_testing()
endif()

add_subdirectory(arrus/core)

if(ARRUS_BUILD_PY)
    add_subdirectory(api/python)
endif()
if(ARRUS_BUILD_MATLAB)
    add_subdirectory(api/matlab)
endif()
if(ARRUS_BUILD_DOCS)
    add_subdirectory(docs)
endif()
add_subdirectory(installer)

################################################################################
# General docs
################################################################################
configure_file(VERSION.rst.in VERSION.rst)
install(
        FILES ${CMAKE_CURRENT_BINARY_DIR}/VERSION.rst
        DESTINATION .
)
install(
	FILES ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE
        DESTINATION .
)
install(
	FILES ${CMAKE_CURRENT_SOURCE_DIR}/THIRD_PARTY_LICENSES
        DESTINATION .
)

################################################################################
# Embed external dependencies
################################################################################
if("${ARRUS_BUILD_PLATFORM}" STREQUAL "linux")
	set(CMAKE_SKIP_RPATH TRUE)
endif()

if(ARRUS_EMBED_DEPS)
    # TODO Remove transitive dependency on boost (embed deps directly).
    message("Us4r API ROOT DIR: ${Us4_ROOT_DIR}")
    # Sanitize provided path.
    string(REPLACE "\\" "/" Us4_ROOT_DIR_SANITIZED ${Us4_ROOT_DIR})

    install(
        DIRECTORY
            ${Us4_ROOT_DIR_SANITIZED}/lib64/
        DESTINATION
            ${ARRUS_LIB_INSTALL_DIR}
    )
if("${ARRUS_BUILD_PLATFORM}" STREQUAL "windows")
    install(
       FILES
            # TODO(pjarosik) make it more general (will not work for OS!=win)
            ${Us4_ROOT_DIR_SANITIZED}/matlab/Us4MEX.mexw64
       DESTINATION
            matlab/arrus
    )
    install(
        FILES
            # TODO(pjarosik) make it more general (will not work for OS!=win)
            ${Us4_ROOT_DIR_SANITIZED}/bin/us4OEMFirmwareUpdate.exe
            ${Us4_ROOT_DIR_SANITIZED}/bin/Us4OEMStatus.exe
        DESTINATION
            ${ARRUS_BIN_INSTALL_DIR}
    )
endif()
endif()

