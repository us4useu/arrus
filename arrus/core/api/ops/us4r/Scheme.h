#ifndef ARRUS_CORE_API_OPS_US4R_H
#define ARRUS_CORE_API_OPS_US4R_H

#include <utility>

#include "TxRxSequence.h"
#include "arrus/core/api/framework/DataBufferSpec.h"

namespace arrus::ops::us4r {

class Scheme {
public:

    /**
     * How the scheme should be executed on the us4r-lite device.
     *
     * This enum value determines the source of the signal trigger
     * (i.e. whether the signal is triggered by us4oem modules or
     * host PC).
     */
    enum class WorkMode {
        /** Trigger generated by us4r, error on overflow. */
        ASYNC,
        /** Trigger generated by host, no error on overflow. */
        HOST
    };

    Scheme(TxRxSequence txRxSequence, uint16 rxBufferSize,
           const framework::DataBufferSpec &outputBuffer,
           WorkMode workMode)
        : txRxSequence(std::move(txRxSequence)), rxBufferSize(rxBufferSize),
        outputBuffer(outputBuffer), workMode(workMode) {}

    const TxRxSequence &getTxRxSequence() const {
        return txRxSequence;
    }

    uint16 getRxBufferSize() const {
        return rxBufferSize;
    }

    const framework::DataBufferSpec &getOutputBuffer() const {
        return outputBuffer;
    }

    WorkMode getWorkMode() const {
        return workMode;
    }

private:
    TxRxSequence txRxSequence;
    uint16 rxBufferSize;
    ::arrus::framework::DataBufferSpec outputBuffer;
    WorkMode workMode;
};

}

#endif //ARRUS_CORE_API_OPS_US4R_H
