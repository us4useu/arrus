import numpy as np
import arrus.kernels.imaging
import arrus.ops.imaging
import arrus.medium
from arrus.kernels.kernel import KernelExecutionContext
import arrus.ops.us4r
import unittest
import dataclasses
from arrus.devices.probe import ProbeModelId, ProbeModel


@dataclasses.dataclass(frozen=True)
class ProbeMock:
    model: ProbeModel


@dataclasses.dataclass(frozen=True)
class DeviceMock:
    probe: ProbeMock
    sampling_frequency: float = 65e6


@dataclasses.dataclass(frozen=True)
class ContextMock:
    device: DeviceMock
    medium: arrus.medium.MediumDTO
    op: object


class PwiSequenceTest(unittest.TestCase):

    def setUp(self) -> None:
        self.default_device = DeviceMock(ProbeMock(
            ProbeModel(model_id=ProbeModelId("a", "a"), pitch=1, n_elements=8,
                       curvature_radius=0.0)))
        self.default_sequence = op = arrus.ops.imaging.PwiSequence(
            angles=[-np.pi/4, 0.0, np.pi/4],
            pulse=arrus.ops.us4r.Pulse(
                center_frequency=1,
                n_periods=1,
                inverse=False),
            rx_sample_range=(0, 8),
            downsampling_factor=1,
            speed_of_sound=1,
            pri=1,
            sri=1,
            tgc_start=1,
            tgc_slope=1,
            tx_aperture_center_element=3.5,
            tx_aperture_size=8,
            rx_aperture_center_element=3.5,
            rx_aperture_size=8
        )
        self.default_medium = None

    def skip_test_linear_array_three_tx_rxs(self):
        # Given
        device = self.default_device
        n_elements = device.probe.model.n_elements
        pitch = device.probe.model.pitch
        input_sequence = self.default_sequence
        context = ContextMock(device=self.default_device,
                              medium=self.default_medium,
                              op=self.default_sequence)
        sequence = arrus.kernels.imaging.process_simple_tx_rx_sequence(context)
        # Expect
        tx_rxs = sequence.ops
        # should be 3 TX/RXs
        self.assertEqual(len(tx_rxs), 3)
        # TX:
        # - aperture: all device elements
        for tx_rx in tx_rxs:
            self.assertEqual(np.sum(tx_rx.tx.aperture == 1), n_elements)
        # - delays:
        expected_delays_pi_4 = np.arange(0, n_elements)-(n_elements-1)/2
        expected_delays_pi_4 *= pitch
        expected_delays_pi_4 = expected_delays_pi_4/np.sqrt(2) # sin(pi/4)
        min_expected_delay = np.min(expected_delays_pi_4)
        expected_delays_pi_4 = expected_delays_pi_4-np.min(expected_delays_pi_4)
        tx_aperture_center_delay = 0-min_expected_delay

        # angle: -pi/4 [rad]
        np.testing.assert_almost_equal(
            tx_rxs[0].tx.delays,
            np.flip(expected_delays_pi_4))
        # angle: 0 [rad]
        np.testing.assert_almost_equal(
            tx_rxs[1].tx.delays,
            np.repeat(tx_aperture_center_delay, len(expected_delays_pi_4)))
        # angle: pi/4 [rad]
        np.testing.assert_almost_equal(
            tx_rxs[2].tx.delays,
            expected_delays_pi_4)
        # - pulse:
        for tx_rx in tx_rxs:
            self.assertEqual(tx_rx.tx.excitation, input_sequence.pulse)
        # RX:
        # - aperture: all device elements
        for tx_rx in tx_rxs:
            self.assertEqual(np.sum(tx_rx.rx.aperture == 1), n_elements)
            self.assertEqual(tx_rx.rx.sample_range, input_sequence.rx_sample_range)
            self.assertEqual(tx_rx.rx.padding, (0, 0))

    def test_reference_compliance_linear_array_sl1543_parameters(self):
        # TODO
        pass

    def test_reference_compliance_convex_array_ac2541_128_elements(self):
        n_elements = 192
        device = DeviceMock(ProbeMock(
            ProbeModel(model_id=ProbeModelId("esaote", "ac2541"),
                       pitch=0.3e-3,
                       n_elements=n_elements,
                       curvature_radius=50e-3)))
        n_elements = device.probe.model.n_elements
        pitch = device.probe.model.pitch
        input_sequence = self.default_sequence
        input_sequence = dataclasses.replace(
            input_sequence,
            angles=np.tile([0], 9),
            tx_aperture_center=np.repeat(np.linspace(-12, 12, 9)*1e-3, 1),
            tx_aperture_center_element=None,
            tx_aperture_size=128,
            rx_aperture_center=np.repeat(np.linspace(-12, 12, 9)*1e-3, 1),
            rx_aperture_center_element=None,
            rx_aperture_size=128,
            speed_of_sound=1490
        )
        context = ContextMock(device=device,
                              medium=self.default_medium,
                              op=input_sequence)
        tx_rx_sequence = arrus.kernels.imaging.process_simple_tx_rx_sequence(context)
        ops = tx_rx_sequence.ops
        self.assertEqual(len(ops), 9)
        # TX/RX apertures:
        expected_apertures = np.zeros((len(ops), n_elements), dtype=bool)
        expected_apertures[0,  0:120] = True
        expected_apertures[1,  2:130] = True
        expected_apertures[2, 12:140] = True
        expected_apertures[3, 22:150] = True
        expected_apertures[4, 32:160] = True
        expected_apertures[5, 42:170] = True
        expected_apertures[6, 52:180] = True
        expected_apertures[7, 62:190] = True
        expected_apertures[8, 72:192] = True

        expected_delays = [
            np.array([5.628425e-07, 6.280860e-07, 6.921854e-07, 7.551385e-07, 8.169430e-07, 8.775966e-07, 9.370973e-07, 9.954427e-07, 1.052631e-06, 1.108660e-06, 1.163527e-06, 1.217232e-06, 1.269771e-06, 1.321142e-06, 1.371345e-06, 1.420377e-06, 1.468237e-06, 1.514922e-06, 1.560431e-06, 1.604763e-06, 1.647916e-06, 1.689887e-06, 1.730677e-06, 1.770283e-06, 1.808703e-06, 1.845937e-06, 1.881983e-06, 1.916840e-06, 1.950507e-06, 1.982982e-06, 2.014264e-06, 2.044352e-06, 2.073245e-06, 2.100942e-06, 2.127442e-06, 2.152744e-06, 2.176847e-06, 2.199751e-06, 2.221453e-06, 2.241955e-06, 2.261254e-06, 2.279350e-06, 2.296243e-06, 2.311932e-06, 2.326416e-06, 2.339695e-06, 2.351768e-06, 2.362635e-06, 2.372296e-06, 2.380750e-06, 2.387997e-06, 2.394036e-06, 2.398868e-06, 2.402492e-06, 2.404908e-06, 2.406116e-06, 2.406116e-06, 2.404908e-06, 2.402492e-06, 2.398868e-06, 2.394036e-06, 2.387997e-06, 2.380750e-06, 2.372296e-06, 2.362635e-06, 2.351768e-06, 2.339695e-06, 2.326416e-06, 2.311932e-06, 2.296243e-06, 2.279350e-06, 2.261254e-06, 2.241955e-06, 2.221453e-06, 2.199751e-06, 2.176847e-06, 2.152744e-06, 2.127442e-06, 2.100942e-06, 2.073245e-06, 2.044352e-06, 2.014264e-06, 1.982982e-06, 1.950507e-06, 1.916840e-06, 1.881983e-06, 1.845937e-06, 1.808703e-06, 1.770283e-06, 1.730677e-06, 1.689887e-06, 1.647916e-06, 1.604763e-06, 1.560431e-06, 1.514922e-06, 1.468237e-06, 1.420377e-06, 1.371345e-06, 1.321142e-06, 1.269771e-06, 1.217232e-06, 1.163527e-06, 1.108660e-06, 1.052631e-06, 9.954427e-07, 9.370973e-07, 8.775966e-07, 8.169430e-07, 7.551385e-07, 6.921854e-07, 6.280860e-07, 5.628425e-07, 4.964574e-07, 4.289329e-07, 3.602716e-07, 2.904759e-07, 2.195483e-07, 1.474914e-07, 7.430775e-08, 1.694066e-21]),
            np.array([3.388132e-21, 7.430775e-08, 1.474914e-07, 2.195483e-07, 2.904759e-07, 3.602716e-07, 4.289329e-07, 4.964574e-07, 5.628425e-07, 6.280860e-07, 6.921854e-07, 7.551385e-07, 8.169430e-07, 8.775966e-07, 9.370973e-07, 9.954427e-07, 1.052631e-06, 1.108660e-06, 1.163527e-06, 1.217232e-06, 1.269771e-06, 1.321142e-06, 1.371345e-06, 1.420377e-06, 1.468237e-06, 1.514922e-06, 1.560431e-06, 1.604763e-06, 1.647916e-06, 1.689887e-06, 1.730677e-06, 1.770283e-06, 1.808703e-06, 1.845937e-06, 1.881983e-06, 1.916840e-06, 1.950507e-06, 1.982982e-06, 2.014264e-06, 2.044352e-06, 2.073245e-06, 2.100942e-06, 2.127442e-06, 2.152744e-06, 2.176847e-06, 2.199751e-06, 2.221453e-06, 2.241955e-06, 2.261254e-06, 2.279350e-06, 2.296243e-06, 2.311932e-06, 2.326416e-06, 2.339695e-06, 2.351768e-06, 2.362635e-06, 2.372296e-06, 2.380750e-06, 2.387997e-06, 2.394036e-06, 2.398868e-06, 2.402492e-06, 2.404908e-06, 2.406116e-06, 2.406116e-06, 2.404908e-06, 2.402492e-06, 2.398868e-06, 2.394036e-06, 2.387997e-06, 2.380750e-06, 2.372296e-06, 2.362635e-06, 2.351768e-06, 2.339695e-06, 2.326416e-06, 2.311932e-06, 2.296243e-06, 2.279350e-06, 2.261254e-06, 2.241955e-06, 2.221453e-06, 2.199751e-06, 2.176847e-06, 2.152744e-06, 2.127442e-06, 2.100942e-06, 2.073245e-06, 2.044352e-06, 2.014264e-06, 1.982982e-06, 1.950507e-06, 1.916840e-06, 1.881983e-06, 1.845937e-06, 1.808703e-06, 1.770283e-06, 1.730677e-06, 1.689887e-06, 1.647916e-06, 1.604763e-06, 1.560431e-06, 1.514922e-06, 1.468237e-06, 1.420377e-06, 1.371345e-06, 1.321142e-06, 1.269771e-06, 1.217232e-06, 1.163527e-06, 1.108660e-06, 1.052631e-06, 9.954427e-07, 9.370973e-07, 8.775966e-07, 8.169430e-07, 7.551385e-07, 6.921854e-07, 6.280860e-07, 5.628425e-07, 4.964574e-07, 4.289329e-07, 3.602716e-07, 2.904759e-07, 2.195483e-07, 1.474914e-07, 7.430775e-08, 1.270549e-21]),
            np.array([0.0,          7.430775e-08, 1.474914e-07, 2.195483e-07, 2.904759e-07, 3.602716e-07, 4.289329e-07, 4.964574e-07, 5.628425e-07, 6.280860e-07, 6.921854e-07, 7.551385e-07, 8.169430e-07, 8.775966e-07, 9.370973e-07, 9.954427e-07, 1.052631e-06, 1.108660e-06, 1.163527e-06, 1.217232e-06, 1.269771e-06, 1.321142e-06, 1.371345e-06, 1.420377e-06, 1.468237e-06, 1.514922e-06, 1.560431e-06, 1.604763e-06, 1.647916e-06, 1.689887e-06, 1.730677e-06, 1.770283e-06, 1.808703e-06, 1.845937e-06, 1.881983e-06, 1.916840e-06, 1.950507e-06, 1.982982e-06, 2.014264e-06, 2.044352e-06, 2.073245e-06, 2.100942e-06, 2.127442e-06, 2.152744e-06, 2.176847e-06, 2.199751e-06, 2.221453e-06, 2.241955e-06, 2.261254e-06, 2.279350e-06, 2.296243e-06, 2.311932e-06, 2.326416e-06, 2.339695e-06, 2.351768e-06, 2.362635e-06, 2.372296e-06, 2.380750e-06, 2.387997e-06, 2.394036e-06, 2.398868e-06, 2.402492e-06, 2.404908e-06, 2.406116e-06, 2.406116e-06, 2.404908e-06, 2.402492e-06, 2.398868e-06, 2.394036e-06, 2.387997e-06, 2.380750e-06, 2.372296e-06, 2.362635e-06, 2.351768e-06, 2.339695e-06, 2.326416e-06, 2.311932e-06, 2.296243e-06, 2.279350e-06, 2.261254e-06, 2.241955e-06, 2.221453e-06, 2.199751e-06, 2.176847e-06, 2.152744e-06, 2.127442e-06, 2.100942e-06, 2.073245e-06, 2.044352e-06, 2.014264e-06, 1.982982e-06, 1.950507e-06, 1.916840e-06, 1.881983e-06, 1.845937e-06, 1.808703e-06, 1.770283e-06, 1.730677e-06, 1.689887e-06, 1.647916e-06, 1.604763e-06, 1.560431e-06, 1.514922e-06, 1.468237e-06, 1.420377e-06, 1.371345e-06, 1.321142e-06, 1.269771e-06, 1.217232e-06, 1.163527e-06, 1.108660e-06, 1.052631e-06, 9.954427e-07, 9.370973e-07, 8.775966e-07, 8.169430e-07, 7.551385e-07, 6.921854e-07, 6.280860e-07, 5.628425e-07, 4.964574e-07, 4.289329e-07, 3.602716e-07, 2.904759e-07, 2.195483e-07, 1.474914e-07, 7.430775e-08, 4.235165e-22]),
            np.array([4.235165e-22, 7.430775e-08, 1.474914e-07, 2.195483e-07, 2.904759e-07, 3.602716e-07, 4.289329e-07, 4.964574e-07, 5.628425e-07, 6.280860e-07, 6.921854e-07, 7.551385e-07, 8.169430e-07, 8.775966e-07, 9.370973e-07, 9.954427e-07, 1.052631e-06, 1.108660e-06, 1.163527e-06, 1.217232e-06, 1.269771e-06, 1.321142e-06, 1.371345e-06, 1.420377e-06, 1.468237e-06, 1.514922e-06, 1.560431e-06, 1.604763e-06, 1.647916e-06, 1.689887e-06, 1.730677e-06, 1.770283e-06, 1.808703e-06, 1.845937e-06, 1.881983e-06, 1.916840e-06, 1.950507e-06, 1.982982e-06, 2.014264e-06, 2.044352e-06, 2.073245e-06, 2.100942e-06, 2.127442e-06, 2.152744e-06, 2.176847e-06, 2.199751e-06, 2.221453e-06, 2.241955e-06, 2.261254e-06, 2.279350e-06, 2.296243e-06, 2.311932e-06, 2.326416e-06, 2.339695e-06, 2.351768e-06, 2.362635e-06, 2.372296e-06, 2.380750e-06, 2.387997e-06, 2.394036e-06, 2.398868e-06, 2.402492e-06, 2.404908e-06, 2.406116e-06, 2.406116e-06, 2.404908e-06, 2.402492e-06, 2.398868e-06, 2.394036e-06, 2.387997e-06, 2.380750e-06, 2.372296e-06, 2.362635e-06, 2.351768e-06, 2.339695e-06, 2.326416e-06, 2.311932e-06, 2.296243e-06, 2.279350e-06, 2.261254e-06, 2.241955e-06, 2.221453e-06, 2.199751e-06, 2.176847e-06, 2.152744e-06, 2.127442e-06, 2.100942e-06, 2.073245e-06, 2.044352e-06, 2.014264e-06, 1.982982e-06, 1.950507e-06, 1.916840e-06, 1.881983e-06, 1.845937e-06, 1.808703e-06, 1.770283e-06, 1.730677e-06, 1.689887e-06, 1.647916e-06, 1.604763e-06, 1.560431e-06, 1.514922e-06, 1.468237e-06, 1.420377e-06, 1.371345e-06, 1.321142e-06, 1.269771e-06, 1.217232e-06, 1.163527e-06, 1.108660e-06, 1.052631e-06, 9.954427e-07, 9.370973e-07, 8.775966e-07, 8.169430e-07, 7.551385e-07, 6.921854e-07, 6.280860e-07, 5.628425e-07, 4.964574e-07, 4.289329e-07, 3.602716e-07, 2.904759e-07, 2.195483e-07, 1.474914e-07, 7.430775e-08, 0.0]),
            np.array([1.270549e-21, 7.430775e-08, 1.474914e-07, 2.195483e-07, 2.904759e-07, 3.602716e-07, 4.289329e-07, 4.964574e-07, 5.628425e-07, 6.280860e-07, 6.921854e-07, 7.551385e-07, 8.169430e-07, 8.775966e-07, 9.370973e-07, 9.954427e-07, 1.052631e-06, 1.108660e-06, 1.163527e-06, 1.217232e-06, 1.269771e-06, 1.321142e-06, 1.371345e-06, 1.420377e-06, 1.468237e-06, 1.514922e-06, 1.560431e-06, 1.604763e-06, 1.647916e-06, 1.689887e-06, 1.730677e-06, 1.770283e-06, 1.808703e-06, 1.845937e-06, 1.881983e-06, 1.916840e-06, 1.950507e-06, 1.982982e-06, 2.014264e-06, 2.044352e-06, 2.073245e-06, 2.100942e-06, 2.127442e-06, 2.152744e-06, 2.176847e-06, 2.199751e-06, 2.221453e-06, 2.241955e-06, 2.261254e-06, 2.279350e-06, 2.296243e-06, 2.311932e-06, 2.326416e-06, 2.339695e-06, 2.351768e-06, 2.362635e-06, 2.372296e-06, 2.380750e-06, 2.387997e-06, 2.394036e-06, 2.398868e-06, 2.402492e-06, 2.404908e-06, 2.406116e-06, 2.406116e-06, 2.404908e-06, 2.402492e-06, 2.398868e-06, 2.394036e-06, 2.387997e-06, 2.380750e-06, 2.372296e-06, 2.362635e-06, 2.351768e-06, 2.339695e-06, 2.326416e-06, 2.311932e-06, 2.296243e-06, 2.279350e-06, 2.261254e-06, 2.241955e-06, 2.221453e-06, 2.199751e-06, 2.176847e-06, 2.152744e-06, 2.127442e-06, 2.100942e-06, 2.073245e-06, 2.044352e-06, 2.014264e-06, 1.982982e-06, 1.950507e-06, 1.916840e-06, 1.881983e-06, 1.845937e-06, 1.808703e-06, 1.770283e-06, 1.730677e-06, 1.689887e-06, 1.647916e-06, 1.604763e-06, 1.560431e-06, 1.514922e-06, 1.468237e-06, 1.420377e-06, 1.371345e-06, 1.321142e-06, 1.269771e-06, 1.217232e-06, 1.163527e-06, 1.108660e-06, 1.052631e-06, 9.954427e-07, 9.370973e-07, 8.775966e-07, 8.169430e-07, 7.551385e-07, 6.921854e-07, 6.280860e-07, 5.628425e-07, 4.964574e-07, 4.289329e-07, 3.602716e-07, 2.904759e-07, 2.195483e-07, 1.474914e-07, 7.430775e-08, 1.270549e-21]),
            np.array([0.0,          7.430775e-08, 1.474914e-07, 2.195483e-07, 2.904759e-07, 3.602716e-07, 4.289329e-07, 4.964574e-07, 5.628425e-07, 6.280860e-07, 6.921854e-07, 7.551385e-07, 8.169430e-07, 8.775966e-07, 9.370973e-07, 9.954427e-07, 1.052631e-06, 1.108660e-06, 1.163527e-06, 1.217232e-06, 1.269771e-06, 1.321142e-06, 1.371345e-06, 1.420377e-06, 1.468237e-06, 1.514922e-06, 1.560431e-06, 1.604763e-06, 1.647916e-06, 1.689887e-06, 1.730677e-06, 1.770283e-06, 1.808703e-06, 1.845937e-06, 1.881983e-06, 1.916840e-06, 1.950507e-06, 1.982982e-06, 2.014264e-06, 2.044352e-06, 2.073245e-06, 2.100942e-06, 2.127442e-06, 2.152744e-06, 2.176847e-06, 2.199751e-06, 2.221453e-06, 2.241955e-06, 2.261254e-06, 2.279350e-06, 2.296243e-06, 2.311932e-06, 2.326416e-06, 2.339695e-06, 2.351768e-06, 2.362635e-06, 2.372296e-06, 2.380750e-06, 2.387997e-06, 2.394036e-06, 2.398868e-06, 2.402492e-06, 2.404908e-06, 2.406116e-06, 2.406116e-06, 2.404908e-06, 2.402492e-06, 2.398868e-06, 2.394036e-06, 2.387997e-06, 2.380750e-06, 2.372296e-06, 2.362635e-06, 2.351768e-06, 2.339695e-06, 2.326416e-06, 2.311932e-06, 2.296243e-06, 2.279350e-06, 2.261254e-06, 2.241955e-06, 2.221453e-06, 2.199751e-06, 2.176847e-06, 2.152744e-06, 2.127442e-06, 2.100942e-06, 2.073245e-06, 2.044352e-06, 2.014264e-06, 1.982982e-06, 1.950507e-06, 1.916840e-06, 1.881983e-06, 1.845937e-06, 1.808703e-06, 1.770283e-06, 1.730677e-06, 1.689887e-06, 1.647916e-06, 1.604763e-06, 1.560431e-06, 1.514922e-06, 1.468237e-06, 1.420377e-06, 1.371345e-06, 1.321142e-06, 1.269771e-06, 1.217232e-06, 1.163527e-06, 1.108660e-06, 1.052631e-06, 9.954427e-07, 9.370973e-07, 8.775966e-07, 8.169430e-07, 7.551385e-07, 6.921854e-07, 6.280860e-07, 5.628425e-07, 4.964574e-07, 4.289329e-07, 3.602716e-07, 2.904759e-07, 2.195483e-07, 1.474914e-07, 7.430775e-08, 4.235165e-22]),
            np.array([4.235165e-22, 7.430775e-08, 1.474914e-07, 2.195483e-07, 2.904759e-07, 3.602716e-07, 4.289329e-07, 4.964574e-07, 5.628425e-07, 6.280860e-07, 6.921854e-07, 7.551385e-07, 8.169430e-07, 8.775966e-07, 9.370973e-07, 9.954427e-07, 1.052631e-06, 1.108660e-06, 1.163527e-06, 1.217232e-06, 1.269771e-06, 1.321142e-06, 1.371345e-06, 1.420377e-06, 1.468237e-06, 1.514922e-06, 1.560431e-06, 1.604763e-06, 1.647916e-06, 1.689887e-06, 1.730677e-06, 1.770283e-06, 1.808703e-06, 1.845937e-06, 1.881983e-06, 1.916840e-06, 1.950507e-06, 1.982982e-06, 2.014264e-06, 2.044352e-06, 2.073245e-06, 2.100942e-06, 2.127442e-06, 2.152744e-06, 2.176847e-06, 2.199751e-06, 2.221453e-06, 2.241955e-06, 2.261254e-06, 2.279350e-06, 2.296243e-06, 2.311932e-06, 2.326416e-06, 2.339695e-06, 2.351768e-06, 2.362635e-06, 2.372296e-06, 2.380750e-06, 2.387997e-06, 2.394036e-06, 2.398868e-06, 2.402492e-06, 2.404908e-06, 2.406116e-06, 2.406116e-06, 2.404908e-06, 2.402492e-06, 2.398868e-06, 2.394036e-06, 2.387997e-06, 2.380750e-06, 2.372296e-06, 2.362635e-06, 2.351768e-06, 2.339695e-06, 2.326416e-06, 2.311932e-06, 2.296243e-06, 2.279350e-06, 2.261254e-06, 2.241955e-06, 2.221453e-06, 2.199751e-06, 2.176847e-06, 2.152744e-06, 2.127442e-06, 2.100942e-06, 2.073245e-06, 2.044352e-06, 2.014264e-06, 1.982982e-06, 1.950507e-06, 1.916840e-06, 1.881983e-06, 1.845937e-06, 1.808703e-06, 1.770283e-06, 1.730677e-06, 1.689887e-06, 1.647916e-06, 1.604763e-06, 1.560431e-06, 1.514922e-06, 1.468237e-06, 1.420377e-06, 1.371345e-06, 1.321142e-06, 1.269771e-06, 1.217232e-06, 1.163527e-06, 1.108660e-06, 1.052631e-06, 9.954427e-07, 9.370973e-07, 8.775966e-07, 8.169430e-07, 7.551385e-07, 6.921854e-07, 6.280860e-07, 5.628425e-07, 4.964574e-07, 4.289329e-07, 3.602716e-07, 2.904759e-07, 2.195483e-07, 1.474914e-07, 7.430775e-08, 0.0]),
            np.array([1.270549e-21, 7.430775e-08, 1.474914e-07, 2.195483e-07, 2.904759e-07, 3.602716e-07, 4.289329e-07, 4.964574e-07, 5.628425e-07, 6.280860e-07, 6.921854e-07, 7.551385e-07, 8.169430e-07, 8.775966e-07, 9.370973e-07, 9.954427e-07, 1.052631e-06, 1.108660e-06, 1.163527e-06, 1.217232e-06, 1.269771e-06, 1.321142e-06, 1.371345e-06, 1.420377e-06, 1.468237e-06, 1.514922e-06, 1.560431e-06, 1.604763e-06, 1.647916e-06, 1.689887e-06, 1.730677e-06, 1.770283e-06, 1.808703e-06, 1.845937e-06, 1.881983e-06, 1.916840e-06, 1.950507e-06, 1.982982e-06, 2.014264e-06, 2.044352e-06, 2.073245e-06, 2.100942e-06, 2.127442e-06, 2.152744e-06, 2.176847e-06, 2.199751e-06, 2.221453e-06, 2.241955e-06, 2.261254e-06, 2.279350e-06, 2.296243e-06, 2.311932e-06, 2.326416e-06, 2.339695e-06, 2.351768e-06, 2.362635e-06, 2.372296e-06, 2.380750e-06, 2.387997e-06, 2.394036e-06, 2.398868e-06, 2.402492e-06, 2.404908e-06, 2.406116e-06, 2.406116e-06, 2.404908e-06, 2.402492e-06, 2.398868e-06, 2.394036e-06, 2.387997e-06, 2.380750e-06, 2.372296e-06, 2.362635e-06, 2.351768e-06, 2.339695e-06, 2.326416e-06, 2.311932e-06, 2.296243e-06, 2.279350e-06, 2.261254e-06, 2.241955e-06, 2.221453e-06, 2.199751e-06, 2.176847e-06, 2.152744e-06, 2.127442e-06, 2.100942e-06, 2.073245e-06, 2.044352e-06, 2.014264e-06, 1.982982e-06, 1.950507e-06, 1.916840e-06, 1.881983e-06, 1.845937e-06, 1.808703e-06, 1.770283e-06, 1.730677e-06, 1.689887e-06, 1.647916e-06, 1.604763e-06, 1.560431e-06, 1.514922e-06, 1.468237e-06, 1.420377e-06, 1.371345e-06, 1.321142e-06, 1.269771e-06, 1.217232e-06, 1.163527e-06, 1.108660e-06, 1.052631e-06, 9.954427e-07, 9.370973e-07, 8.775966e-07, 8.169430e-07, 7.551385e-07, 6.921854e-07, 6.280860e-07, 5.628425e-07, 4.964574e-07, 4.289329e-07, 3.602716e-07, 2.904759e-07, 2.195483e-07, 1.474914e-07, 7.430775e-08, 2.541099e-21]),
            np.array([1.694066e-21, 7.430775e-08, 1.474914e-07, 2.195483e-07, 2.904759e-07, 3.602716e-07, 4.289329e-07, 4.964574e-07, 5.628425e-07, 6.280860e-07, 6.921854e-07, 7.551385e-07, 8.169430e-07, 8.775966e-07, 9.370973e-07, 9.954427e-07, 1.052631e-06, 1.108660e-06, 1.163527e-06, 1.217232e-06, 1.269771e-06, 1.321142e-06, 1.371345e-06, 1.420377e-06, 1.468237e-06, 1.514922e-06, 1.560431e-06, 1.604763e-06, 1.647916e-06, 1.689887e-06, 1.730677e-06, 1.770283e-06, 1.808703e-06, 1.845937e-06, 1.881983e-06, 1.916840e-06, 1.950507e-06, 1.982982e-06, 2.014264e-06, 2.044352e-06, 2.073245e-06, 2.100942e-06, 2.127442e-06, 2.152744e-06, 2.176847e-06, 2.199751e-06, 2.221453e-06, 2.241955e-06, 2.261254e-06, 2.279350e-06, 2.296243e-06, 2.311932e-06, 2.326416e-06, 2.339695e-06, 2.351768e-06, 2.362635e-06, 2.372296e-06, 2.380750e-06, 2.387997e-06, 2.394036e-06, 2.398868e-06, 2.402492e-06, 2.404908e-06, 2.406116e-06, 2.406116e-06, 2.404908e-06, 2.402492e-06, 2.398868e-06, 2.394036e-06, 2.387997e-06, 2.380750e-06, 2.372296e-06, 2.362635e-06, 2.351768e-06, 2.339695e-06, 2.326416e-06, 2.311932e-06, 2.296243e-06, 2.279350e-06, 2.261254e-06, 2.241955e-06, 2.221453e-06, 2.199751e-06, 2.176847e-06, 2.152744e-06, 2.127442e-06, 2.100942e-06, 2.073245e-06, 2.044352e-06, 2.014264e-06, 1.982982e-06, 1.950507e-06, 1.916840e-06, 1.881983e-06, 1.845937e-06, 1.808703e-06, 1.770283e-06, 1.730677e-06, 1.689887e-06, 1.647916e-06, 1.604763e-06, 1.560431e-06, 1.514922e-06, 1.468237e-06, 1.420377e-06, 1.371345e-06, 1.321142e-06, 1.269771e-06, 1.217232e-06, 1.163527e-06, 1.108660e-06, 1.052631e-06, 9.954427e-07, 9.370973e-07, 8.775966e-07, 8.169430e-07, 7.551385e-07, 6.921854e-07, 6.280860e-07, 5.628425e-07])
        ]

        for i, op in enumerate(ops):
            tx_aperture = op.tx.aperture
            rx_aperture = op.rx.aperture
            tx_delays = op.tx.delays
            np.testing.assert_equal(np.argwhere(tx_aperture), np.argwhere(expected_apertures[i]))
            np.testing.assert_equal(np.argwhere(rx_aperture), np.argwhere(expected_apertures[i]))
            np.testing.assert_almost_equal(expected_delays[i], tx_delays)


class LinSequenceTest(unittest.TestCase):

    def skip_test_simple_sequence_with_paddings(self):
        # three tx/rxs with aperture centers: 0, 16, 31
        seq = arrus.ops.imaging.LinSequence(
            tx_aperture_center_element=np.array([0, 15, 16, 31]),
            tx_aperture_size=32,
            tx_focus=30e-3,
            pulse=arrus.ops.us4r.Pulse(center_frequency=5e6, n_periods=3,
                                       inverse=False),
            rx_aperture_center_element=np.array([0, 15, 16, 31]),
            rx_aperture_size=32,
            pri=1000e-6,
            downsampling_factor=1,
            rx_sample_range=(0, 4096),
            tgc_start=14,
            tgc_slope=0)

        medium = arrus.medium.MediumDTO(name="test", speed_of_sound=1540)
        probe_model = ProbeModel(
            model_id="id",
            pitch=0.2e-3, n_elements=32, curvature_radius=0.0)
        device = DeviceMock(probe=ProbeMock(model=probe_model))
        context = ContextMock(device=device, medium=medium, op=seq)
        tx_rx_sequence = arrus.kernels.imaging.create_lin_sequence(context)

        # expected delays
        tx_rx_params = arrus.kernels.imaging.compute_tx_rx_params(
            seq, probe_model, speed_of_sound=medium.speed_of_sound)

        delays = tx_rx_params["tx_delays"]

        # Expected aperture tx/rx 1
        expected_aperture = np.zeros((32,), dtype=bool)
        expected_aperture[0:16+1] = True
        expected_delays = np.squeeze(delays[0])
        tx_rx = tx_rx_sequence.ops[0]
        np.testing.assert_array_equal(tx_rx.tx.aperture, expected_aperture)
        np.testing.assert_array_equal(tx_rx.rx.aperture, expected_aperture)
        np.testing.assert_almost_equal(tx_rx.tx.delays, expected_delays)

        # Expected aperture tx/rx 2
        expected_aperture = np.ones((32,), dtype=bool)
        tx_rx = tx_rx_sequence.ops[1]
        np.testing.assert_array_equal(tx_rx.tx.aperture, expected_aperture)
        np.testing.assert_array_equal(tx_rx.rx.aperture, expected_aperture)

        # Expected aperture tx/rx 3
        expected_aperture = np.zeros((32,), dtype=bool)
        expected_aperture[1:] = True
        tx_rx = tx_rx_sequence.ops[2]
        np.testing.assert_array_equal(tx_rx.tx.aperture, expected_aperture)
        np.testing.assert_array_equal(tx_rx.rx.aperture, expected_aperture)

        # Expected aperture tx/rx 4
        expected_aperture = np.zeros((32,), dtype=bool)
        expected_aperture[16:] = True
        tx_rx = tx_rx_sequence.ops[3]
        np.testing.assert_array_equal(tx_rx.tx.aperture, expected_aperture)
        np.testing.assert_array_equal(tx_rx.rx.aperture, expected_aperture)


if __name__ == "__main__":
    unittest.main()
